{"version":3,"sources":["webpack:///./src/templates/articles.js","webpack:///./src/components/Link.js","webpack:///./src/components/SEO/SchemaOrg.js","webpack:///./src/components/SEO/index.js"],"names":["Articles","_ref5","_ref5$data","data","site","allMdx","_ref5$pageContext","pageContext","pagination","page","categories","nextPagePath","previousPagePath","posts","map","id","edges","find","edge","node","parent","sourceInstanceName","filter","post","undefined","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_Layout__WEBPACK_IMPORTED_MODULE_6__","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","components_Container__WEBPACK_IMPORTED_MODULE_4__","noVerticalPadding","_ref6","key","css","bpMaxMD","bpMaxSM","frontmatter","banner","_components_Link__WEBPACK_IMPORTED_MODULE_7__","aria-label","title","to","fields","slug","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","a","sizes","childImageSharp","fluid","_ref","date","_ref2","excerpt","_ref3","_ref4","pageQuery","Link","children","other","_objectWithoutPropertiesLoose","test","_emotion_core__WEBPACK_IMPORTED_MODULE_5__","gatsby_link__WEBPACK_IMPORTED_MODULE_7___default","_extends","href","React","memo","author","canonicalUrl","datePublished","defaultTitle","description","image","isBlogPost","organization","url","baseSchema","@context","@type","name","alternateName","schema","concat","itemListElement","position","item","@id","headline","publisher","logo","mainEntityOfPage","core_browser_esm","Helmet_default","type","JSON","stringify","SEO","postData","_ref$frontmatter","postImage","gatsby_browser_entry","query","render","seo","siteMetadata","postMeta","childMarkdownRemark","config","siteTitle","path","sep","react_default","Fragment","content","property","social","fbAppID","twitter","SchemaOrg","_3550155404","propTypes","PropTypes","bool","shape","any","string","defaultProps"],"mappings":"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","file":"component---src-templates-articles-js-a42abf099bbd650125b5.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { css } from '@emotion/core'\nimport Container from 'components/Container'\nimport SEO from '../components/SEO'\nimport Layout from '../components/Layout'\nimport Link from '../components/Link'\nimport { bpMaxSM, bpMaxMD } from '../lib/breakpoints'\n\nconst Articles = ({\n  data: { site, allMdx },\n  pageContext: { pagination, categories }\n}) => {\n  const { page, nextPagePath, previousPagePath } = pagination\n\n  const posts = page\n    .map(id =>\n      allMdx.edges.find(\n        edge =>\n          edge.node.id === id && edge.node.parent.sourceInstanceName !== 'pages'\n      )\n    )\n    .filter(post => post !== undefined)\n\n  return (\n    <Layout site={site}>\n      <SEO />\n      <Container noVerticalPadding>\n        {posts.map(({ node: post }) => (\n          <div\n            key={post.id}\n            css={css`\n              :not(:first-of-type) {\n                margin-top: 60px;\n                ${bpMaxMD} {\n                  margin-top: 40px;\n                }\n                ${bpMaxSM} {\n                  margin-top: 20px;\n                }\n              }\n              :first-of-type {\n                margin-top: 20px;\n                ${bpMaxSM} {\n                  margin-top: 20px;\n                }\n              }\n              .gatsby-image-wrapper {\n              }\n              ${bpMaxSM} {\n                padding: 20px;\n              }\n              display: flex;\n              flex-direction: column;\n            `}\n          >\n            {post.frontmatter.banner && (\n              <div\n                css={css`\n                  padding: 60px 60px 40px 60px;\n                  ${bpMaxSM} {\n                    padding: 20px;\n                  }\n                `}\n              >\n                <Link\n                  aria-label={`View ${post.frontmatter.title} article`}\n                  to={`/${post.fields.slug}`}\n                >\n                  <Img sizes={post.frontmatter.banner.childImageSharp.fluid} />\n                </Link>\n              </div>\n            )}\n            <h2\n              css={css`\n                margin-top: 30px;\n                margin-bottom: 10px;\n              `}\n            >\n              <Link\n                aria-label={`View ${post.frontmatter.title} article`}\n                to={`/${post.fields.slug}`}\n              >\n                {post.frontmatter.title}\n              </Link>\n            </h2>\n            <small>{post.frontmatter.date}</small>\n            <p\n              css={css`\n                margin-top: 10px;\n              `}\n            >\n              {post.excerpt}\n            </p>{' '}\n            <Link\n              to={`/${post.fields.slug}`}\n              aria-label={`view \"${post.frontmatter.title}\" article`}\n            >\n              Read Article →\n            </Link>\n          </div>\n        ))}\n        <div css={css({ marginTop: '30px' })}>\n          {nextPagePath && (\n            <Link to={nextPagePath} aria-label=\"View next page\">\n              Next Page →\n            </Link>\n          )}\n          {previousPagePath && (\n            <Link to={previousPagePath} aria-label=\"View previous page\">\n              ← Previous Page\n            </Link>\n          )}\n        </div>\n        <hr\n          css={css`\n            margin: 50px 0;\n          `}\n        />\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Articles\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      ...site\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          id\n          fields {\n            title\n            slug\n            date\n          }\n          parent {\n            ... on File {\n              sourceInstanceName\n            }\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            slug\n            keywords\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport GatsbyLink from 'gatsby-link'\n\nconst Link = ({ children, to, ...other }) => {\n  const internal = /^\\/(?!\\/)/.test(to)\n\n  if (internal) {\n    return (\n      <GatsbyLink to={to} {...other}>\n        {children}\n      </GatsbyLink>\n    )\n  }\n\n  return (\n    <a href={to} {...other}>\n      {children}\n    </a>\n  )\n}\n\nexport default Link\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nexport default React.memo(\n  ({\n    author,\n    canonicalUrl,\n    datePublished,\n    defaultTitle,\n    description,\n    image,\n    isBlogPost,\n    organization,\n    title,\n    url,\n  }) => {\n    const baseSchema = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url,\n        name: title,\n        alternateName: defaultTitle,\n      },\n    ]\n\n    const schema = isBlogPost\n      ? [\n          ...baseSchema,\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BreadcrumbList',\n            itemListElement: [\n              {\n                '@type': 'ListItem',\n                position: 1,\n                item: {\n                  '@id': url,\n                  name: title,\n                  image,\n                },\n              },\n            ],\n          },\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BlogPosting',\n            url,\n            name: title,\n            alternateName: defaultTitle,\n            headline: title,\n            image: {\n              '@type': 'ImageObject',\n              url: image,\n            },\n            description,\n            author: {\n              '@type': 'Person',\n              name: author.name,\n            },\n            publisher: {\n              '@type': 'Organization',\n              url: organization.url,\n              logo: organization.logo,\n              name: organization.name,\n            },\n            mainEntityOfPage: {\n              '@type': 'WebSite',\n              '@id': canonicalUrl,\n            },\n            datePublished,\n          },\n        ]\n      : baseSchema\n\n    return (\n      <Helmet>\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n      </Helmet>\n    )\n  },\n)\n","import path from 'path'\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport SchemaOrg from './SchemaOrg'\nimport config from '../../../config/siteconfig'\n\nconst SEO = ({ postData, frontmatter = {}, postImage, isBlogPost }) => (\n  <StaticQuery\n    query={graphql`\n      {\n        site {\n          siteMetadata {\n            title\n            description\n            canonicalUrl\n            image\n            author {\n              name\n            }\n            organization {\n              name\n              url\n              logo\n            }\n            social {\n              twitter\n              fbAppID\n            }\n          }\n        }\n      }\n    `}\n    render={({ site: { siteMetadata: seo } }) => {\n      const postMeta =\n        frontmatter || postData.childMarkdownRemark.frontmatter || {}\n      const title = isBlogPost ? postMeta.title : config.siteTitle\n      const description = postMeta.description || seo.description\n      const image = postImage ? `${seo.canonicalUrl}${postImage}` : seo.image\n      const url = postMeta.slug\n        ? `${seo.canonicalUrl}${path.sep}${postMeta.slug}`\n        : seo.canonicalUrl\n      const datePublished = isBlogPost ? postMeta.datePublished : false\n\n      return (\n        <React.Fragment>\n          <Helmet>\n            {/* General tags */}\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={image} />\n\n            {/* OpenGraph tags */}\n            <meta property=\"og:url\" content={url} />\n            {isBlogPost ? <meta property=\"og:type\" content=\"article\" /> : null}\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={image} />\n            <meta property=\"fb:app_id\" content={seo.social.fbAppID} />\n\n            {/* Twitter Card tags */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:creator\" content={seo.social.twitter} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={image} />\n          </Helmet>\n          <SchemaOrg\n            isBlogPost={isBlogPost}\n            url={url}\n            title={title}\n            image={image}\n            description={description}\n            datePublished={datePublished}\n            canonicalUrl={seo.canonicalUrl}\n            author={seo.author}\n            organization={seo.organization}\n            defaultTitle={seo.title}\n          />\n        </React.Fragment>\n      )\n    }}\n  />\n)\n\nSEO.propTypes = {\n  isBlogPost: PropTypes.bool,\n  postData: PropTypes.shape({\n    childMarkdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.any,\n      excerpt: PropTypes.any,\n    }),\n  }),\n  postImage: PropTypes.string,\n}\n\nSEO.defaultProps = {\n  isBlogPost: false,\n  postData: { childMarkdownRemark: {} },\n  postImage: null,\n}\n\nexport default SEO\n"],"sourceRoot":""}