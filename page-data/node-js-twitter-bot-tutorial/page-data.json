{"componentChunkName":"component---src-templates-post-js","path":"/node-js-twitter-bot-tutorial","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Writing a Node.js Twitter Bot Part 1","date":"December 15, 2016","author":"Aman Mittal","banner":null,"slug":"node-js-twitter-bot-tutorial","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"node-js-twitter-bot-tutorial\",\n  \"date\": \"2016-12-15T00:00:00.000Z\",\n  \"title\": \"Writing a Node.js Twitter Bot Part 1\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*N32NxcCDKDDjlc56ghcsaA.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"In this tutorial, we will create a Twitter Bot with Node.js that retweets or favorites based on hashtags, and replies to users if they follow the account.\"), mdx(\"p\", null, \"Update: the second part of this tutorial is available \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/\"\n  }), \"here!\")), mdx(\"h2\", null, \"What do you need to create this bot?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You must have \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://nodejs.org\"\n  }), \"Node.js\"), \" installed on your system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A Twitter Account.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your bot will be using \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/twit\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"twit\")), \" which is an npm module to manipulate tweets and streams, and to communicate with the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://dev.twitter.com/docs\"\n  }), \"Twitter API\"), \".\")), mdx(\"h2\", null, \"Let\\u2019s Start\"), mdx(\"p\", null, \"Setup an empty directory and initialise it with:\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ npm init\"), \" to configure this web application with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file. Then create two new files: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bot.js\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" in that directory.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bot.js\"), \" will be our main app file in which we will be writing the source code of our Twitter Bot, and so in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" field to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"main\\\": \\\"bot.js\\\"\\n}\\n\")), mdx(\"p\", null, \"Your current directory structure should look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"root/project-name\\n|- bot.js\\n|- config.js\\n|- package.json\\n\")), mdx(\"h2\", null, \"Configuring and granting permissions from Twitter\\xA0API\"), mdx(\"p\", null, \"After logging to to your Twitter account, follow to this link: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://apps.twitter.com/app/new\"\n  }), \"https://apps.twitter.com/app/new\"), \" to create a new application. Fill out the necessary fields in the form click on the button \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Create Your Twitter Application.\"), \" After creating the application, look for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Keys and Access Tokens\"), \" under the nav-panes and click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Generate Token Actions\\\\\"), \" and then copy:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consumer Key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consumer Secret\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Access Token\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Access Token Secret\")), mdx(\"p\", null, \"Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" file and paste all four values inside it. Expose those values using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.export\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//config.js\\n/\\\\*\\\\* TWITTER APP CONFIGURATION\\n \\\\* consumer\\\\_key\\n \\\\* consumer\\\\_secret\\n \\\\* access\\\\_token\\n \\\\* access\\\\_token\\\\_secret\\n \\\\*/\\n\\nmodule.exports = {\\n  consumer\\\\_key: '',\\n  consumer\\\\_secret: '',\\n  access\\\\_token: '',\\n  access\\\\_token\\\\_secret: ''\\n}\\n\")), mdx(\"p\", null, \"Now, the Twitter bot\\u2019s configuration is step is complete. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Please note,\"), \" for every different application, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumer key\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"consumer secret\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access_token\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access_token_secret\"), \" will differ.\"), mdx(\"h2\", null, \"Building the\\xA0bot\"), mdx(\"p\", null, \"Since the configuration step is complete, now let\\u2019s install our third requisite that is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/twit\"\n  }), \"Twitter API client for node\"), \" and will help us to communicate to Twitter API and provide an API for all necessary actions \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(such as retweet and favorite a tweet).\")), mdx(\"p\", null, \"We will start by installing the dependency we need for our application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"$ npm install --save twit\\n\")), mdx(\"p\", null, \"After the dependency has finished installing, go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bot.js\"), \" file and require the dependency and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var twit = require(\\u2019twit\\u2019);\\nvar config = require(\\u2019./config.js\\u2019);\\n\")), mdx(\"p\", null, \"Pass the configuration (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"consumer and access tokens\"), \") of our Twitter application in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"twit:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var Twitter = new twit(config)\\n\")), mdx(\"p\", null, \"So far, so good?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PLEASE NOTE: You must refer to\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[**twit**](https://www.npmjs.com/package/twit)\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/twit\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"documentation\")), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for a deep reference.\")), mdx(\"h4\", null, \"Retweet Bot\"), mdx(\"p\", null, \"Let\\u2019s write a function expression that finds the latest tweets according to the query passed as a parameter. We will initialise a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"params\"), \" object that will hold various properties to search a tweet, but most importantly \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"q\"), \" property that will refine our searches. Whatever value you feed in this property, our bot will search the tweets to retweet based on this criteria. You can feed this property values like a twitter handler, to monitor a specific twitter account or a #hashtag. For our example bot, we have find latest tweets on #nodejs.\"), mdx(\"p\", null, \"This is how the functionality of the retweet bot starts:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var retweet = function() {\\n  var params = {\\n    q: '#nodejs, #Nodejs',\\n    result\\\\_type: 'recent',\\n    lang: 'en'\\n  }\\n\")), mdx(\"p\", null, \"The other two properties: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"result_type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lang\"), \" are optional. On defining the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"result_type: 'recent'\"), \" notifies bot to only search for the latest tweets, tweets that have occurred in the time period since our bot has started or it made the last retweet.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"//%20for%20more%20parametes,%20see:%20https://dev.twitter.com/rest/reference/get/search/tweets\"\n  }), \"There is a list of parameters provided by the Twitter API\"), \".\"), mdx(\"p\", null, \"Our next step is to search for the tweets based on our parameters. For this, we will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Twitter.get\"), \" function provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"twit\"), \" API to GET any of the REST API endpoints. The REST API endpoint is a reference to the T\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.twitter.com/docs\"\n  }), \"witter API endpoint\"), \" we are going to make a call to search for tweets. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Twitter.get\"), \" function accepts three arguments: API endpoint, params object (defined by us) and a callback.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// RETWEET BOT ==========================\\n\\n// find latest tweet according the query 'q' in params\\nvar retweet = function() {\\n  var params = {\\n    q: '#nodejs, #Nodejs', // REQUIRED\\n    result_type: 'recent',\\n    lang: 'en'\\n  }\\n  // for more parametes, see: https://dev.twitter.com/rest/reference/get/search/tweets\\n\\n  Twitter.get('search/tweets', params, function(err, data) {\\n    // if there no errors\\n    if (!err) {\\n      // grab ID of tweet to retweet\\n      var retweetId = data.statuses[0].id_str\\n      // Tell TWITTER to retweet\\n      Twitter.post(\\n        'statuses/retweet/:id',\\n        {\\n          id: retweetId\\n        },\\n        function(err, response) {\\n          if (response) {\\n            console.log('Retweeted!!!')\\n          }\\n          // if there was an error while tweeting\\n          if (err) {\\n            console.log(\\n              'Something went wrong while RETWEETING... Duplication maybe...'\\n            )\\n          }\\n        }\\n      )\\n    }\\n    // if unable to Search a tweet\\n    else {\\n      console.log('Something went wrong while SEARCHING...')\\n    }\\n  })\\n}\\n\")), mdx(\"p\", null, \"To post or to retweet the tweet our bot has found we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Twitter.post()\"), \" method to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"POST any of the REST API endpoints\"), \". It also takes the same number of arguments as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Twitter.get()\"), \".\"), mdx(\"p\", null, \"Now to automate this action we defined above, we can use JavaScript\\u2019s timer function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval()\"), \" to search and retweet after a specific period of time.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// grab & retweet as soon as program is running...\\nretweet()\\n// retweet in every 50 minutes\\nsetInterval(retweet, 3000000)\\n\")), mdx(\"p\", null, \"Please note that all JavaScript\\u2019s Timer functions take the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"amount of time\"), \" argument in milliseconds.\"), mdx(\"h4\", null, \"Favorite Bot\"), mdx(\"p\", null, \"Similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retweet\"), \" bot we can define and initialise another function expression that will search and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"favorite\"), \" a tweet randomly. Yes, the difference here is to search and grab the tweet randomly. We will start by creating a parameter object \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"params\"), \" that will consist of three properties as in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"retweet()\"), \" function expression. The bot will search for tweets using the same\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".get()\"), \" function provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"twit\"), \" API to GET any of the Twitter API endpoints. In our case, we need \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"search/tweets\"), \". Then we will store the status of the search for tweet to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"favorite\"), \" in a variable and in a another variable we will apply the random function by passing the \\u201Cstatus of the search\\u201D variable as an argument.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// FAVORITE BOT====================\\n\\n// find a random tweet and 'favorite' it\\nvar favoriteTweet = function() {\\n  var params = {\\n    q: '#nodejs, #Nodejs', // REQUIRED\\n    result_type: 'recent',\\n    lang: 'en'\\n  }\\n  // for more parametes, see: https://dev.twitter.com/rest/reference\\n\\n  // find the tweet\\n  Twitter.get('search/tweets', params, function(err, data) {\\n    // find tweets\\n    var tweet = data.statuses\\n    var randomTweet = ranDom(tweet) // pick a random tweet\\n\\n    // if random tweet exists\\n    if (typeof randomTweet != 'undefined') {\\n      // Tell TWITTER to 'favorite'\\n      Twitter.post('favorites/create', { id: randomTweet.id_str }, function(\\n        err,\\n        response\\n      ) {\\n        // if there was an error while 'favorite'\\n        if (err) {\\n          console.log('CANNOT BE FAVORITE... Error')\\n        } else {\\n          console.log('FAVORITED... Success!!!')\\n        }\\n      })\\n    }\\n  })\\n}\\n// grab & 'favorite' as soon as program is running...\\nfavoriteTweet()\\n// 'favorite' a tweet in every 60 minutes\\nsetInterval(favoriteTweet, 3600000)\\n\\n// function to generate a random tweet tweet\\nfunction ranDom(arr) {\\n  var index = Math.floor(Math.random() * arr.length)\\n  return arr[index]\\n}\\n\")), mdx(\"p\", null, \"Note that the tweets searched by our bot are all stored in an array. Again, we use JavaScript\\u2019s timer function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval()\"), \"to search and favorite the tweet after a specific period of time in milliseconds.\"), mdx(\"p\", null, \"The complete module: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bot.js\"), \"\\xA0:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Dependencies =========================\\nvar twit = require('twit'),\\n  config = require('./config')\\n\\nvar Twitter = new twit(config)\\n\\n// RETWEET BOT ==========================\\n\\n// find latest tweet according the query 'q' in params\\nvar retweet = function() {\\n  var params = {\\n    q: '#nodejs, #Nodejs', // REQUIRED\\n    result_type: 'recent',\\n    lang: 'en'\\n  }\\n  Twitter.get('search/tweets', params, function(err, data) {\\n    // if there no errors\\n    if (!err) {\\n      // grab ID of tweet to retweet\\n      var retweetId = data.statuses[0].id_str\\n      // Tell TWITTER to retweet\\n      Twitter.post(\\n        'statuses/retweet/:id',\\n        {\\n          id: retweetId\\n        },\\n        function(err, response) {\\n          if (response) {\\n            console.log('Retweeted!!!')\\n          }\\n          // if there was an error while tweeting\\n          if (err) {\\n            console.log(\\n              'Something went wrong while RETWEETING... Duplication maybe...'\\n            )\\n          }\\n        }\\n      )\\n    }\\n    // if unable to Search a tweet\\n    else {\\n      console.log('Something went wrong while SEARCHING...')\\n    }\\n  })\\n}\\n\\n// grab & retweet as soon as program is running...\\nretweet()\\n// retweet in every 50 minutes\\nsetInterval(retweet, 3000000)\\n\\n// FAVORITE BOT====================\\n\\n// find a random tweet and 'favorite' it\\nvar favoriteTweet = function() {\\n  var params = {\\n    q: '#nodejs, #Nodejs', // REQUIRED\\n    result_type: 'recent',\\n    lang: 'en'\\n  }\\n  // find the tweet\\n  Twitter.get('search/tweets', params, function(err, data) {\\n    // find tweets\\n    var tweet = data.statuses\\n    var randomTweet = ranDom(tweet) // pick a random tweet\\n\\n    // if random tweet exists\\n    if (typeof randomTweet != 'undefined') {\\n      // Tell TWITTER to 'favorite'\\n      Twitter.post('favorites/create', { id: randomTweet.id_str }, function(\\n        err,\\n        response\\n      ) {\\n        // if there was an error while 'favorite'\\n        if (err) {\\n          console.log('CANNOT BE FAVORITE... Error')\\n        } else {\\n          console.log('FAVORITED... Success!!!')\\n        }\\n      })\\n    }\\n  })\\n}\\n// grab & 'favorite' as soon as program is running...\\nfavoriteTweet()\\n// 'favorite' a tweet in every 60 minutes\\nsetInterval(favoriteTweet, 3600000)\\n\\n// function to generate a random tweet tweet\\nfunction ranDom(arr) {\\n  var index = Math.floor(Math.random() * arr.length)\\n  return arr[index]\\n}\\n\")), mdx(\"h4\", null, \"Usage\"), mdx(\"p\", null, \"To run this bot, go to your terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"$ node bot.js\\n\")), mdx(\"p\", null, \"To avoid this monotonous process you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm scripts\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodemon.\"), \" You can also deploy this app on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Heroku\"), \" for a continuous integration.\"), mdx(\"p\", null, \"To use npm scripts, make this edit under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scripts\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \"\\xA0:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"node bot.js\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Then from terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"$ npm start\\n\")), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"There are various ways to write a Twitter Bot, this is just one way. Your bot can be smart and you can do various things with it. You just have to refer to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[twit](https://www.npmjs.com/package/twit)\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/twit\"\n  }), \"documentation\"), \" for other RESTful API methods to manipulate \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://REST%20API%20Endpoints:%20https://dev.twitter.com/rest/public\"\n  }), \"Twitter API endpoints\"), \".\"), mdx(\"p\", null, \"For further reading check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://botwiki.org/bots/twitterbots/\"\n  }), \"Botwiki.org\"), \" for various types of bots on vast amount of platforms. For advanced reading, check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://botwiki.org/tutorials/twitterbots/\"\n  }), \"Botwiki\\u2019s list of tutorials of Twitter Bots in different programming languages\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    href: \"https://community.risingstack.com/node-js-twitter-bot-tutorial/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"Originally Published at RisingStack.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"24f717fe-0502-5566-bc9d-0cfc950368a9","prev":{"id":"8731c3f1-d96d-5198-a9f5-c780231c9213","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Earlier this week,  Rising Stack Community  published the second of tutorial on Building a Twitter Bot with NodeJS. Some of you may have read the first part here  on Medium  ( published by Hackernoon )  while others might have gone through the first…","fields":{"title":"How to make a Twitter Bot with NodeJS","slug":"how-to-make-a-twitter-bot-with-nodejs","date":"2016-12-15T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"33afd4d7-205e-5365-bdee-95e0982b6939","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"How about a Twitter Bot that retweets, favorites, on the basis of hashtags and replies to other users if they follow it? I made a similar kind of a Twitter Bot  (@nodejstweet)  that feeds me the latest or the ongoing news/articles/how-to’s on a set…","fields":{"title":"Create a Simple Twitter Bot with Node.js","slug":"create-a-simple-twitter-bot-with-node-js","date":"2016-11-23T00:00:00.000Z"},"code":{"scope":""}}}}}