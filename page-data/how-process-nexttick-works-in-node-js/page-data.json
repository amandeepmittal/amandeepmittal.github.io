{"componentChunkName":"component---src-templates-post-js","path":"/how-process-nexttick-works-in-node-js","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How process.nextTick() works in Node.js?","date":"June 25, 2016","author":"Aman Mittal","banner":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='171'%3e%3cpath%20d='M212%2059l-1%2017-4-2h-6l-10%206c-12%207-11%205-11%2020v14l11%206%2013%207%2013-7%2011-6V82l-1-33-14-7-1%2017M65%2079l-11%207-1%2017c0%2021-1%2020%209%2014l7-4v-9l1-9%203-2c4-2%204-2%207-1%205%203%205%204%205%2013%200%206%200%208%202%209%203%203%2012%207%2013%206l1-17V86l-4-2c-3-3-20-12-20-12l-12%207m191%200c-14%208-13%206-12%2021v14l11%206%2012%206c3%200%2015-7%2015-8l-12-7-10-7v-4c0-4%200-5%203-7%205-3%2012%200%2012%206%200%205%201%205%208%200l7-3%201-5c0-5%200-5-4-8l-11-6c-9-5-9-5-20%202m-56%2014c-4%202-4%203-4%207s0%205%204%207l4%202%204-2c4-2%204-3%204-7s0-5-4-7c-5-2-4-2-8%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.3337222870478413,"src":"/static/fbc908a092b20e7fa3d563e07d3be67b/2b1a3/banner.jpg","srcSet":"/static/fbc908a092b20e7fa3d563e07d3be67b/49de1/banner.jpg 225w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/f709c/banner.jpg 450w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/2b1a3/banner.jpg 900w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/4dbc7/banner.jpg 1350w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/fb184/banner.jpg 1800w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/883ab/banner.jpg 2000w","srcWebp":"/static/fbc908a092b20e7fa3d563e07d3be67b/f39d8/banner.webp","srcSetWebp":"/static/fbc908a092b20e7fa3d563e07d3be67b/825b0/banner.webp 225w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/75154/banner.webp 450w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/f39d8/banner.webp 900w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/42f7e/banner.webp 1350w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/09b40/banner.webp 1800w,\n/static/fbc908a092b20e7fa3d563e07d3be67b/f6f8b/banner.webp 2000w","sizes":"(max-width: 900px) 100vw, 900px"}}},"slug":"how-process-nexttick-works-in-node-js","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-process-nexttick-works-in-node-js\",\n  \"date\": \"2016-06-25T00:00:00.000Z\",\n  \"title\": \"How process.nextTick() works in Node.js?\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": \"./banner.jpeg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/process.html\"\n  }), \"process\"), \" object is a one of the few global objects provided by the Node.js core API. It can be access from anywhere, thus its methods can also be accessed. Such is a method called process.nextTick() which is used by developers in realtime applications everyday to defer the execution of a function until the next \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@amanhimself/the-node-js-system-51090c35dddc\"\n  }), \"Event Loop Iteration\"), \".\"), mdx(\"p\", null, \"Browser JavaScript introduced us functions like setTimeout() to defer tasks in the near future. The setTimeout() function takes a callback function and a number value representing the time after which the callback function will be executed, in milliseconds.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"setTimeout(callback, 0)\\n\")), mdx(\"p\", null, \"In Node.js, each iteration of an Event Loop is called a tick. To schedule a callback function to be invoked in the next iteration of the Event Loop, we use process.nextTick(). It just takes a callback with no time bound, since it will be executing in the next iteration of the Event Loop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"process.nextTick(callback)\\n\")), mdx(\"p\", null, \"The difference between setTimeout() and process.nextTick() is that the process.nextTick() function is specific to the Node.js Event Loop. setTimeout() uses JavaScript runtime to schedule its own queue of events. When using process.nextTick(), callback function associated with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/mmalecki/1257394\"\n  }), \"it runs immediately after events in the Event Queue are processed by the Event Loop in a single iteration. In comparison to setTimeout(), it is faster since queue associated with setTimeout() or the JavaScript runtime\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function cb() {\\n  console.log('Processed in next iteration')\\n}\\nprocess.nextTick(cb)\\nconsole.log('Processed in the first iteration')\\n\")), mdx(\"p\", null, \"The above snippet is an example of how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.nextTick()\"), \" works. You can save the snippet in a file.js and run using \\\\$node file.js from your terminal. You will definitely notice that the second console.log printed before the console.log associated with function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cb()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Processed in the first iteration\\nProcessed in next iteration\\n\")), mdx(\"h4\", null, \"Further Reading:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/mmalecki/1257394\"\n  }), \"process.nextTick vs setTimeout(fn, 0)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback_args\"\n  }), \"Nodejs Official Docs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://howtonode.org/understanding-process-next-tick\"\n  }), \"Understanding process.nextTick()\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c9f8e0fc-1b7b-5a4c-8bc3-a2ef934814f1","prev":{"id":"ed07367e-0d7b-5472-b91c-ccc0e712de2e","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"The  Atom  I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor. In our world, in the world of developers, an editor plays an amount of significant…","fields":{"title":"ATOM- An Editor of 21st Century","slug":"atom-an-editor-of-21st-century","date":"2016-07-14T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"d882880c-f754-51d8-a66d-6fe52d4c54bb","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"When I started learning Node.js, I always wondered, how does it work? How is it inside Node.js? Event loop and Event Queue jargons are digested. But what exactly is going on? Where do those jargons Event Loop and Event Queue come from.To satisfy my…","fields":{"title":"The Node.js System","slug":"nodejs-system","date":"2016-04-22T00:00:00.000Z"},"code":{"scope":""}}}}}