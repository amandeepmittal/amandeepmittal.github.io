{"componentChunkName":"component---src-templates-post-js","path":"/build-a-custom-modal-with-the-animated-api-in-react-native","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Build a Custom Modal with the Animated API in React Native","date":"June 13, 2019","author":"Aman Mittal","banner":null,"slug":"build-a-custom-modal-with-the-animated-api-in-react-native","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"build-a-custom-modal-with-the-animated-api-in-react-native\",\n  \"date\": \"2019-06-13T00:00:00.000Z\",\n  \"title\": \"Build a Custom Modal with the Animated API in React Native\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://miro.medium.com/max/2500/1*TWbAI0JA3qfYeg6yujansw.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Creating a better user experience is one of the most important aspects of any application. This is where animations in mobile applications come into play. Animations are an important part of your mobile application.\"), mdx(\"p\", null, \"Fortunately, for React Native developers, there is recommended a way to create desirable user experiences. It can be achieved through \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/animated.html\"\n  }), \"Animated API\"), \". For most use cases Animated API provides the best use case to design and create fluid animations.\"), mdx(\"p\", null, \"In this tutorial, you are going to take dive deep in creating a custom modal and animated it on a button click. This is the final result we looking to achieve in a React Native application.\"), mdx(\"p\", null, \"!()\", \"[https://miro.medium.com/max/367/1*F9LUoINWB7uRjTYX5FCDdg.gif]\"), mdx(\"h3\", null, \"Table of Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prerequisites\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup up Screens\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting up Redux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating an animated Custom Modal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrating Custom Modal to HomeScreen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Animating HomeScreen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conclusion\")), mdx(\"h2\", null, \"Prerequisites\"), mdx(\"p\", null, \"Here is a complete list of plugins, packages, and tools that you\\u2019re going to need in order to follow along.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs >= \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"v8.x.x\"), \" installed along with npm/yarn.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"watchman\"), \", the file change watcher for React Native projects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.expo.io/versions/latest/workflow/expo-cli/\"\n  }), \"Expo CLI\"), \" >= \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"v2.19.4\"), \".\")), mdx(\"p\", null, \"To get started create a new project using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expo-cli\"), \" toolchain with the following set of commands. The first command will create a new project directory. Make sure you are inside the project when running the application in a simulator environment or a real device.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# create a new bare project\\nexpo-cli init rn-animations\\n\\n# navigate inside the directory\\ncd rn-animations\\n\\n# to start the project\\nyarn start\\n\")), mdx(\"p\", null, \"We are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" to kickstart the app but you are most welcome to use npm or npm scrips or use Expo CLI tool command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expo start\"), \". This way you can verify that the project has been created successfully.\"), mdx(\"p\", null, \"Next step is to install different dependencies or libraries that our little demo project is going to depend. Run the below command from a terminal window.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add redux react-redux styled-components @expo/vector-icons\\n\")), mdx(\"p\", null, \"After installing these dependencies, this is how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file looks like.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"main\\\": \\\"node_modules/expo/AppEntry.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"expo start\\\",\\n    \\\"android\\\": \\\"expo start --android\\\",\\n    \\\"ios\\\": \\\"expo start --ios\\\",\\n    \\\"web\\\": \\\"expo start --web\\\",\\n    \\\"eject\\\": \\\"expo eject\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@expo/vector-icons\\\": \\\"^10.0.2\\\",\\n    \\\"expo\\\": \\\"^33.0.0\\\",\\n    \\\"react\\\": \\\"16.8.3\\\",\\n    \\\"react-dom\\\": \\\"^16.8.6\\\",\\n    \\\"react-native\\\": \\\"https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz\\\",\\n    \\\"react-native-web\\\": \\\"^0.11.4\\\",\\n    \\\"react-redux\\\": \\\"^7.0.3\\\",\\n    \\\"redux\\\": \\\"^4.0.1\\\",\\n    \\\"styled-components\\\": \\\"^4.3.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"babel-preset-expo\\\": \\\"^5.1.1\\\"\\n  },\\n  \\\"private\\\": true\\n}\\n\")), mdx(\"h2\", null, \"Setup up Screens\"), mdx(\"p\", null, \"Create two screens inside a new directory called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens/\"), \". One is going to be the home screen for the app and the main UI point. The second screen is going to be a normal screen but will behave like a custom modal in terms of UI behavior. You can name them whatever you like but make sure to remember those names.\"), mdx(\"p\", null, \"Here is the initial snippet of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens/HomeScreen.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nclass HomeScreen extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <ButtonText>Open Modal</ButtonText>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst ButtonText = styled.Text`\\n  font-size: 20px;\\n  font-weight: 600;\\n`\\n\\nexport default HomeScreen\\n\")), mdx(\"p\", null, \"The above snippet is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" to define new UI elements using React Native API. For more information on to read on how to integrate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" and its advantage in a React Native app, please go through this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/swlh/using-styled-components-with-react-native-de645fcf4787\"\n  }), \"link\"), \".\"), mdx(\"p\", null, \"For \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModal.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nclass CustomModal extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Text>CustomModal</Text>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst Text = styled.Text`\\n  font-size: 20px;\\n  font-weight: 600;\\n`\\n\\nexport default CustomModal\\n\")), mdx(\"p\", null, \"Now, let us import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" component inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \". This component is going to be the entry point of our app.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\n\\nimport HomeScreen from './screens/HomeScreen'\\n\\nexport default function App() {\\n  return <HomeScreen />\\n}\\n\")), mdx(\"p\", null, \"On running the application using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \" you will get the following result. The header has a breakthrough line indicates that the stack navigator has been integrated into our app.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*VRSKOFVSI-C0KEaTlyW_Pw.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", null, \"Setting up Redux\"), mdx(\"p\", null, \"In this section, let us create a simple reducer for Redux state management library. It might be that redux as a library is overkill for the purpose of this tutorial, so if you don't want to use it, please find a way that works for you. Also, I am not going to get into details of how you should manage reducers and actions right now. That said, first create a reducer inside a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reducers/index.js\"), \" with an initial state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const initialState = {\\n  action: ''\\n}\\n\\nconst reducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case 'OPEN_MODAL':\\n      return { ...state, action: 'openModal' }\\n    case 'CLOSE_MODAL':\\n      return { ...state, action: 'closeModal' }\\n    default:\\n      return state\\n  }\\n}\\n\\nexport default reducer\\n\")), mdx(\"p\", null, \"Since the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redux\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \" dependencies are already installed, open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file and inside write the code to hook a store provider for redux to manage global state in the app.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { createStore } from 'redux'\\nimport { Provider } from 'react-redux'\\nimport HomeScreen from './screens/HomeScreen'\\nimport reducer from './reducers'\\n\\nconst store = createStore(reducer)\\n\\nconst App = () => (\\n  <Provider store={store}>\\n    <HomeScreen />\\n  </Provider>\\n)\\n\\nexport default App\\n\")), mdx(\"p\", null, \"The redux setup is complete. Let us move on to the next section where the real thing starts.\"), mdx(\"h2\", null, \"Creating an animated Custom Modal\"), mdx(\"p\", null, \"Even though we are creating this custom modal as a screen, you can always use this as a re-usable component. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModel.js\"), \" file and add the following snippet of code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nclass CustomModal extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Header />\\n        <Body />\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  position: absolute;\\n  background: white;\\n  width: 100%;\\n  height: 100%;\\n  z-index: 100;\\n`\\n\\nconst Header = styled.View`\\n  background: #333;\\n  height: 150px;\\n`\\n\\nconst Body = styled.View`\\n  background: #eaeaea;\\n  height: 900px;\\n`\\n\\nexport default CustomModal\\n\")), mdx(\"p\", null, \"The above component is simple. It contains three react native views. On the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" we are using the CSS property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: absolute\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"z-index\"), \" will allow the modal to appear on the top of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" component. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Body\"), \" are subviews with fixed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \".\"), mdx(\"p\", null, \"In order to see this in action, open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen.js\"), \" and import it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// ...\\nimport CustomModal from './CustomModal'\\n\\nclass HomeScreen extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <CustomModal />\\n        <ButtonText>Open Modal</ButtonText>\\n      </Container>\\n    )\\n  }\\n}\\n\\n// ...\\n\")), mdx(\"p\", null, \"You will get the following result in your simulator.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*rIrz_kLxluX_9Pll7tj-Vg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Great! Now that we can see the Custom Model on the screen, let us start applying some animations. To apply animations in this demo application, we will be using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated\"), \" API from React Native. You do not have to install anything rather than import the API from React Native core. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModel.js\"), \" and modify it. In the below snippet, also define an initial state.\"), mdx(\"p\", null, \"This initial state value defines an Animated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" value to push model up and down.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\nimport { Animated } from 'react-native'\\n\\nclass CustomModal extends React.Component {\\n  state = {\\n    top: new Animated.Value(900)\\n  }\\n  render() {\\n    return (\\n      <AnimatedContainer style={{ top: this.state.top }}>\\n        <Header />\\n        <Body />\\n      </AnimatedContainer>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  position: absolute;\\n  background: white;\\n  width: 100%;\\n  height: 100%;\\n  z-index: 100;\\n`\\n\\nconst AnimatedContainer = Animated.createAnimatedComponent(Container)\\n\\nconst Header = styled.View`\\n  background: #333;\\n  height: 150px;\\n`\\n\\nconst Body = styled.View`\\n  background: #eaeaea;\\n  height: 900px;\\n`\\n\\nexport default CustomModal\\n\")), mdx(\"p\", null, \"Right now, the initial top value is receiving an Animated value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"900\"), \". The syntax \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated.Value()\"), \" is used to bind style properties such as we are using with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AnimatedContainer\"), \". In order to perform animations, the component or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" has to be Animated, thus, you can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated.createAnimatedComponent()\"), \" to transform a basic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" an Animated one.\"), mdx(\"p\", null, \"Next, define a custom method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleModal\"), \" before the render function. This function will handle the animations to open and close the modal. So far, it is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"componentDidMount() {\\n        this.toggleModal()\\n    }\\n\\ntoggleModal = () => {\\n    Animated.spring(this.state.top, {\\n        toValue: 174\\n    }).start()\\n}\\n\")), mdx(\"p\", null, \"In the above snippet, we are using spring animations using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated.spring()\"), \" method. This is used to configure animations based on the analytical values to create a simple spring model based on physics. To read more about this method, take a look at this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/animated#spring\"\n  }), \"link\"), \" in official React Native documentation. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toValue\"), \" is passed as the second parameter. Lastly, to start an animation, you need to call the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".start()\"), \".\"), mdx(\"p\", null, \"To trigger this animation on the first render of the component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModal\"), \", we are using React's lifecycle method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount()\"), \".\"), mdx(\"p\", null, \"You will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Nl3yw5Rgy4Wo3NnBGpvSbg.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We need to add a button to close the modal. Let us add the styles and view for the close button on the modal. Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CloseView\"), \" component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" library inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TouchableOpacity\"), \" button. Also, for the close icon, we are going to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@expo/vector-icons\"), \" library.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\nimport { Animated, TouchableOpacity, Dimensions } from 'react-native'\\nimport * as Icon from '@expo/vector-icons'\\n\\nconst screenHeight = Dimensions.get('window').height\\n\\nclass CustomModal extends React.Component {\\n  state = {\\n    top: new Animated.Value(screenHeight)\\n  }\\n\\n  componentDidMount() {\\n    this.toggleModal()\\n  }\\n\\n  toggleModal = () => {\\n    Animated.spring(this.state.top, {\\n      toValue: 174\\n    }).start()\\n  }\\n\\n  closeModal = () => {\\n    Animated.spring(this.state.top, {\\n      toValue: screenHeight\\n    }).start()\\n  }\\n\\n  render() {\\n    return (\\n      <AnimatedContainer style={{ top: this.state.top }}>\\n        <Header />\\n        <TouchableOpacity\\n          onPress={this.closeModal}\\n          style={{\\n            position: 'absolute',\\n            top: 120,\\n            left: '50%',\\n            marginLeft: -22,\\n            zIndex: 1\\n          }}\\n        >\\n          <CloseView style={{ elevation: 10 }}>\\n            <Icon.Ionicons name=\\\"ios-close\\\" size={44} color=\\\"blue\\\" />\\n          </CloseView>\\n        </TouchableOpacity>\\n        <Body />\\n      </AnimatedContainer>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  position: absolute;\\n  background: white;\\n  width: 100%;\\n  height: 100%;\\n  z-index: 100;\\n`\\n\\nconst AnimatedContainer = Animated.createAnimatedComponent(Container)\\n\\nconst Header = styled.View`\\n  background: #333;\\n  height: 150px;\\n`\\n\\nconst Body = styled.View`\\n  background: #eaeaea;\\n  height: ${screenHeight};\\n`\\n\\nconst CloseView = styled.View`\\n  width: 44px;\\n  height: 44px;\\n  border-radius: 22px;\\n  background: white;\\n  justify-content: center;\\n  align-items: center;\\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);\\n`\\n\\nexport default CustomModal\\n\")), mdx(\"p\", null, \"To calculate the height of a screen's device, in the above snippet, start by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dimensions\"), \" API. React Native uses Dots Per Inch (DPI) to measure the size (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"width and height\"), \") of a device's screen. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dimensions.get(\\\"window\\\").height\"), \" allows to gather the screen height. We then use this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screenHeight\"), \" variable in three places. First, the initial state which was before had a static value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"900\"), \" is now able to adapt for different devices.\"), mdx(\"p\", null, \"Second, to close the modal or inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeModal()\"), \" method. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleModal\"), \" function we are setting a custom to value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"174\"), \" which leaves a partial view of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" in the background. If you set this value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", the custom modal will cover the whole screen. To close the modal is setting this value to default screen's height. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TouchableOpacity\"), \" that wraps the close button invokes the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeModal\"), \".\"), mdx(\"p\", null, \"The third place where the variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screenHeight\"), \" are the styles of the view container: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Body\"), \". Please note that box-shadow will not work on Android devices. If you still want to give the close button a shadow, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elevation\"), \" property as inline styles to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CloseView\"), \".\"), mdx(\"p\", null, \"You will get the following result in your simulator device.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*ZCOwR-WWqOjoE1gkuKkArQ.gif\",\n    \"alt\": null\n  }))), mdx(\"h2\", null, \"Integrating Redux to Modal\"), mdx(\"p\", null, \"In this section, you are going to use Redux to manage the state of opening and closing the modal. We have already defined the reducers and actions to serve this purpose. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModal.js\"), \" and import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connect\"), \" Hight Order Function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \" library. After that, create two new functions that are somewhat boilerplate code when using a redux in any React or React Native application. These functions are called: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapStateToProps()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapDispatchToProps()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// ...\\nimport { connect } from 'react-redux'\\n\\nfunction mapStateToProps(state) {\\n  return { action: state.action }\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  return {\\n    closeModal: () =>\\n      dispatch({\\n        type: 'CLOSE_MODAL'\\n      })\\n  }\\n}\\n\\nexport default connect(\\n  mapStateToProps,\\n  mapDispatchToProps\\n)(CustomModal)\\n\")), mdx(\"p\", null, \"Next, let us merge the business logic to trigger animations for opening and closing the modal inside the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleModal\"), \" function. The below snippet uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statements to track the right action coming from the global state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"toggleModal = () => {\\n  if (this.props.action === 'openModal') {\\n    Animated.spring(this.state.top, {\\n      toValue: 174\\n    }).start()\\n  }\\n  if (this.props.action === 'closeModal') {\\n    Animated.spring(this.state.top, {\\n      toValue: screenHeight\\n    }).start()\\n  }\\n}\\n\")), mdx(\"p\", null, \"Also, change the value for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onPress\"), \" attribute at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TouchableOpacity\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onPress={this.props.closeMenu}\"), \". Lastly, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount()\"), \" method is going to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleModal()\"), \" only on the initial render which means it is going to be called only once. To resolve this, let us use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidUpdate()\"), \". This lifecycle method triggers every time there is a new state or change in props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"componentDidUpdate() {\\n        this.toggleModal()\\n    }\\n\")), mdx(\"h2\", null, \"Integrating Custom Modal to HomeScreen\"), mdx(\"p\", null, \"Since the initial state at the application level right now is empty, you are not going to see the modal trigger, by itself, when you refresh the Expo app. This serves the purpose of keeping the default behavior of the modal to be closed. But top open this custom modal, we are going to add a button on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" to activate it.\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen.js\"), \" and connect it to the redux state like below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { TouchableOpacity } from 'react-native'\\nimport styled from 'styled-components'\\nimport { connect } from 'react-redux'\\nimport CustomModal from './CustomModal'\\n\\nclass HomeScreen extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <CustomModal />\\n        <TouchableOpacity onPress={this.props.openModal}>\\n          <ButtonText>Open Modal</ButtonText>\\n        </TouchableOpacity>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst ButtonText = styled.Text`\\n  font-size: 20px;\\n  font-weight: 600;\\n`\\n\\nfunction mapStateToProps(state) {\\n  return { action: state.action }\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  return {\\n    openModal: () =>\\n      dispatch({\\n        type: 'OPEN_MODAL'\\n      })\\n  }\\n}\\n\\nexport default connect(\\n  mapStateToProps,\\n  mapDispatchToProps\\n)(HomeScreen)\\n\")), mdx(\"p\", null, \"Click the button \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Open Modal\"), \" on the UI screen and you will get similar results as follows.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*4RgkT_Rmn2gqO-6Q99wXHA.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Congratulations! You have just created a custom model that is animated and integrated it from another screen\"), \". You can end this tutorial right here if it serves the purpose or the as the title suggests. Though, if you want to continue, let us add some animations to the HomeScreen to create a pleasing UI in the next section.\"), mdx(\"h2\", null, \"Animating HomeScreen\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" component we are going to import quite a few APIs from React Native. The result we are trying to achieve is as follows. It will be easier for you to view what we want to happen to understand the code in this section.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*F9LUoINWB7uRjTYX5FCDdg.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Now that you have seen that let us first go through what are we going to import from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// ...\\nimport {\\n  TouchableOpacity,\\n  StatusBar,\\n  Animated,\\n  Easing,\\n  Platform\\n} from 'react-native'\\n\")), mdx(\"p\", null, \"In the above demo, we are switching between status bar's color from dark to light when the modal opens, we are going to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StatusBar\"), \" inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    componentDidMount() {\\n        StatusBar.setBarStyle(\\\"dark-content\\\", true)\\n\\n        if (Platform.OS == \\\"android\\\") {\\n            StatusBar.setBarStyle(\\\"light-content\\\", true)\\n        }\\n    }\\n\")), mdx(\"p\", null, \"Next, we define an initial state to manage Animations with two properties, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scale\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opacity\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"state = {\\n  scale: new Animated.Value(1),\\n  opacity: new Animated.Value(1)\\n}\\n\")), mdx(\"p\", null, \"The create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleModal\"), \" method where most of the things are happening. It gets triggered by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidUpdate()\"), \" lifecycle method just like in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomModal\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"componentDidUpdate() {\\n        this.toggleModal()\\n    }\\n\\n    toggleModal = () => {\\n        if (this.props.action === \\\"openModal\\\") {\\n            Animated.timing(this.state.scale, {\\n                toValue: 0.9,\\n                duration: 300,\\n                easing: Easing.in()\\n            }).start()\\n            Animated.spring(this.state.opacity, {\\n                toValue: 0.5\\n            }).start()\\n\\n            StatusBar.setBarStyle(\\\"light-content\\\", true)\\n        }\\n\\n        if (this.props.action === \\\"closeModal\\\") {\\n            Animated.timing(this.state.scale, {\\n                toValue: 1,\\n                duration: 300,\\n                easing: Easing.in()\\n            }).start()\\n            Animated.spring(this.state.opacity, {\\n                toValue: 1\\n            }).start()\\n\\n            StatusBar.setBarStyle(\\\"dark-content\\\", true)\\n        }\\n    }\\n\")), mdx(\"p\", null, \"To trigger the effect \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen\"), \" shrinking in the background when the modal opens, is achieved by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated.timing()\"), \". This method maps time range to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"easing\"), \" value. This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"easing\"), \" value triggers the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Easing\"), \" module from react native core. This module implements common visualization motions such as bounce, elastic, in (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"which we are using\"), \") and out, cubic, sin, back, ease, linear, quad, inout and many more. To get complete information about Easing, please refer to the docs \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/easing\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animated.timing()\"), \" has a default value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"500\"), \" milliseconds. We are changing it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"300\"), \".\"), mdx(\"p\", null, \"To create partial opacity when the home screen shrinks in the background, we are again using spring animations. Depending on whether the modal is being opened or closed, the style of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StatusBar\"), \" is being changed by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StatusBar.setBarStyle()\"), \" method.\"), mdx(\"p\", null, \"Here is the complete code for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeScreen.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport {\\n  TouchableOpacity,\\n  StatusBar,\\n  Animated,\\n  Easing,\\n  Platform\\n} from 'react-native'\\nimport styled from 'styled-components'\\nimport { connect } from 'react-redux'\\nimport CustomModal from './CustomModal'\\n\\nclass HomeScreen extends React.Component {\\n  state = {\\n    scale: new Animated.Value(1),\\n    opacity: new Animated.Value(1)\\n  }\\n\\n  componentDidMount() {\\n    StatusBar.setBarStyle('dark-content', true)\\n\\n    if (Platform.OS == 'android') {\\n      StatusBar.setBarStyle('light-content', true)\\n    }\\n  }\\n\\n  componentDidUpdate() {\\n    this.toggleModal()\\n  }\\n\\n  toggleModal = () => {\\n    if (this.props.action === 'openModal') {\\n      Animated.timing(this.state.scale, {\\n        toValue: 0.9,\\n        duration: 300,\\n        easing: Easing.in()\\n      }).start()\\n      Animated.spring(this.state.opacity, {\\n        toValue: 0.5\\n      }).start()\\n\\n      StatusBar.setBarStyle('light-content', true)\\n    }\\n\\n    if (this.props.action === 'closeModal') {\\n      Animated.timing(this.state.scale, {\\n        toValue: 1,\\n        duration: 300,\\n        easing: Easing.in()\\n      }).start()\\n      Animated.spring(this.state.opacity, {\\n        toValue: 1\\n      }).start()\\n      StatusBar.setBarStyle('dark-content', true)\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <RootView>\\n        <CustomModal />\\n        <AnimatedContainer\\n          style={{\\n            transform: [{ scale: this.state.scale }],\\n            opacity: this.state.opacity\\n          }}\\n        >\\n          <TouchableOpacity onPress={this.props.openModal}>\\n            <ButtonText>Open Modal</ButtonText>\\n          </TouchableOpacity>\\n        </AnimatedContainer>\\n      </RootView>\\n    )\\n  }\\n}\\n\\nconst RootView = styled.View`\\n  flex: 1;\\n  background: black;\\n`\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  background: white;\\n  border-top-left-radius: 10px;\\n  border-top-right-radius: 10px;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst AnimatedContainer = Animated.createAnimatedComponent(Container)\\n\\nconst ButtonText = styled.Text`\\n  font-size: 20px;\\n  font-weight: 600;\\n`\\n\\nfunction mapStateToProps(state) {\\n  return { action: state.action }\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  return {\\n    openModal: () =>\\n      dispatch({\\n        type: 'OPEN_MODAL'\\n      })\\n  }\\n}\\n\\nexport default connect(\\n  mapStateToProps,\\n  mapDispatchToProps\\n)(HomeScreen)\\n\")), mdx(\"p\", null, \"In the above snippet, do take note of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RootView\"), \". We are also converting the good old \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" into an Animated view.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"This completes this tutorial about creating animated custom modal to provide a pleasant user experience in your react native application. You learned how to use the animated library and some of its methods such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spring\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timing\"), \" along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Easing\"), \" module. With the help of redux to manage state, you created a custom modal UI.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://heartbeat.fritz.ai/build-a-custom-modal-with-the-animated-api-in-react-native-abf4b650622\"\n  }), \"Originally published at Heartbeat\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"33be57d9-c8b9-52e4-b9e9-87edb96e9195","prev":{"id":"970b1f57-b3f8-524b-a1da-87b0462e14ca","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In the last few years, GraphQL becomes a popular choice to build an API. It serves a great alternative to the REST APIs approach. Not only it is an open source application-layer query language, in comparison to REST, GraphQL fulfills the approach…","fields":{"title":"Build a Twitter Clone Server with Apollo, GraphQL, Nodejs, and Crowdbotics","slug":"build-a-twitter-clone-server-with-apollo-graphql-nodejs","date":"2019-06-13T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"c0973e72-ca16-59fe-8e34-b66700d29a09","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Firebase is a complete package when it comes to building mobile applications and integrating them with a serverless service. Managed by Google, Firebase includes services like mobile analytics, push notification, crash reporting, and out-of-the-box…","fields":{"title":"Getting Started with Firestore and React Native","slug":"getting-started-with-firestore-and-react-native","date":"2019-06-11T00:00:00.000Z"},"code":{"scope":""}}}}}