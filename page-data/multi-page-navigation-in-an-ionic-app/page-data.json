{"componentChunkName":"component---src-templates-post-js","path":"/multi-page-navigation-in-an-ionic-app","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Multi Page Navigation in an Ionic App","date":"November 19, 2017","author":"Aman Mittal","banner":null,"slug":"multi-page-navigation-in-an-ionic-app","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"multi-page-navigation-in-an-ionic-app\",\n  \"date\": \"2017-11-19T00:00:00.000Z\",\n  \"title\": \"Multi Page Navigation in an Ionic App\",\n  \"categories\": [\"ionic\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/0*XkFYDVAjZ4FnJdng.jpg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Ionic makes it easy to create multiple pages navigation using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NavController\"), \" as the genesis of navigation stack. In this little application, I will try to make the concept clear to you.\"), mdx(\"h3\", null, \"Generate Application and\\xA0Pages\"), mdx(\"p\", null, \"To start with, let\\u2019s create a new Ionic app for this showcase. Follow along with me. To get started, we have to scaffold a new project, my favorite one-to-go Ionic CLI command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"ionic start -a 'Multi Page Navigation' -i app.multipage.nav ionic-multi-page-nav blank\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \" in to the new project created by the above Ionic CLI command and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ionic serve\"), \" to see the blank template with just a homepage available. We will create two new pages in this application to showcase our motive.\"), mdx(\"p\", null, \"To read about the basic Navigation in an Ionic app, see this.\"), mdx(\"p\", null, \"Now, with the help of Ionic CLI, let\\u2019s generate two new pages before diving into our code base.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"$ ionic g page page1\\n$ ionic g page page2\\n\")), mdx(\"p\", null, \"I am naming the two new pages generic but you can name them anything you want. Just follow the convention when importing the modules. Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/pages\"), \" you can see, there are two new folders with the names we generated. Each have its own\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".ts\"), \",\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".html\"), \" and\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".scss\"), \" file, thus, completing a web component on which every Ionic and Angular apps are based on.\"), mdx(\"p\", null, \"To proceed, we need to add both the pages in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.module.ts\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { BrowserModule } from '@angular/platform-browser'\\nimport { ErrorHandler, NgModule } from '@angular/core'\\nimport { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular'\\nimport { SplashScreen } from '@ionic-native/splash-screen'\\nimport { StatusBar } from '@ionic-native/status-bar'\\n\\nimport { MyApp } from './app.component'\\nimport { HomePage } from '../pages/home/home'\\n\\n// new pages to be added in declarations and entryComponents\\nimport { Page1Page } from '../pages/page1/page1'\\nimport { Page2Page } from '../pages/page2/page2'\\n\\n@NgModule({\\n  declarations: [MyApp, HomePage, Page1Page, Page2Page],\\n  imports: [BrowserModule, IonicModule.forRoot(MyApp)],\\n  bootstrap: [IonicApp],\\n  entryComponents: [MyApp, HomePage, Page1Page, Page2Page],\\n  providers: [\\n    StatusBar,\\n    SplashScreen,\\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\\n  ]\\n})\\nexport class AppModule {}\\n\")), mdx(\"h3\", null, \"Setup Home Page for Basic Navigation\"), mdx(\"p\", null, \"As the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.module.ts\"), \" is updated with our changes, the scope of the whole application can now access these two new pages. To implement the navigation between them, we have to first update our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"home.html\"), \" with buttons that will navigate to a specific page and business logic behind those events in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"home.ts\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<ion-header>\\n  <ion-navbar>\\n    <ion-title>Ionic Multi Page App</ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-card>\\n    <ion-card-header>\\n      Home Page\\n    </ion-card-header>\\n    <ion-card-content>\\n      <button ion-button (click)=\\\"goTo('page1')\\\">Page1</button>\\n      <button ion-button color=\\\"secondary\\\" (click)=\\\"goTo('page2')\\\">\\n        Page2\\n      </button>\\n      <button ion-button color=\\\"light\\\" (click)=\\\"back()\\\">Back</button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\")), mdx(\"p\", null, \"Let\\u2019s update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"home.ts\"), \" as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { Component } from '@angular/core'\\nimport { NavController } from 'ionic-angular'\\n\\nimport { Page1Page } from '../page1/page1'\\nimport { Page2Page } from '../page2/page2'\\n\\n@Component({\\n  selector: 'page-home',\\n  templateUrl: 'home.html'\\n})\\nexport class HomePage {\\n  constructor(public navCtrl: NavController) {}\\n\\n  goTo(page) {\\n    if (page === 'page1') {\\n      this.navCtrl.push(Page1Page)\\n    } else if (page === 'page2') {\\n      this.navCtrl.push(Page2Page)\\n    }\\n  }\\n\\n  back() {\\n    if (this.navCtrl.length() >= 2) {\\n      this.navCtrl.pop()\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"goTo()\"), \" function will help us in navigating to the desired page and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"back\"), \" button will bring us to the previous page in the navigation stack. This is important! I mentioned to the previous page, not the home page. If you are familiar with Ionic 1, this would how state will work.\"), mdx(\"h3\", null, \"Updating Page1 and\\xA0Page2\"), mdx(\"p\", null, \"To continue to develop our demo application, we need to update our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Page1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Page2\"), \" components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<!--Page1-->\\n<ion-header>\\n  <ion-navbar>\\n    <ion-title>Ionic Multi Page App</ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-card>\\n    <ion-card-header>\\n      Page 1\\n    </ion-card-header>\\n    <ion-card-content>\\n      <button ion-button color=\\\"secondary\\\" (click)=\\\"goTo('page2')\\\">\\n        Page2\\n      </button>\\n      <button ion-button color=\\\"light\\\" (click)=\\\"back()\\\">Back</button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { Component } from '@angular/core'\\nimport { IonicPage, NavController, NavParams } from 'ionic-angular'\\nimport { Page2Page } from '../page2/page2'\\n\\n@IonicPage()\\n@Component({\\n  selector: 'page-page1',\\n  templateUrl: 'page1.html'\\n})\\nexport class Page1Page {\\n  constructor(public navCtrl: NavController, public navParams: NavParams) {}\\n\\n  goTo(page) {\\n    if (page === 'page2') {\\n      this.navCtrl.push(Page2Page)\\n    }\\n  }\\n\\n  back() {\\n    if (this.navCtrl.length() >= 2) {\\n      this.navCtrl.pop()\\n    }\\n  }\\n\\n  ionViewDidLoad() {\\n    console.log('ionViewDidLoad Page1Page')\\n  }\\n}\\n\")), mdx(\"p\", null, \"Similar for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Page2\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<ion-header>\\n  <ion-navbar>\\n    <ion-title>Ionic Multi Page App</ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-card>\\n    <ion-card-header>\\n      Page 2\\n    </ion-card-header>\\n    <ion-card-content>\\n      <button ion-button (click)=\\\"goTo('page1')\\\">Page1</button>\\n      <button ion-button color=\\\"light\\\" (click)=\\\"back()\\\">Back</button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { Component } from '@angular/core'\\nimport { IonicPage, NavController, NavParams } from 'ionic-angular'\\nimport { Page1Page } from '../page1/page1'\\n\\n@IonicPage()\\n@Component({\\n  selector: 'page-page2',\\n  templateUrl: 'page2.html'\\n})\\nexport class Page2Page {\\n  constructor(public navCtrl: NavController, public navParams: NavParams) {}\\n\\n  goTo(page) {\\n    if (page === 'page1') {\\n      this.navCtrl.push(Page1Page)\\n    }\\n  }\\n\\n  back() {\\n    if (this.navCtrl.length() >= 2) {\\n      this.navCtrl.pop()\\n    }\\n  }\\n\\n  ionViewDidLoad() {\\n    console.log('ionViewDidLoad Page2Page')\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Running the\\xA0App\"), mdx(\"p\", null, \"If we save all the files and again from the terminal run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"$ ionic serve\\n\\n# OR\\n\\n$ ionic serve --lab\\n\")), mdx(\"p\", null, \"The output shown can be best described in these screenshots:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/0*sMnNW4P3ONmaUZCP.png\",\n    \"alt\": null\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/0*iPNMEzroixe-Dmlj.png\",\n    \"alt\": null\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/0*7oSIkMCTVC0JOaQ5.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"This is just a glimpse of how multi page navigation in Ionic might work that might help you to get started with development.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To get the full code, you can visit\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/ionic-multi-page-nav\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"this Github Repository\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/multi-page-navigation-in-an-ionic-app-8b008f616cdb\"\n  }), \"Originally Published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8d14740e-8ded-5c12-ad86-b02e3c7e5ced","prev":{"id":"f19bfc6f-1c04-52b3-b637-3ba2eacc772e","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In this article, I am going to offer you some tips for writing REST APIs in Nodejs for a production level application. Writing RESTful APIs with Nodejs is one of the most popular use case using the JavaScript server side platform. Use HTTP Methods…","fields":{"title":"Tips for Creating Nodejs REST APIs","slug":"tips-for-creating-node-js-rest-apis","date":"2017-11-22T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"3dfedd39-291d-591f-bed9-982dcaa0101f","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Note : This is article is written for demonstration purposes. Not ready for 🚀. When learning React a developer can feel blessed with so many boilerplate/starter-kits out there such that they let the learner focus on more on the fundamentals of React…","fields":{"title":"How to Setup a React App from Scratch?","slug":"how-to-setup-a-react-app-from-scratch","date":"2017-11-16T00:00:00.000Z"},"code":{"scope":""}}}}}