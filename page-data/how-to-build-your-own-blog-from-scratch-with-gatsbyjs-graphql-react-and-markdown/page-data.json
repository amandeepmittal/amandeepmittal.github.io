{"componentChunkName":"component---src-templates-post-js","path":"/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How To Build A Blog From Scratch With React, Markdown, GraphQL and GatsbyJS","date":"November 21, 2018","author":"Aman Mittal","banner":null,"slug":"how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown\",\n  \"date\": \"2018-11-21T00:00:00.000Z\",\n  \"title\": \"How To Build A Blog From Scratch With React, Markdown, GraphQL and GatsbyJS\",\n  \"categories\": [\"gatsbyjs\"],\n  \"description\": \"Whether it’s to customize, monetize, add security, or just learn, today, I’ll show you how to code your own blog from scratch.\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*nNoxN0YEs7eI9DrRy1_zdw.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"There are lots of quick and easy, no-code ways to get blog up and running\\u200A\\u2014\\u200Asuch as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/should-you-use-medium-as-your-business-blog-platform-2019-update/\"\n  }), \"Medium\"), \" or Wordpress\\u200A\\u2014\\u200Abut, whether it\\u2019s to customize, monetize, add security, or just learn, today, I\\u2019ll show you how to code your own blog from scratch.\"), mdx(\"p\", null, \"When adding a blog to your existing website, or just starting out with a new blog, a static site generator can help you get started.\"), mdx(\"p\", null, \"Static site generators such as GatsbyJS are primarily used to serve fixed content, but they can also be used for pretty much any web application, including blog and e-commerce web applications.\"), mdx(\"p\", null, \"In this post, we are going to create a blog from scratch using GatsbyJS with ReactJS and GraphQL at its core.\"), mdx(\"h3\", null, \"What is GatsbyJS?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/how-it-works/\"\n  }), \"Gatsby\"), \" is a simple, robust, and fast static site generator. It uses ReactJS to render static content on the web. The content in a Gatsby app is written in the same way as any other React app: through components. These components are rendered at build time to the DOM as static HTML, CSS, and JavaScript.\"), mdx(\"p\", null, \"At a high level, Gatsby uses various source plugins to read data and make it available via a GraphQL interface. You write GraphQL queries to load this data and render React components. GraphQL can render content that is sourced from a large number of formats and sources such as Markdown, CSV, and CMS like Wordpress, Drupal, GraphCMS, and so on.\"), mdx(\"h3\", null, \"Why use\\xA0Gatsby?\"), mdx(\"p\", null, \"Gatsby takes care of a lot behind the scenes.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Future proof \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://jamstack.org/\"\n  }), \"JAMstack\"), \" websites\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gatsby has a rich plugin ecosystem that is easily extensible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pre-configured Webpack based build system (no need to break your head)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/learn-to-build-a-simple-progressive-web-app-pwa-with-angular-and-lighthouse-hacker-news-clone/\"\n  }), \"PWA (\", mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Progressive Web App\"), \")\"), \" by default\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optimized for speed. Gatsby loads only critical parts so that your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so that clicking on the site feels incredibly fast\")), mdx(\"p\", null, \"Gatsby also has an ever-growing data plugin ecosystem, especially for data transformation. Overall, I think the points above should be enough to lure you into trying it out.\"), mdx(\"h3\", null, \"Pre-requisites\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Familiarity with HTML, JavaScript, ReactJS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yarn\"), \" installed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gatsby CLI (which we are going to install in next section)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" At the time of writing this tutorial, Gatsby \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v2\"), \" was officially launched.\"), mdx(\"h3\", null, \"Getting Started with\\xA0Gatsby\"), mdx(\"p\", null, \"To start, we need to install the command line utility provided by GatsbyJS to quickly scaffold projects. Open your terminal and type the following command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -g gatsby-cli\\n\")), mdx(\"p\", null, \"To verify that it has been installed, run the following command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# Check the version\\ngatsby -v\\n\\n# you will get a similar output\\n2.4.5\\n\")), mdx(\"p\", null, \"Once you successfully installed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-cli\"), \", it is time to generate a new project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"gatsby new gatsby-blog-starter\\n\")), mdx(\"p\", null, \"This process will take a minute or two and, at the end of it, you will have a new directory. Traverse inside it. Gatsby\\u2019s default project structure looks like this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Y2MEtJVZ4BmnmALDO-D1lw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"To see what we get by default, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \". This will run the project without creating the official build directory on a development server through webpack (used by Gatsby internally). After the command runs successfully, you will be prompted by the following screen like below in your terminal.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*CC6dYalWGIY2d0DQ1Gg5yw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"You can visit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000\"), \" to see the default site in action.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/1*1Ow9OKXVy8-T1x_bGiTjRg.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Running a GraphQL\\xA0Query\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*L8BlmC_0Xx_B75e7Lv4osQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Every Gatsby project contains at least these files. You might be familiar with some of these such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \"and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public\"), \" directory, which is served when deployed. It also contains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \", which contains the metadata of any modern Javascript application.\"), mdx(\"p\", null, \"Our main object of focus are in the directory \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" and files such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \".These contain the metadata and other essential information about our current application. Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/\"), \" there are two sub-directories: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/\"), \" contain further two files: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout.css\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout.js\"), \". These serve as the starting point of our application.\"), mdx(\"p\", null, \"You have already seen what the default page that comes with Gatsby looks like. We have a title in the navigation bar. Let\\u2019s add a subtitle. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" and a new field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" and change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" like below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"siteMetadata: {\\n    title: 'Gatsby Blog',\\n    description: 'This is my personal blog.'\\n  },\\n\")), mdx(\"p\", null, \"Gatsby allows us to query metadata fields described in this file as a GraphQL query. In order to take a look at what kind of stuff we can query from Gatsby, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby develop\"), \" from the terminal. You will not see any changes at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/\"), \" yet because we haven't modified the component responsible for that. However, we can verify by running a simple GraphQL query. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/___graphql\"), \" in the browser.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/1*0F7_m7zpVpipIjc1qU9SMw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We\\u2019ve got the GraphQL browser open and over on the side here, we can see the documentation explorer, which lets us go through our schema and look at what kind of stuff we can query for. Click on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" type on the right hand side to see what query fields we can access.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*JsaxRxF-uWp4CCotFWBrMQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"This gives us a list of all of the query types that we can look for. Take a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"site\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"siteMetadata\"), \". You can start typing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s\"), \", and you will see an autocomplete for the query type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"site\"), \". This is really helpful. Run the below query.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/1*zt1jv_nlaWMFNPgmZTSGYw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Great!\"), mdx(\"p\", null, \"Now that you are familiar with the nitty-gritty of Gatsby and how it works, in the next section, we will start working on the blog.\"), mdx(\"h3\", null, \"Writing our first Markdown blog\\xA0post\"), mdx(\"p\", null, \"Gatsby makes use of various plugins for building static sites. In this section, we are going to install and configure in order to make use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-source-filesystem\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \" to work with locally stored Markdown files. Open your terminal and type.\"), mdx(\"p\", null, \"I am using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" because Gatsby uses it by default over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" as the package manager. Once both of these dependencies are installed, configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" file like below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"plugins: [\\n  'gatsby-transformer-remark',\\n  {\\n    resolve: `gatsby-source-filesystem`,\\n    options: {\\n      name: `pages`,\\n      path: `${__dirname}/src/pages/`\\n    }\\n  }\\n]\\n\")), mdx(\"p\", null, \"The rest of the plugins remain same. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \" is used parse Markdown files in\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \" format into HTML. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-source-filesystem\"), \" helps us with reading those markdown files from the disk. Each post in our blog is going to be in markdown format.\"), mdx(\"p\", null, \"To understand it better, let us add some posts. Traverse to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages\"), \" directory and then add one or two posts in a year, month, and date format with a slug like below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*kVIkKPBAX029E6DmXYUScQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Each markdown file is supposed to have some frontmatter fields that are used to create and update our posts. Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2018-11-14-hello-world.md\"), \" and the following content.\"), mdx(\"p\", null, \"Similarly you can add the content to the second post.\"), mdx(\"p\", null, \"The content of these two Markdown files will be our first two blog posts. The block surrounded in dashes is referred to as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \", and the contents of the block can be used to inject React components with the specified data, e.g. path, date, title, tags etc.\"), mdx(\"p\", null, \"One important note is that path will be used when we dynamically create our pages to specify the URL to each blog to render the file. We\\u2019ll do this later.\"), mdx(\"h3\", null, \"Creating the Blog\\xA0Template\"), mdx(\"p\", null, \"If you take a look at your blog in a browser, you will see that Gatsby is not yet displaying any blog posts that you have created. This is because Gatsby still does not know where these blog posts are or that you even want them to be displayed in the browser. However, if you try to query it in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphiQL\"), \" browser tab, you can see that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" data of blog post is available.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/1*f2k6uRd0tZ31BIWJbXHRqg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Each Markdown file is parsed into a node of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarkdownRemark\"), \". To query all markdown files in on query, we are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allMarkdownRemark\"), \". All \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" fields are converted into GraphQL fields.\"), mdx(\"p\", null, \"To display each post let us create a new template that will be consistent in style and getting \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" from GraphQL query we have just seen. Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory, create a new folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"templates\"), \" and inside it, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogPost.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { graphql } from 'gatsby'\\n\\nconst Template = ({ data }) => {\\n  const title = data.markdownRemark.frontmatter.title\\n  const date = data.markdownRemark.frontmatter.date\\n  const html = data.markdownRemark.html\\n\\n  return (\\n    <div>\\n      <h1>{title}</h1>\\n      <div className=\\\"blogpost\\\" dangerouslySetInnerHTML={{ __html: html }} />\\n    </div>\\n  )\\n}\\n\\nexport const postQuery = graphql`\\n  query($pathSlug: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\\n      html\\n      frontmatter {\\n        title\\n        date(formatString: \\\"MMMM, DD, YYYY\\\")\\n        path\\n        tags\\n        excerpt\\n      }\\n    }\\n  }\\n`\\n\\nexport default Template\\n\")), mdx(\"p\", null, \"In this component, notice the new query \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"postQuery\"), \" we are creating. This query will help us to display our blog posts into the template. This query puts all the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" we require in order to display blog post in the component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Template\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const title = props.data.markdownRemark.frontmatter.title\\nconst html = props.data.markdownRemark.html\\n\")), mdx(\"p\", null, \"In above, I am fetching the title for each post and the HTML content. While rendering the output we get from the query, I am using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dangerouslySetInnerHTML\"), \" which is a React\\u2019s replacement for using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"innerHTML\"), \" in the browser DOM. In general, setting HTML from code is risky because it exposes a user to a cross-site scripting (XSS) attack if used with sensitive data. Since we do not have any users (no login/signup system), I am just using it for content that is rendered as HTML from markdown.\"), mdx(\"p\", null, \"We now have a template of how our blog post will look but we still haven\\u2019t configured a way to render and convert a blog post into HTML. That\\u2019s next. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" in the root of your project and add the following code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const path = require('path')\\n\\nexports.createPages = ({ graphql, actions }) => {\\n  const { createPage } = actions\\n\\n  return new Promise((resolve, reject) => {\\n    const blogPostTemplate = path.resolve('src/templates/blogPost.js')\\n    // Query for markdown nodes to use in creating pages.\\n    resolve(\\n      graphql(\\n        `\\n          query {\\n            allMarkdownRemark(\\n              sort: { order: ASC, fields: [frontmatter___date] }\\n            ) {\\n              edges {\\n                node {\\n                  frontmatter {\\n                    path\\n                    title\\n                    tags\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        `\\n      ).then(result => {\\n        const posts = result.data.allMarkdownRemark.edges\\n\\n        posts.forEach(({ node }) => {\\n          const path = node.frontmatter.path\\n          createPage({\\n            path,\\n            component: blogPostTemplate,\\n            context: {\\n              pathSlug: path\\n            }\\n          })\\n          resolve()\\n        })\\n      })\\n    )\\n  })\\n}\\n\")), mdx(\"p\", null, \"We start by requiring Node\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" in order to fetch the blog post template. Notice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \" along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" as parameters when we are exporting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPages\"), \". Gatsby uses Redux internally to manage state. That's where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \" come from. The object \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \" contain the functions and these can be individually extracted by using ES6 object de-structuring. It has pre-defined functions such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPage\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createRedirect\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setWebpackConfig\"), \" and so on. You can find all of them \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/actions/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"here\")), \".\"), mdx(\"p\", null, \"We then make use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPage\"), \" programmatically. There are \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/creating-and-modifying-pages/\"\n  }), \"two other ways other\"), \" than the approach we are implementing. In our case, we need to read Markdown files.\"), mdx(\"p\", null, \"Since our home page is still not done to display a list of blog posts you will have to visit each URL listed below in order to see the blog posts in action.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For the first post, visit: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[http://localhost:8000/first-post](http://localhost:8000/first-post)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For the second post, visit: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[http://localhost:8000/second-post](http://localhost:8000/second-post)\"))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*FfBpJzPlwG8h5-3CvR8mJQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Try to modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Template\"), \" component and other fields from the frontmatter. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/blogPost.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Template = ({ data }) => {\\n  const title = data.markdownRemark.frontmatter.title\\n  const date = data.markdownRemark.frontmatter.date\\n  const html = data.markdownRemark.html\\n  return (\\n    <div>\\n      <h1>{title}</h1>\\n      <div>\\n        <em>{date}</em>\\n      </div>\\n      <br />\\n      <div className=\\\"blogpost\\\" dangerouslySetInnerHTML={{ __html: html }} />\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, \"To represent the changes, I have added the date in italics just before the content of the blog post and after the title. Visit any post\\u2019s URL and see it in action.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*cmFx6s6ZsVpGNHoI8wSMLQ.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Adding Previous and Next Blog Post\\xA0Links\"), mdx(\"p\", null, \"For this feature to work with our blog, we are going to make use Gatsby \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" component. It is a wrapper around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@reach/router\"), \"\\u2019s Link component that adds enhancements specific to Gatsby and you can even use props such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activeStyle\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activeClassName\"), \" to add styling attributes to the rendered element when it matches the current URL. Just like how a normal routing component in React behaves. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogPost.js\"), \" file and add this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { graphql, Link } from 'gatsby'\\n\\nconst Template = ({ data, pathContext }) => {\\n  const title = data.markdownRemark.frontmatter.title\\n  const date = data.markdownRemark.frontmatter.date\\n  const html = data.markdownRemark.html\\n  const { next, prev } = pathContext\\n\\n  return (\\n    <div>\\n      <h1>{title}</h1>\\n      <div>\\n        <em>{date}</em>\\n      </div>\\n      <br />\\n      <div className=\\\"blogpost\\\" dangerouslySetInnerHTML={{ __html: html }} />\\n      <p>\\n        {prev && (\\n          <Link to={prev.frontmatter.path}>\\n            {prev.frontmatter.title}{' '}\\n            <span role=\\\"img\\\" aria-label=\\\"point-left\\\">\\n              \\uD83D\\uDC48{' '}\\n            </span>\\n            Previous\\n          </Link>\\n        )}\\n      </p>\\n      <p>\\n        {next && (\\n          <Link to={next.frontmatter.path}>\\n            Next{' '}\\n            <span role=\\\"img\\\" aria-label=\\\"point-right\\\">\\n              \\uD83D\\uDC49\\n            </span>\\n            {next.frontmatter.title}\\n          </Link>\\n        )}\\n      </p>\\n    </div>\\n  )\\n}\\n\\n// rest of the code remain sames\\n\")), mdx(\"p\", null, \"Notice how I am using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \" tags with attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role\"), \" to wrap emojis along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" attribute. It is considered as good practice in Gatsby, React and you will definitely avoid any linting errors. Now to make the above code work, we need to modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"posts.forEach(({ node }, index) => {\\n  const path = node.frontmatter.path\\n  createPage({\\n    path,\\n    component: blogPostTemplate,\\n    context: {\\n      pathSlug: path,\\n      prev: index === 0 ? null : posts[index - 1].node,\\n      next: index === posts.length - 1 ? null : posts[index + 1].node\\n    }\\n  })\\n  resolve()\\n})\\n\")), mdx(\"p\", null, \"The context object now contains two keys called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prev\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next\"), \". We are also using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index\"), \" value of each post. If the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index === 0\"), \", there is not going to be any previous post since it is the first one. You cannot go to a previous post here. We are then using these new context properties in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blogPost.js\"), \" using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pathContext\"), \".\"), mdx(\"p\", null, \"Visit the first post and you will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*43qrMpLgEskYZzuZ2cFOQA.gif\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Display all posts on\\xA0Homepage\"), mdx(\"p\", null, \"Since all of our markdown posts are getting rendered into HTML correctly, the next and previous post feature working too. So let us move ahead and display all the blog posts on the home page. Not the complete posts, but a link to each one.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { graphql, Link } from 'gatsby'\\n\\nimport Layout from '../components/layout'\\n\\nconst IndexPage = ({ data }) => {\\n  const { edges } = data.allMarkdownRemark\\n\\n  return (\\n    <Layout>\\n      <div>\\n        {edges.map(edge => {\\n          const { frontmatter } = edge.node\\n          return (\\n            <div key={frontmatter.path}>\\n              <Link to={frontmatter.path}>{frontmatter.title}</Link>\\n              &nbsp;\\n              <small>\\n                {' '}\\n                <em>published on</em> {frontmatter.date}\\n              </small>\\n              <p>{frontmatter.excerpt}</p>\\n              <br />\\n            </div>\\n          )\\n        })}\\n      </div>\\n    </Layout>\\n  )\\n}\\n\\nexport const query = graphql`\\n  query HomePageQuery {\\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMMM DD, YYYY\\\")\\n            path\\n            tags\\n            excerpt\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n\\nexport default IndexPage\\n\")), mdx(\"p\", null, \"On visiting the Home page URL: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000/\"), \" you will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Ei7BmnjIcRvG0JmhGwVDZw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"We now have a functioning blog!\"), mdx(\"p\", null, \"I challenge you to expand your own blog further by adding comments or tags functionalities. Gatsby has a lot to offer. You learn more about Gatsby at their \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/\"\n  }), \"official documentation\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The complete code for the tutorial at \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/gatsby-blog-starter\"\n  }), \"this Github repository\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/crowdbotics/how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown-78352c367bd1\"\n  }), \"Originally published at Crowdbotics\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"90fbac71-ea78-5b17-acf8-2810f97c6ee7","prev":{"id":"ee66339e-ea91-599c-95fa-b076ee1b4596","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Integrating Firebase with React Native Firebase is a Backend as a Service ( BaaS ) that provides an advantage to mobile developers who use React Native for developing mobile applications. As a React Native developer, by using Firebase you can start…","fields":{"title":"Integrating Firebase with React Native","slug":"integrating-firebase-with-react-native","date":"2018-12-05T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"c4ffd878-6396-5131-82f0-71b436f6fc01","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"It can sometime be overwhelming to build a full-stack web application using a stack like MERN. Setting up the the back end and connecting it with a client-side library like React to fetch and display data is just the beginning. One you have the data…","fields":{"title":"Building an authenticated MERN Stack App Using Material UI","slug":"building-a-mern-stack-app-with-material-ui","date":"2018-11-16T00:00:00.000Z"},"code":{"scope":""}}}}}