{"componentChunkName":"component---src-templates-post-js","path":"/how-to-use-eslint-in-node-js-applications","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to use ESLint in Node.js Applications?","date":"April 28, 2017","author":"Aman Mittal","banner":null,"slug":"how-to-use-eslint-in-node-js-applications","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-use-eslint-in-node-js-applications\",\n  \"date\": \"2017-04-28T00:00:00.000Z\",\n  \"title\": \"How to use ESLint in Node.js Applications?\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/0*Ktrwh00dFMh7e_ma.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn\\u2019t suggest that you cannot use them.\"), mdx(\"p\", null, \"ESLint is designed to have all rules completely pluggable. That\\u2019s one of the primary reasons it came into existence. It allows developers to create their own linting rules. Every rule provided in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://eslint.org/docs/user-guide\"\n  }), \"ESLint official guide\"), \" is standalone rule and a developer at any point can decide whether to use a specific rule or not.\"), mdx(\"h3\", null, \"Installing\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note\"), \": You must have Node.js installed in order to access ESLint via it\\u2019s package manager \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \".\"), mdx(\"p\", null, \"For local installation to a project directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install eslint --save-dev\\n\")), mdx(\"p\", null, \"For a global installation in your working system:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install eslint -g\\n\")), mdx(\"p\", null, \"ESLint will now be available via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eslint\"), \" command in your terminal.\"), mdx(\"h3\", null, \"Configuration\"), mdx(\"p\", null, \"Easiest way to configure it to setup a\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" JSON file where are all the linting rules can be described.\"), mdx(\"p\", null, \"An example of\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"env\\\": {\\n    \\\"node\\\": 1,\\n    \\\"browser\\\": 1\\n  },\\n  \\\"globals\\\": {\\n    \\\"exampleGlobalVariable\\\": true\\n  },\\n  \\\"rules\\\": {\\n    \\\"eqeqeq\\\": 1\\n  },\\n  \\\"plugins\\\": []\\n}\\n\")), mdx(\"p\", null, \"If you installed eslint globally, you can also generate config file using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"eslint --init\\n\")), mdx(\"p\", null, \"Other case, if you have installed it locally to a project, you will need to type in your terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"./node_modules/.bin/eslint --init\\n\")), mdx(\"p\", null, \"In both cases, you will be prompted with set of basic questions to generate\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" file.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/0*RMPR1vjmB6jsHtHw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"An example of file generated after above prompt:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"env\\\": {\\n    \\\"browser\\\": true,\\n    \\\"commonjs\\\": true\\n  },\\n  \\\"extends\\\": \\\"eslint:recommended\\\",\\n  \\\"rules\\\": {\\n    \\\"indent\\\": [\\\"error\\\", \\\"tab\\\"],\\n    \\\"linebreak-style\\\": [\\\"error\\\", \\\"unix\\\"],\\n    \\\"quotes\\\": [\\\"error\\\", \\\"single\\\"],\\n    \\\"semi\\\": [\\\"error\\\", \\\"never\\\"]\\n  }\\n}\\n\")), mdx(\"p\", null, \"For detailed information on Configuration, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://eslint.org/docs/user-guide/configuring\"\n  }), \"read here\"), \".\"), mdx(\"h3\", null, \"Rules\"), mdx(\"p\", null, \"Rules in ESLint are added individually. No rules are enforced by default. You have to specify rules explicitly, then only it will be enabled for the linting process.\"), mdx(\"p\", null, \"You can find a complete list of rules in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://eslint.org/docs/rules/\"\n  }), \"official documentation here\")), mdx(\"p\", null, \"After deciding which rules to include, you have to set there error levels. Each error level can be defined as following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" - Turn the rule off\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \" - Turn the rule on as a warning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2\"), \" - Turn the rule on as an error\")), mdx(\"p\", null, \"The difference between an error and a warning is the exit code that eslint will have when it finishes. If any errors are found, eslint will exit with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" exit code, otherwise it will exit with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \". If you are linting within a build step this allows you to control which rules should \\\"break your build\\\" and which ones should be considered as warnings.\"), mdx(\"p\", null, \"Learn how to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://eslint.org/docs/user-guide/configuring#configuring-rules\"\n  }), \"configure rules in detail here\"), \".\"), mdx(\"h3\", null, \"Environments\"), mdx(\"p\", null, \"The code you are writing might be suitable for a particular environment such as, you might be writing a REST API in Node.js application using Express Framework (Sinatra) and the frontend of that application is going to be built in AngularJS. Two different projects, two different environments and both can have separate eslint configurations in one file even though the client and the server are under one project directory that is been considered as root of your project.\"), mdx(\"p\", null, \"How is it done? By setting the environment id to true in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"env\\\"\"), \" section of\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \".\"), mdx(\"h3\", null, \"Linting\"), mdx(\"p\", null, \"ESLint comes with a command line interface (CLI) to lint your files or directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"eslint file.js\\neslint dir/\\n\")), mdx(\"p\", null, \"The output generated will be grouped by file, and will specify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"line:column\"), \" number, warning/error, reason for the error, and the name of the rule for each failure.\"), mdx(\"h3\", null, \"Use ESLint with your preferred Coding\\xA0Style\"), mdx(\"p\", null, \"ESLint personally does not promote any coding style. You can setup\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" file to enforce coding style using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://eslint.org/docs/rules/#stylistic-issues\"\n  }), \"style rules\"), \" that you like.\"), mdx(\"p\", null, \"You can also use ESLint with Style guides such as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://standardjs.com/\"\n  }), \"JavaScript Standard Style\"), \". You have to use extra plugin for that. The full guide can be found here (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/feross/eslint-config-standard\"\n  }), \"https://github.com/feross/eslint-config-standard\"), \").\"), mdx(\"p\", null, \"To add a plugin to\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \":\"), mdx(\"p\", null, \"Some plugins for popular libraries: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/eslint-plugin-angular\"\n  }), \"Angular\"), \" | \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/eslint-plugin-react\"\n  }), \"React\")), mdx(\"p\", null, \"Another plugin, I find very useful is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/eslint-plugin-one-variable-per-var\"\n  }), \"one variable per var\"), \" just to maintain code consistency over a large/open-source project.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/how-to-use-eslint-in-node-js-applications-cc4b2298ce55\"\n  }), \"Originally Published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f85f2c84-c83d-5973-855c-8b276fbb05e5","prev":{"id":"061fca42-f9c6-5ee9-82ce-64d87abfa244","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Introduction to ORM ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and…","fields":{"title":"Getting Started with Sequelize for Nodejs Applications","slug":"getting-started-with-sequelize-for-nodejs","date":"2017-05-30T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"46fea183-d457-569d-aa4b-2f3e90d24743","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"When we start to build an application, we generally do not want to worry much about data. To create a database and fill it with sample data seems much of a hassle to me personally. I rather focus more on creating RESTful API and front end of the…","fields":{"title":"How to Mock Data for Node.js Applications using faker.js","slug":"how-to-mock-data-for-nodejs-applications-using-fakerjs","date":"2017-04-01T00:00:00.000Z"},"code":{"scope":""}}}}}