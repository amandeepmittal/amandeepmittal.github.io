{"componentChunkName":"component---src-templates-post-js","path":"/google-sheets-nodejs","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Visualize Google Sheets Data in a NodeJS App","date":"July 22, 2019","author":"Aman Mittal","banner":null,"slug":"google-sheets-nodejs","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"google-sheets-nodejs\",\n  \"date\": \"2019-07-22T00:00:00.000Z\",\n  \"title\": \"Visualize Google Sheets Data in a NodeJS App\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/07/google-sheets-crowdbotics.jpg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Google Spreadsheets and Nodejs might sound a strange combination, but the server side platform can be a great way to utilize the Google Drive API. In this tutorial, you are going to learn how to build a connect the two leveraging a Crowdbotics app.\"), mdx(\"h2\", null, \"Table of Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Requirements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting up the project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a spreadsheet with data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building the Server\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating Charts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conclusion\")), mdx(\"h2\", null, \"Requiremnets\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"v8.x.x\"), \" or higher installed along with npm/yarn as the package manager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Crowdbotics App builder Platform account (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"preferably log in with your valid Github ID\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Google ID to create a Spreadsheet with dummy data on Google Drive\")), mdx(\"h2\", null, \"Setting up the project\"), mdx(\"p\", null, \"To setup, a new project on Crowdbotics app builder platform, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.crowdbotics.com/app-builder-signup?utm_campaign=blog&utm_content=blog-nav\"\n  }), \"visit this link\"), \" and create a new account. Once you have an individual account, access the app building platform with those credentials, and the dashboard screen will welcome you like below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss1-2.png\",\n    \"alt\": \"ss1\"\n  }))), mdx(\"p\", null, \"In the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Others\"), \" section, as shown above, select the template \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Others\"), \", fill in the project name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"googlesheets-nodejs\"), \" and click on the button \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Create App\"), \". This template lets you create a new project that can be highly customizable and useful if you are looking to build something of your own from scratch. Once the Github repository generates, you will be able to either download or clone that Github repository to your local development environment.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss2-2.png\",\n    \"alt\": \"ss2\"\n  }))), mdx(\"p\", null, \"Clone the following Github repo in your local development environment.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss3-2.png\",\n    \"alt\": \"ss3\"\n  }))), mdx(\"p\", null, \"After you have cloned the repository, execute the commands below in the order, they are specified but first, navigate inside the project directory from the terminal window.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# initialize a node project with a package.json file\\nnpm init --yes\\n\\n# create new files\\ntouch index.js .env .gitignore\\n\\n# install required dependencies\\nnpm install --save express google-spreadsheets dotenv\\n\")), mdx(\"p\", null, \"The first command in the above snippet lets you initialize your project with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file. The second is to create essential project files that are required to build this application. Lastly, some dependencies to run the server and connect the Google Drive API.\"), mdx(\"h2\", null, \"Create a spreadsheet with data\"), mdx(\"p\", null, \"In this section, we are going to create a new spreadsheet with some mock data to display later. Open \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://drive.google.com\"\n  }), \"drive.google.com\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss13.png\",\n    \"alt\": \"ss13\"\n  }))), mdx(\"p\", null, \"From the sidebar menu, click on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Google Sheets\"), \" and click to create a new spreadsheet with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"blank template\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss14.png\",\n    \"alt\": \"ss14\"\n  }))), mdx(\"p\", null, \"Add the following data or your mock data to display.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss15.png\",\n    \"alt\": \"ss15\"\n  }))), mdx(\"p\", null, \"The first two columns in the spreadsheet are not the data we are going to display later. They only contain meta information. The chart type values are valid Google Charts values.\"), mdx(\"p\", null, \"To read data from this spreadsheet in the Nodejs app, click the button \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Share\"), \" from the top right side and click on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Get shareable link\"), \" from the modal screen.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss16.png\",\n    \"alt\": \"ss16\"\n  }))), mdx(\"p\", null, \"This shareable link will give an URL that you can share with anyone, for them to view the spreadsheet. From this link, we are going to get them.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"https://docs.google.com/spreadsheets/d/XXXX/edit?usp=sharing\\n\")), mdx(\"p\", null, \"The real value in place of these Xs is going to be the spreadsheet key that is required to read the data. Paste this value in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-env\"\n  }), \"SPREADSHEET_KEY=XXXX\\n\")), mdx(\"h2\", null, \"Building the Server\"), mdx(\"p\", null, \"In this section, by requiring dependencies needed, we are going to build a server endpoint that is going to serve the HTML web page to view the data visualization coming from the Google Spreadsheet we just created in the previous section.\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file and start by requiring dependencies like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google-spreadhseets\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotenv\"), \". Make sure you create an instance of Express app after you have needed environmental variables.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const express = require('express')\\nconst GoogleSpreadsheets = require('google-spreadsheets')\\n\\nrequire('dotenv').config()\\n\\nconst app = express()\\nconst port = 8000\\n\\n// declare variable for charts\\nlet charts\\n\\n// bootstrap server\\napp.listen(port, () => {\\n  console.log(`App is running on port ${port}.`)\\n})\\n\")), mdx(\"p\", null, \"To load a spreadsheet from the API, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google-spreadsheets\"), \" has a method that requires the spreadsheet key we saved as the environment variable. This method also takes callback function and returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spreadsheet\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"GoogleSpreadsheets(\\n  {\\n    key: process.env.SPREADSHEET_KEY\\n  },\\n  (err, spreadsheet) => {}\\n)\\n\")), mdx(\"p\", null, \"Using this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spreadsheet\"), \" object, you are going to access the single or the first worksheet. Then, to calculate the number of rows and columns to fetch the data from, grab the value from cells. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cells()\"), \" method helps you to load a specific group of cells. You have to specify a range of rows and columns to retrieve these cells.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"GoogleSpreadsheets(\\n  {\\n    key: process.env.SPREADSHEET_KEY\\n  },\\n  (err, spreadsheet) => {\\n    spreadsheet.worksheets[0].cells(\\n      {\\n        range: 'R1C1:R9C06'\\n      },\\n      (err, result) => {\\n        charts = result.cells\\n      }\\n    )\\n  }\\n)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cells()\"), \" method accepts a callback to fetch all the required cells. Store these cells inside the variable we declared earlier called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"charts\"), \".\"), mdx(\"p\", null, \"The snippet of code is going to serve the public folder and its contents, which we are going to create in the next section.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"app.use(express.static('public'))\\n\\napp.get('/', (req, res) => {\\n  res.sendFile(__dirname + '/views/index.html')\\n})\\n\\napp.get('/charts', (req, res) => {\\n  res.send(charts)\\n})\\n\")), mdx(\"p\", null, \"The endpoint \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/charts\"), \" is going to serve the data incoming from the spreadsheet to the client.\"), mdx(\"h2\", null, \"Creating Charts\"), mdx(\"p\", null, \"To create charts and keep thing simple, we are going to use jQuery. On the client side, the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$.get()\"), \" is going to load the data from the server. The server endpoint \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/charts\"), \" is serving the data the client side requires. We are also going to make use of a jQuery plugin known as Gridster.\"), mdx(\"p\", null, \"This plugin will enable to use of drag-and-drop column approach by allowing our client to behave like a draggable layout. The gridster plugin does allow to specify the space between each chart. For now, let us set this to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5px\"), \". The property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"widget_margins\"), \" is used for this purpose. It takes the combination of width and height values. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"widget_base_dimensions\"), \" is to specify the width and height of the draggable grid.\"), mdx(\"p\", null, \"Create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/client.js\"), \" and add the following snippet.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"$(function() {\\n  $.get('/charts', function(charts) {\\n    var dataStr = ''\\n    var imgStr = ''\\n    var gridster = $('section#charts')\\n      .gridster({\\n        widget_margins: [5, 5],\\n        widget_base_dimensions: [255, 155]\\n      })\\n      .data('gridster')\\n    var carray = $.map(charts, function(value, index) {\\n      return [value]\\n    })\\n    for (var i = 1; i < carray.length; i++) {\\n      var rarray = $.map(carray[i], function(value, index) {\\n        return [value]\\n      })\\n      for (var j = 2; j < rarray.length; j++) {\\n        dataStr += rarray[j].value\\n        if (rarray[j + 1]) dataStr += ','\\n      }\\n\\n      imgStr =\\n        '<img src=\\\"//chart.googleapis.com/chart?cht=' +\\n        rarray[0].value +\\n        '&chtt=' +\\n        rarray[1].value +\\n        '&chs=250x150&chd=t:' +\\n        dataStr +\\n        '&chxt=x,y&chxs=0,c0c0c0,10,0,lt|1,c0c0c0,10,1,lt&chco=000000\\\" />'\\n\\n      gridster.add_widget(\\n        '<span id=\\\"chart' + i + '\\\">' + imgStr + '</span>',\\n        1,\\n        1\\n      )\\n      dataStr = ''\\n    }\\n  })\\n})\\n\")), mdx(\"p\", null, \"The data coming from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/charts\"), \" endpoint from the server is processed inside a loop. This loop runs over each row. Next, looping through each column in the above snippet, we have to skip column 1 and column 2 since they contain meta information about the spreadsheet itself.\"), mdx(\"p\", null, \"In order to display charts, we are using to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.google.com/chart/\"\n  }), \"Google Charts\"), \", which is a free API. This API will help us to visualize the data incoming from the Google spreadsheet. This API allows creating a chart image with just values in a URL. This image can be treated like a normal image. In the above snippet, we are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<img />\"), \" tag for this.\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"views/index.html\"), \" file and add the following snippet of code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>Google Sheets + Nodejs Dashboard</title>\\n        <meta name=\\\"description\\\" content=\\\"Google Sheets + Nodejs Dashboard />\\n        <meta charset=\\\"utf-8\\\" />\\n        <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n        <link rel=\\\"stylesheet\\\" href=\\\"/style.css\\\" />\\n        <link rel=\\\"stylesheet\\\" href=\\\"/jquery.gridster.min.css\\\" />\\n    </head>\\n    <body>\\n        <header>\\n            <h4>\\n                Google Sheets + Nodejs Dashboard\\n            </h4>\\n        </header>\\n        <br />\\n        <main>\\n            <section id=\\\"charts\\\"></section>\\n        </main>\\n\\n        <script\\n            src=\\\"https://code.jquery.com/jquery-2.2.1.min.js\\\"\\n            integrity=\\\"sha256-gvQgAFzTH6trSrAWoH1iPo9Xc96QxSZ3feW6kem+O00=\\\"\\n            crossorigin=\\\"anonymous\\\"\\n        ></script>\\n        <script src=\\\"/jquery.gridster.min.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script>\\n        <script src=\\\"/client.js\\\"></script>\\n    </body>\\n</html>\\n\")), mdx(\"p\", null, \"Start the server in the terminal window with by executing the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node index.js\"), \" and visit the URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8000\"), \" from a browser window. You will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.crowdbotics.com/content/images/2019/06/ss17.png\",\n    \"alt\": \"ss17\"\n  }))), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"I hope you understood the main purpose of this tutorial, which was to use a spreadsheet to read the data within a Nodejs application. To extend this application, you can try by adding authentication the spreadsheet. More information on this can be found in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/samcday/node-google-spreadsheets\"\n  }), \"documentation\"), \" of the npm we used for the demonstration.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/google-sheets-nodejs/\"\n  }), \"Originally published at Crowdbotics\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"93f827f8-5179-5932-aa89-d9b2f01fd712","prev":{"id":"9aa705db-4d05-51b2-ad7f-b4c8dbaa94a0","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"React Native when used with Expo as a toolchain eases out the common pain to manage ios and android applications. After saying that, I realized that there is a delight to use this ever-growing open source mobile application framework. Expo has gained…","fields":{"title":"How to build a xylophone app with Audio API, React Native, and Expo","slug":"how-to-build-a-xylophone-app-with-audio-api-react-native-and-expo","date":"2019-07-22T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"392064ff-b891-5862-94bc-7d8cd8b69dd7","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Chatbots are the hottest things in the modern digital world. Every day, organizations and individuals are powering their digital products such as websites or messenger apps to provide conversational experiences for their users. Each conversational…","fields":{"title":"How to Create a Chatbot with Dialogflow, NodeJS, and Webhooks","slug":"build-chatbot-dialogflow-nodejs-webhooks","date":"2019-07-19T00:00:00.000Z"},"code":{"scope":""}}}}}