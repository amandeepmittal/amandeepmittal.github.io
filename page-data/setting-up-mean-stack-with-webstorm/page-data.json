{"componentChunkName":"component---src-templates-post-js","path":"/setting-up-mean-stack-with-webstorm","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Setting up MEAN Stack with Webstorm","date":"July 02, 2017","author":"Aman Mittal","banner":null,"slug":"setting-up-mean-stack-with-webstorm","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"setting-up-mean-stack-with-webstorm\",\n  \"date\": \"2017-07-02T00:00:00.000Z\",\n  \"title\": \"Setting up MEAN Stack with Webstorm\",\n  \"categories\": [\"mean stack\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*XGn6_brzt1_jN5o4q4ANlw.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"see\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"#100DaysOfCode\")), \") which currently has more than 6 people actively contributing and enhancing it.\"), mdx(\"p\", null, \"With Node.js, from quickly building server side application to build fullstack application is not much of a hassle. There are two important solutions to this:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MEAN Stack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Meteor.js\")), mdx(\"h3\", null, \"MEAN Stack\"), mdx(\"p\", null, \"MEAN Stack is the used to create complete web development solutions. With JavaScript it\\u2019s base, it has lot of advantages to offer and the important of all is one programming language both on server and client side. No context switching. A perfect fullstack solution for me personally.\"), mdx(\"p\", null, \"MEAN is an acronym for MongoDB, ExpressJS, AngularJS, and Node.js. So instead of learning four different programming languages, you just need to know JavaScript.\"), mdx(\"h3\", null, \"Setup MEAN Stack in\\xA0Webstorm\"), mdx(\"p\", null, \"I am sharing a video here which shows on how to get started with MEAN using JetBrain\\u2019s Webstorm (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"A JavaScript IDE\"), \") by John Lindquist.\"), mdx(\"p\", null, mdx(\"a\", {\n    href: \"https://www.youtube.com/watch?feature=player_embedded&v=JnMvok0Yks8\",\n    target: \"_blank\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://img.youtube.com/vi/JnMvok0Yks8/0.jpg\",\n    \"alt\": \"IMAGE ALT TEXT HERE\",\n    \"width\": 400,\n    \"height\": 350,\n    \"border\": 10\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"56297075-2886-5611-8d9a-fa30f9aa21c6","prev":{"id":"aceb8e18-a385-5a13-8255-854292f04fca","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Nodejs and browser based JavaScript differ because Node has a way to handle binary data even before the ES6 draft came up with  ArrayBuffer . In Node,  Buffer  class is the primary data structure used with most I/O operations. It is a raw binary data…","fields":{"title":"Converting a Buffer to JSON and Utf8 Strings in Nodejs","slug":"converting-a-buffer-to-json-and-utf8-strings-in-nodejs","date":"2017-08-10T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"c2423c5f-a36c-5636-b393-a94ee5cabdad","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Often at times, I find my self struggling with Sequelize to find a direct answer for my query. Recently, I have been working on a fullstack application in which there was a basic requirement of paginating results from backend (REST API) to the…","fields":{"title":"How to paginate records in MySQL using Sequelize and Nodejs","slug":"paginate-records-in-mysql-using-sequelize-and-nodejs","date":"2017-06-20T00:00:00.000Z"},"code":{"scope":""}}}}}