{"componentChunkName":"component---src-templates-post-js","path":"/how-to-mock-data-for-nodejs-applications-using-fakerjs","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to Mock Data for Node.js Applications using faker.js","date":"April 01, 2017","author":"Aman Mittal","banner":null,"slug":"how-to-mock-data-for-nodejs-applications-using-fakerjs","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-mock-data-for-nodejs-applications-using-fakerjs\",\n  \"date\": \"2017-04-01T00:00:00.000Z\",\n  \"title\": \"How to Mock Data for Node.js Applications using faker.js\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*ENk6O_-iQYdMlnrM4w82kw.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"When we start to build an application, we generally do not want to worry much about data. To create a database and fill it with sample data seems much of a hassle to me personally. I rather focus more on creating RESTful API and front end of the application when I prototyping.\"), mdx(\"p\", null, \"However, this doesn\\u2019t mean I don\\u2019t pay attention to data organization in database. It\\u2019s important to have schemas of collections and documents or in any other way you want to organize your data. With this aspect complete, it brings clarity to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"how\"), \" questions when creating APIs. In a recent scenario, building a prototype of an E-Commerce web application for a client, I found myself in a similar situation. I had a deadline to deliver the prototype with maximum number of functionalities checked required by the client. After settling on how to architecture database\\u2019s schemas, I went on searching\\u200B and finding a gem to solve this issue: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"faker.js.\")), mdx(\"h3\", null, \"Enter faker.js\"), mdx(\"p\", null, \"It\\u2019s a wonderful node module to create fake/mock data when you are facing a similar situation as me. fakerjs has its own API, and it\\u2019s huge. All credit goes to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/marak\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Marak\")), \" who built it. It has a vast API for almost every use case with an excellent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/marak/Faker.js/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"documentation\"), \" that can help you get familiar in minutes on Github.\")), mdx(\"p\", null, \"Let\\u2019s consider a test case where I want some \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a user\"), \" to have following amount of fields:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"email\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"website\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"address\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bio\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"image/avatar\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const faker = require('faker')\\n\\nconst User = {\\n  name: faker.name.findName(),\\n  email: faker.internet.email(),\\n  website: faker.internet.url(),\\n  address:\\n    faker.address.streetAddress() +\\n    faker.address.city() +\\n    faker.address.country(),\\n  bio: faker.lorem.sentences(),\\n  image: faker.image.avatar()\\n}\\n\\nmodule.exports = User\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/1*t8BjRlFjuUnbf0iXl-FZCQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"That\\u2019s it. This is how you mock data using faker.js. It\\u2019s quick, simple to setup and no hassle at all. You just have to add it to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" dependencies:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install faker --save\\n\")), mdx(\"h4\", null, \"faker.js Data\"), mdx(\"p\", null, \"List of data that can generate faker.js:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"address\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"commerce\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"company\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"date\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"finance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"hacker\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"helpers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"internet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lorem\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"phone\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"random\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"system\")), mdx(\"p\", null, \"Each element has a lot of sub-items that you can check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Marak/faker.js\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"here\")), \" in the documentation.\"), mdx(\"p\", null, \"Another good thing about Faker I like is that it\\u2019s not only restricted to server side JavaScript only. You can mock data for browser JavaScript too. A little snippet from the documentation shows how to do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<script src=\\\"faker.js\\\" type=\\\"text/javascript\\\"></script>\\n<script>\\n  var randomName = faker.name.findName() // Caitlyn Kerluke\\n  var randomEmail = faker.internet.email() // Rusty@arne.info\\n  var randomCard = faker.helpers.createCard() // random contact card containing many properties\\n</script>\\n\")), mdx(\"p\", null, \"This API will help you to prototype your JavaScript/Node.js applications at a faster rate. Not only that, you can easily mock your TDD/BDD tests when creating a RESTful API utilizing this library.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"For\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/fakerjs\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"full source code at this Github Repository\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/how-to-mock-data-for-node-js-applications-using-faker-js-b1f4c0e78102\"\n  }), \"Originally Published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"46fea183-d457-569d-aa4b-2f3e90d24743","prev":{"id":"f85f2c84-c83d-5973-855c-8b276fbb05e5","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t…","fields":{"title":"How to use ESLint in Node.js Applications?","slug":"how-to-use-eslint-in-node-js-applications","date":"2017-04-28T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"b9467d44-03d3-59f4-b630-1e0cee5aaed3","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"I have been getting familiar with  Ionic Framework  in past recent days. To start, I had a question in mind which might be similar to yours.  Why choose Ionic Framework? The reasons I chose Ionic as my next framework to elaborate my skill-set, are…","fields":{"title":"Getting Started with Ionic Framework","slug":"getting-started-with-ionic-framework","date":"2017-02-26T00:00:00.000Z"},"code":{"scope":""}}}}}