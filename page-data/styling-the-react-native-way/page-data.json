{"componentChunkName":"component---src-templates-post-js","path":"/styling-the-react-native-way","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Styling The React Native Way","date":"January 14, 2019","author":"Aman Mittal","banner":null,"slug":"styling-the-react-native-way","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"styling-the-react-native-way\",\n  \"date\": \"2019-01-14T00:00:00.000Z\",\n  \"title\": \"Styling The React Native Way\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*FVbEo81g3t7SsdkubxfKUg.jpeg\",\n    \"alt\": \"_Credit_: Unslpash — Blake Connally\"\n  })), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Credit\"), \": Unslpash\\u200A\\u2014\\u200ABlake\\xA0Connally\"), mdx(\"p\", null, \"React Native comes with many in-built components that you can use to style cross-platform applications. Styling a mobile application well is essential. I cannot put enough emphasis on how important it is for a mobile app to have a pleasing design and good use of colors. Without a polished user interface, a potential user will be repelled by the lack of design in the mobile app. React Native uses plain JavaScript to style. In this tutorial, you are going to explore different ways to style a React Native app by getting some hands-on experience and learning tips along the way.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"React Native uses JavaScript to style, if you have some experience with the CSS of the web, you know that styling a component is nothing more than writing code by using proper styling syntax. If you do not have any idea what CSS is, I\\u2019d look you to stop right here as there would be no advantage for you reading this tutorial. You need to understand a bit of CSS to continue reading the tutorial below. If you understand what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backgroundColor: 'blue\\u2019\"), \" means, then you are good to go.\"), mdx(\"p\", null, \"React Native comes in with many built-in components, each having its own specific set of styles. These specific styles may or may not be applicable to other components. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" component supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontWeight\"), \" whereas a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" component does not. However, some of the styles are similar but not exactly the same. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shadowColor\"), \" while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"textShadowColor\"), \". Lastly, you have to make note that there are a few platform-specific styles such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shadowPropTypesIOS\"), \".\"), mdx(\"h3\", null, \"Different Ways to Style a React Native\\xA0App\"), mdx(\"p\", null, \"There are different ways you can add styles to your React Native component. First one is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"inline styling\"), \". See the example below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// inline example\\nimport React, { Component } from 'react'\\nimport { View, Text } from 'react-native'\\n\\nexport default class App extends Component {\\n  render() {\\n    return (\\n      <View\\n        style={{\\n          flex: 1,\\n          justifyContent: 'center',\\n          alignItems: 'center',\\n          backgroundColor: 'blue'\\n        }}\\n      >\\n        <Text style={{ color: 'white', fontSize: 32 }}>Some Text</Text>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"The result of the above code of snippet is following.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*MC9_WOIQrWsi8VEmHxQOOw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"In my previous article on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/getting-started-with-react-native-in-2019-build-your-first-app-a41ebc0617e2\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Getting Started with React Native in 2019\")), \" about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \" object. It is the second way.\"), mdx(\"p\", null, \"Available from React Native API, by importing and using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \", you create a style object and refer to each style individually. This brings the separation of styles from the render method and helps you organize the code. Also, it promotes re-using styles across components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// StyleSheet Example\\nimport React, { Component } from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\n\\nexport default class App extends Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text style={styles.bigText}>Some Text</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: 'blue'\\n  },\\n  bigText: {\\n    color: 'white',\\n    fontSize: 32\\n  }\\n})\\n\")), mdx(\"p\", null, \"This snippet of code will have the same effect on rendering on a mobile device. The only thing changed here is being separation of styles inside the component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \" object. It takes a JavaScript object as it does above, and returns a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stylesheet\"), \" object from it. There are no classes or ids in React Native like in web development. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"To create a new style object you use\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"**StyleSheet.create()**\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"method. Another advantage this method\"), \" holds is that when creating a new style object every time, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \" helps to create style objects with an ID which is further used to reference instead of rendering the whole component again and again.\"), mdx(\"h3\", null, \"Encapsulation of\\xA0Styles\"), mdx(\"p\", null, \"In React Native, styles are scoped to the component rather than the whole application. We have seen one preferred way of defining styles used commonly by the React Native community. There is another way to define styles, to organize your application code in such a way that it becomes easier to keep track of them when refactoring, or when the application starts to become huge. In this second way, you declare all the styles related to a component in a separate file. Then import that styles file inside the component file. Here is an example for you. Create a new file next to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppStyles.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { StyleSheet } from 'react-native'\\n\\nexport default StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: 'blue'\\n  },\\n  bigText: {\\n    color: 'white',\\n    fontSize: 32\\n  }\\n})\\n\")), mdx(\"p\", null, \"Next step is to import this file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text } from 'react-native'\\n\\nimport styles from './AppStyles'\\n\\nexport default class App extends Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text style={styles.bigText}>Some Text</Text>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"The demo runs and produces the same result as before. This separation of styles in a file other than the component file has its own advantages. It increases the reusability of other style objects.\"), mdx(\"h3\", null, \"Using arrays to pass\\xA0styles\"), mdx(\"p\", null, \"In inline styling, you must have observed that it is nothing but an object that starts with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" prop and an object is passed with key-value pairs. Similarly, you can use an array that can contain multiple key-value pairs as the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\n\\nexport default class App extends Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text style={[styles.bigText, styles.textYellow]}>Some Text</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n    backgroundColor: 'blue'\\n  },\\n  bigText: {\\n    color: 'white',\\n    fontSize: 32\\n  },\\n  textYellow: {\\n    color: 'yellow'\\n  }\\n})\\n\")), mdx(\"p\", null, \"The following is the result for the above snippet.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*K46jXY4aP6YfStmwRLN1Wg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Do notice that, the last style passed in overrides the previous style when there is a duplicate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" property.\"), mdx(\"h3\", null, \"Building an App: Dark/Light Themes\"), mdx(\"p\", null, \"In this section, you are going to build a simple app called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"light/dark mode\"), \" toggle. It contains a button with some text with a dark background of its own and a light colored background. When the user clicks the button, the background of the app changes to dark mode and the text on the button changes to light mode.\"), mdx(\"p\", null, \"First, let us define styles for it. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppStyles.js\"), \" the external styling file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { StyleSheet } from 'react-native'\\n\\nconst Colors = {\\n  light: 'white',\\n  dark: 'black'\\n}\\n\\nconst baseContainer = {\\n  flex: 1,\\n  justifyContent: 'center',\\n  alignItems: 'center'\\n}\\n\\nconst buttonBorderContainer = {\\n  justifyContent: 'center',\\n  alignItems: 'center',\\n  borderWidth: 3,\\n  height: 50,\\n  width: 150\\n}\\n\\nconst lightStyles = StyleSheet.create({\\n  container: {\\n    ...baseContainer,\\n    backgroundColor: Colors.light\\n  },\\n  button: {\\n    ...buttonBorderContainer,\\n    backgroundColor: Colors.dark\\n  }\\n})\\n\\nconst darkStyles = StyleSheet.create({\\n  container: {\\n    ...baseContainer,\\n    backgroundColor: Colors.dark\\n  },\\n  button: {\\n    ...buttonBorderContainer,\\n    backgroundColor: Colors.light\\n  }\\n})\\n\\nexport default function useTheme(darkTheme) {\\n  return darkTheme ? darkStyles : lightStyles\\n}\\n\")), mdx(\"p\", null, \"A lot is going on here. First, the two different color variables are defined inside a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Colors\"), \" object. Then, there are two different container objects, one for the background and one for the button. Both of these container objects then re-used inside the StyleSheet objects, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lightStyles\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"darkStyles\"), \". Similarly, to define the background color, we make re-use of the color object such that we do not have to write the value of each color twice.\"), mdx(\"p\", null, \"Lastly, there is a function that gets exported that returns theme based upon a boolean value. Dark Theme\\u2019s value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"darkStyles\"), \" is returned if its true otherwise light theme is returned.\"), mdx(\"p\", null, \"The file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppStyles.js\"), \" is a clear representation of structuring styles in a React Native app. This file is then imported inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" that has the following content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Button } from 'react-native'\\n\\nimport useTheme from './AppStyles'\\n\\nexport default class App extends Component {\\n  state = {\\n    darkTheme: false\\n  }\\n\\n  toggleTheme = () => {\\n    this.setState({ darkTheme: !this.state.darkTheme })\\n  }\\n\\n  render() {\\n    const styles = useTheme(this.state.darkTheme)\\n\\n    return (\\n      <View style={styles.container}>\\n        <View style={styles.button}>\\n          <Button title={'Click Me'} onPress={() => this.toggleTheme()} />\\n        </View>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"By defining the state, you can declare the default value of the dark theme to be false such as it allows the light theme to be the default. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleTheme\"), \" is the method that reverses the boolean value for the dark theme accordingly. Next, inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" you are passing the current value of dark theme from the state. This function is then used to apply the correct theme or set of styles based on the boolean value.\"), mdx(\"p\", null, \"You can see this in action below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*lG6ap43gDnoPulgdUiSwPA.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You can find the complete code for this example in the Github Repository below\\uD83D\\uDC47\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/react-native-workspace/tree/master/02-themeApp\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"amandeepmittal/react-native-workspace\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0\"\n  }), \"Originally published at Level up coding\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e030341a-2781-5092-8b20-41b2380ae7c2","prev":{"id":"a086efc3-fb1c-54a5-8bce-10ad3c83586c","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Building (or cloning) a JavaScript-based app using React as the front-end framework comes with some challenges. You want to focus on building and shipping the application rather than spending too much time configuring, code-splitting, determining…","fields":{"title":"How To Build a Hacker News App with React and Next.js","slug":"how-to-build-a-hacker-news-app-with-react-and-next-js","date":"2019-01-16T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"2419696d-0e90-508f-b34a-2a2a3ea9bb66","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"\nCredit: Unplash/@blakeconnaly If you are interested in writing code for mobile applications using JavaScript, you are reading the right post. React Native, developed and maintained by Facebook, is an open source framework to develop cross-platform…","fields":{"title":"3 Steps to Learn React Native in 2019","slug":"3-steps-to-learn-react-native-in-2019","date":"2019-01-04T00:00:00.000Z"},"code":{"scope":""}}}}}