{"componentChunkName":"component---src-templates-post-js","path":"/paginate-records-in-mysql-using-sequelize-and-nodejs","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to paginate records in MySQL using Sequelize and Nodejs","date":"June 20, 2017","author":"Aman Mittal","banner":null,"slug":"paginate-records-in-mysql-using-sequelize-and-nodejs","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"paginate-records-in-mysql-using-sequelize-and-nodejs\",\n  \"date\": \"2017-06-20T00:00:00.000Z\",\n  \"title\": \"How to paginate records in MySQL using Sequelize and Nodejs\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Qtaw9MXAkwlHQlzAQYScFA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Often at times, I find my self struggling with Sequelize to find a direct answer for my query. Recently, I have been working on a fullstack application in which there was a basic requirement of paginating results from backend (REST API) to the frontend. I struggled for two reasons. Firstly, coming from NoSQL background it\\u2019s hard to grasp SQL DBs. Second reason being is Sequelize documentation does not provide a clear and direct solution to this very basic abstraction. Lot of people assume things in the world of SQL databases.\"), mdx(\"p\", null, \"Thus, in this post we will be talking about a basic paginating module using Sequelize, MySQL and Node.js. I am using you have some tables and records inside your MySQL database. To setup a new app and making database connection, read my post on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/getting-started-with-sequelize-for-nodejs-applications-2854c58ffb8c\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Getting started with Sequelize\")), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"h3\", null, \"Defining a\\xA0Model\"), mdx(\"p\", null, \"I am directly jumping on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \" model definition:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"'use strict'\\nmodule.exports = function(sequelize, DataTypes) {\\n  var user = sequelize.define(\\n    'user',\\n    {\\n      id: {\\n        allowNull: false,\\n        autoIncrement: true,\\n        primaryKey: true,\\n        type: DataTypes.INTEGER\\n      },\\n      username: DataTypes.INTEGER,\\n      first_name: DataTypes.STRING,\\n      last_name: DataTypes.STRING,\\n      date_of_birth: DataTypes.STRING,\\n      created: DataTypes.INTEGER,\\n      updated: DataTypes.INTEGER\\n    },\\n    {\\n      timestamps: false,\\n      freezeTableName: true,\\n      underscore: true\\n    }\\n  )\\n  return user\\n}\\n\")), mdx(\"p\", null, \"I am using that we a table that contains hundred of user records that we want to display on an web application, say in the admin panel, and we want to show just 50 records at once.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/user.js\"), \" I am defining an endpoint \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/:page\"), \" that will fetch number of results we need from the database.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"router.get('/:page', (req, res) => {\\n  let limit = 50 // number of records per page\\n  let offset = 0\\n  db.user\\n    .findAndCountAll()\\n    .then(data => {\\n      let page = req.params.page // page number\\n      let pages = Math.ceil(data.count / limit)\\n      offset = limit * (page - 1)\\n      db.user\\n        .findAll({\\n          attributes: ['id', 'first_name', 'last_name', 'date_of_birth'],\\n          limit: limit,\\n          offset: offset,\\n          $sort: { id: 1 }\\n        })\\n        .then(users => {\\n          res\\n            .status(200)\\n            .json({ result: users, count: data.count, pages: pages })\\n        })\\n    })\\n    .catch(function(error) {\\n      res.status(500).send('Internal Server Error')\\n    })\\n})\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findAndCountAll\"), \" is the model for searching multiple records in the database and it returns both the data required and the count of elements in that table. The above query will get 50 user records at once until the next page is called to fetch the next 50 records. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset\"), \" are required in queries related to pagination in which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \" fetches the number of rows based on the query whereas \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset\"), \" is used to skip the number of rows in the database table.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/how-to-paginate-records-in-mysql-using-sequelize-and-nodejs-a3465d12aad5\"\n  }), \"Originally Published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c2423c5f-a36c-5636-b393-a94ee5cabdad","prev":{"id":"56297075-2886-5611-8d9a-fa30f9aa21c6","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github…","fields":{"title":"Setting up MEAN Stack with Webstorm","slug":"setting-up-mean-stack-with-webstorm","date":"2017-07-02T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"061fca42-f9c6-5ee9-82ce-64d87abfa244","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Introduction to ORM ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and…","fields":{"title":"Getting Started with Sequelize for Nodejs Applications","slug":"getting-started-with-sequelize-for-nodejs","date":"2017-05-30T00:00:00.000Z"},"code":{"scope":""}}}}}