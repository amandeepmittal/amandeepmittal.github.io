{"componentChunkName":"component---src-templates-post-js","path":"/converting-a-buffer-to-json-and-utf8-strings-in-nodejs","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Converting a Buffer to JSON and Utf8 Strings in Nodejs","date":"August 10, 2017","author":"Aman Mittal","banner":null,"slug":"converting-a-buffer-to-json-and-utf8-strings-in-nodejs","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"converting-a-buffer-to-json-and-utf8-strings-in-nodejs\",\n  \"date\": \"2017-08-10T00:00:00.000Z\",\n  \"title\": \"Converting a Buffer to JSON and Utf8 Strings in Nodejs\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*1878GmSC5EtcjSNHONPO3Q.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Nodejs and browser based JavaScript differ because Node has a way to handle binary data even before the ES6 draft came up with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArrayBuffer\"), \". In Node, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer\"), \" class is the primary data structure used with most I/O operations. It is a raw binary data that is allocated outside the V8 heap and once allocated, cannot be resized.\"), mdx(\"p\", null, \"Before Nodejs v6.0, to create a new buffer you could just call the constructor function with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" keyword:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let newBuff = new Buffer('New String')\\n\")), mdx(\"p\", null, \"To create a new buffer instance, in latest and current stable releases of Node:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let newBuff = Buffer.from('New String')\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Buffer()\"), \" constructor have been deprecated and replaced by separate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.from()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.alloc()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.allocUnsafe()\"), \" methods.\"), mdx(\"p\", null, \"More information can be read through \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/buffer.html\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"official documentation\")), \".\"), mdx(\"h3\", null, \"Convert a Buffer to\\xA0JSON\"), mdx(\"p\", null, \"Buffers can convert to JSON.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let bufferOne = Buffer.from('This is a buffer example.')\\nconsole.log(bufferOne)\\n\\n// Output: <Buffer 54 68 69 73 20 69 73 20 61 20 62 75 66 66 65 72 20 65 78 61 6d 70 6c 65 2e>\\n\\nlet json = JSON.stringify(bufferOne)\\nconsole.log(json)\\n\\n// Output: {\\\"type\\\":\\\"Buffer\\\",\\\"data\\\":[84,104,105,115,32,105,115,32,97,32,98,117,102,102,101,114,32,101,120,97,109,112,108,101,46]}\\n\")), mdx(\"p\", null, \"The JSON specifies that the type of object being transformed is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer\"), \", and its data.\"), mdx(\"h3\", null, \"Convert JSON to\\xA0Buffer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let bufferOriginal = Buffer.from(JSON.parse(json).data)\\nconsole.log(bufferOriginal)\\n\\n// Output: <Buffer 54 68 69 73 20 69 73 20 61 20 62 75 66 66 65 72 20 65 78 61 6d 70 6c 65 2e>\\n\")), mdx(\"h3\", null, \"Convert Buffer to Utf-8\\xA0String\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"console.log(bufferOriginal.toString('utf8'))\\n\\n// Output: This is a buffer example.\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".toString()\"), \" is not the only way to convert a buffer to a string. Also, it by defaults converts to a utf-8 format string.\"), mdx(\"p\", null, \"The other way to convert a buffer to a string is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StringDecoder\"), \" core module from Nodejs API.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/https-medium-com-amanhimself-converting-a-buffer-to-json-and-utf8-strings-in-nodejs-2150b1e3de57\"\n  }), \"Originally Published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"aceb8e18-a385-5a13-8255-854292f04fca","prev":{"id":"7b952816-0591-501c-8113-f8652bd3f95e","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In May, in the very last week,  npm  announced the new major release for the JavaScript package manager.  5.0.0 , hopefully, will be shipped with upcoming version of  Nodejs   (>=8.0.0) as well. It seems a big step towards providing better tooling…","fields":{"title":"What’s New in npm 5?","slug":"whats-new-in-npm-5","date":"2017-08-24T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"56297075-2886-5611-8d9a-fa30f9aa21c6","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github…","fields":{"title":"Setting up MEAN Stack with Webstorm","slug":"setting-up-mean-stack-with-webstorm","date":"2017-07-02T00:00:00.000Z"},"code":{"scope":""}}}}}