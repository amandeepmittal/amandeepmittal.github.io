{"componentChunkName":"component---src-templates-post-js","path":"/javascript-code-conventions","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"JavaScript Code Conventions","date":"January 08, 2016","author":"Aman Mittal","banner":null,"slug":"javascript-code-conventions","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"javascript-code-conventions\",\n  \"date\": \"2016-01-08T00:00:00.000Z\",\n  \"title\": \"JavaScript Code Conventions\",\n  \"categories\": [\"javascript\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This article is about coding conventions. Everywhere I read articles about complex things in programming, links to other good/better/awesome articles but nobody seems to talk about the the basic things in programming.\"), mdx(\"p\", null, \"Like the coding conventions used by programmers in their work. I am a JavaScript enthusiast and never once did I came across a good article on basic conventions and guidelines to write code that is helpful for me and others to read my code.\"), mdx(\"p\", null, \"Thus, this is my attempt and this article contains some general coding conventions as well as some specific guidelines only applicable to JavaScript.\"), mdx(\"h2\", null, \"So what are Code Conventions?\"), mdx(\"p\", null, \"These are the guidelines about programming practices, file and directory structure and commenting.\"), mdx(\"p\", null, \"Now you may be wondering why do you need guidelines as for files and directory structure? Well, to keep simple and when working in a team you have to follow some rules for a specific file structure for that application. Otherwise it will be huge mess.\"), mdx(\"h2\", null, \"Style Guidelines\"), mdx(\"p\", null, \"They are the type of Code Convention that includes the layout of the code within a file.\"), mdx(\"h2\", null, \"Indentation\"), mdx(\"p\", null, \"The first thing to do when writing code in a file is how to handle indentation.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"if (num === 1) {\\n  for (i = 0; i < array.length; i++) {\\n    if (array[i] !== 0) {\\n      //some code\\n    } else if (array[i] === array.length) {\\n      // code\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Observe in the previous example there is a flow. This is what indentation is all about. It makes the program readable. The else if statement is used for the if statement inside the for loop and not the outside if statement.\"), mdx(\"p\", null, \"Two ways to achieve indentation:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using tabs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using spaces\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using Tabs\"), \"\\nFor each indentation level, use one tab character. Thus, the second level will have two tab characters and so on.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using Space\")), mdx(\"p\", null, \"Each indentation level is made up of multiple spaces. The levels contains spaces in pairs, like two spaces for first level, and four spaces for second level and so on.\"), mdx(\"p\", null, \"The adavntage of using spcaes over tabs is that all text editors are configured according to spaces and is treated exactly the same. The disadvantage here is to put spaces in each line. Thankfully, we are in an era where text editors are smart enough and they automatically do indentation.\"), mdx(\"h2\", null, \"Avoid ASI Automatic Semicolon Insertion\"), mdx(\"p\", null, \"Avoiding semicolons is possible and if JavaScript has a mechanism called ASI, why the hell to care about semicolons? If you are comfortable with ASI carry on. But the rules of ASI are complex and using your time with in writing code rather than worrying about ASI is better.\"), mdx(\"p\", null, \"It causes errors and sometimes things won\\u2019t work because the JavaScript parser may read things different from the way they are written.\"), mdx(\"p\", null, \"Also, semicolons improves the readability of the code for other programmers too. If you are working collaboratively, it\\u2019s a great help.\"), mdx(\"h2\", null, \"Avoid Horizontal Scrolling\"), mdx(\"p\", null, \"The recommended length of code in a line is 80 characters. Even though the text editors have become smart, the length of 80 characters has is still used as a convention.\"), mdx(\"h2\", null, \"Blank Lines are not harmful\"), mdx(\"p\", null, \"Using blank lines to separate unrelated lines of code. It improves readability.\"), mdx(\"p\", null, \"Without blank lines:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"if (num === 1) {\\n  for (i = 0; i < array.length; i++) {\\n    if (array[i] !== 0) {\\n      //some code\\n    } else if (array[i] === array.length) {\\n      // code\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"With blank lines:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"if (num === 1) {\\n  for (i = 0; i < array.length; i++) {\\n    if (array[i] !== 0) {\\n      //some code\\n    } else if (array[i] === array.length) {\\n      // code\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Naming Convention\"), mdx(\"p\", null, \"ECMAScript uses camelCase convention. You should too when naming Variables and Functions. And try to use meaningful names for those variables and functions and keep them short.\"), mdx(\"h2\", null, \"Function Naming\"), mdx(\"p\", null, \"In JS, all we do is make functions in form of callbacks and events. Author of Maintainable Javascript Nicholas Zakas introduces some common conventions for functions. I find this helpful:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can Function that returns a boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"has Function that returns a boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"is Function that returns a boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get Function that returns a nonboolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set Function that is used to save a value\")), mdx(\"h2\", null, \"Constructors\"), mdx(\"p\", null, \"Constructors are functions too and are used to create objects via new operator. But avoid using camelCase and use PascalCase instead.\"), mdx(\"p\", null, \"It is helpful since JavaScript uses the same for naming pre-defined constructors.\"), mdx(\"h2\", null, \"Comments\"), mdx(\"p\", null, \"For single-line comments, I observed this when using JSLint, after // use a space between them(the two slashes) and the comment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Single-Line Comment\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Following all conventions of can be hard and a stressful matter at times when you are focusing on the logic part of the code. Thus, there is an alternative which works for me most of the time, is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://atom.io/packages/atom-beautify\"\n  }), \"Beautify\"), \" package that I use in the text editor \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.atom.io/\"\n  }), \"Atom\"), \" and I am sure it is available for the majority of other text editors.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"deca3810-a696-59a3-98cd-bce0398fe5c1","prev":{"id":"94182296-c574-5f02-a3ef-4be0ae5dd5cf","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Last week, when  Node.js  community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to…","fields":{"title":"The Node way - Philosophy of a Platform","slug":"the-node-way","date":"2016-03-10T00:00:00.000Z"},"code":{"scope":""}},"next":null}}}