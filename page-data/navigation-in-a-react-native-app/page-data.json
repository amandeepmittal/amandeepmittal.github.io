{"componentChunkName":"component---src-templates-post-js","path":"/navigation-in-a-react-native-app","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to use React-Navigation in a React Native App","date":"September 28, 2018","author":"Aman Mittal","banner":null,"slug":"navigation-in-a-react-native-app","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"navigation-in-a-react-native-app\",\n  \"date\": \"2018-09-28T00:00:00.000Z\",\n  \"title\": \"How to use React-Navigation in a React Native App\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*gMfpFPryz8agZxdUi4CdcQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Navigation plays an important role in mobile applications. Without navigation, there will be little use of an application. In this tutorial, we are going to learn how to implement Navigation in a React Native application from scratch. If you are familiar with web, or Reactjs as library, overall concept of navigation is same. It is used to navigate to different pages or screens (in our case). However, the implementation of a navigation library here is different from the web.\"), mdx(\"h3\", null, \"Getting Started\"), mdx(\"p\", null, \"Before building a mobile application it is recommended that one spends an amount of time strategising how the application will handle navigation and routing. In this module, we will be covering different navigation techniques available to us. First, let us setup our project. We will use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"react native CLI tool\"), \" for this. If you haven\\u2019t installed it, type the first line otherwise if you already installed, you can skip the first command.\"), mdx(\"p\", null, \"Next, we will navigate into the new project directory and will run the project to see if everything is working fine by running the following command.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*NlX0zu7oVyFJv_CKdLXMMg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"After that, we will install the dependency we need to implement navigation in our application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add react-navigation\\n\")), mdx(\"p\", null, \"Now that we have created our bare minimum application and have the required dependencies installed, we can start by creating our components and look at different navigation techniques.\"), mdx(\"h3\", null, \"Stack Navigation\"), mdx(\"p\", null, \"Stack Navigation is exactly what the word \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stack\"), \" refers to. It is a pile of screens or app pages that can be removed from the top. It follows a simple mechanism, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"last in, first out\"), \". It stack navigator, it means, adding screens on top of each other. To implement this we will create three screens inside the directory \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/\"), \". If the directory name is not available to you, do create one. These three screens are\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" files: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScreenOne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScreenTwo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScreenThree\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"// ScreenOne.js\\nimport React, { Component } from 'react';\\nimport { View, StyleSheet, TouchableHighlight, Text } from 'react-native';\\n\\nclass ScreenOne extends Component {\\n    static navigationOptions = {\\n        title: 'Welcome'\\n    };\\n    render() {\\n        const { navigate } = this.props.navigation;\\n        return (\\n            <View style={styles.container}>\\n                <TouchableHighlight\\n                    onPress={() => navigate('ScreenTwo', { screen: 'Screen Two' })}\\n                    style={styles.button}\\n                >\\n                    <Text style={styles.buttonText}>Screen One </Text>\\n                </TouchableHighlight>\\n            </View>\\n        );\\n    }\\n}\\n\\nconst styles = StyleSheet.create({\\n    container: {\\n        flex: 1,\\n        justifyContent: 'center',\\n        alignItems: 'center'\\n    },\\n    button: {\\n        alignSelf: 'stretch',\\n        marginLeft: 10,\\n        marginRight: 10,\\n        borderRadius: 5,\\n        height: 40,\\n        justifyContent: 'center'\\n    },\\n    buttonText: {\\n        color: 'teal',\\n        fontSize: 22,\\n        alignSelf: 'center'\\n    }\\n});\\nexport default ScreenOne;\\n\\n// ScreenTwo.js\\nimport React, { Component } from 'react';\\nimport { View, StyleSheet, TouchableHighlight, Text } from 'react-native';\\n\\nclass ScreenTwo extends Component {\\n    static navigationOptions = ({ navigation }) => {\\n        return {\\n            title: `Welcome ${navigation.state.params.screen}`\\n        };\\n    };\\n\\n    render() {\\n        const { state, navigate } = this.props.navigation;\\n        return (\\n            <View style={styles.container}>\\n                <Text style={styles.titleText}>{state.params.screen}</Text>\\n\\n                <View style={styles.buttonContainer}>\\n                    <TouchableHighlight\\n                        onPress={() => this.props.navigation.goBack()}\\n                        style={[styles.button, { backgroundColor: '#3b3b3b' }]}\\n                    >\\n                        <Text style={styles.buttonText}>Go Back</Text>\\n                    </TouchableHighlight>\\n\\n                    <TouchableHighlight\\n                        onPress={() => navigate('ScreenThree', { screen: 'Screen Three' })}\\n                        style={[styles.button, { backgroundColor: '#4b4bff' }]}\\n                    >\\n                        <Text style={styles.buttonText}>Next</Text>\\n                    </TouchableHighlight>\\n                </View>\\n            </View>\\n        );\\n    }\\n}\\n\\nconst styles = StyleSheet.create({\\n    container: {\\n        flex: 1,\\n        justifyContent: 'center',\\n        alignItems: 'center'\\n    },\\n    button: {\\n        alignSelf: 'stretch',\\n        marginLeft: 10,\\n        marginRight: 10,\\n        borderRadius: 5,\\n        height: 40,\\n        justifyContent: 'center'\\n    },\\n    buttonText: {\\n        color: 'white',\\n        fontSize: 22,\\n        alignSelf: 'center'\\n    }\\n});\\nexport default ScreenTwo;\\n\\n// ScreenThree.js\\nimport React, { Component } from 'react';\\nimport { StyleSheet, View, Text, TouchableHighlight } from 'react-native';\\n\\nclass ScreenThree extends Component {\\n    static navigationOptions = ({ navigation }) => ({\\n        title: `Welcome ${navigation.state.params.screen}`\\n    });\\n\\n    render() {\\n        const { params } = this.props.navigation.state;\\n        return (\\n            <View style={styles.container}>\\n                <Text style={styles.titleText}>{params.screen}</Text>\\n                <TouchableHighlight\\n                    style={styles.button}\\n                    onPress={() => this.props.navigation.goBack()}\\n                >\\n                    <Text style={styles.buttonText}>Go Back</Text>\\n                </TouchableHighlight>\\n            </View>\\n        );\\n    }\\n}\\n\\nconst styles = StyleSheet.create({\\n    container: {\\n        flex: 1,\\n        justifyContent: 'center',\\n        alignItems: 'center'\\n    },\\n    titleText: {\\n        fontSize: 22\\n    },\\n    button: {\\n        alignSelf: 'stretch',\\n        marginRight: 25,\\n        marginLeft: 25,\\n        marginTop: 20,\\n        borderRadius: 20,\\n        backgroundColor: '#ff0044',\\n        height: 50,\\n        justifyContent: 'center'\\n    },\\n    buttonText: {\\n        color: 'white',\\n        fontSize: 18,\\n        alignSelf: 'center'\\n    }\\n});\\n\\nexport default ScreenThree;\\n\")), mdx(\"p\", null, \"Notice, in all three screens we have access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigation.state\"), \" as props and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigationOptions\"), \" as a static object. The navigationOptions takes header options for the screen title \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Welcome\"), \". In the application screen above, you will see the Welcome text in the toolbar. Other header options include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headerTitle\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headerStyle\"), \" and many more. This is made available to us by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" dependency.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.props.navigation\"), \" object also different properties that we can directly access in our component. The first, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigate\"), \" is used to specify screen to navigate. Next, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"goBack()\"), \" is the method that helps us navigate back to the previous screen, if available. Lastly, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" object help us keep track of the previous and the new state.\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onPress()\"), \" handler we can also access the screen directly as we are doing in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScreenOne.js\"), \". Just pass the component and the screen name as an argument.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"onPress={() => navigate('ScreenTwo', { screen: 'Screen Two' })}\\n\")), mdx(\"p\", null, \"All of these methods and objects are made available to our components because of below configuration. To make use of these three screens, and see how Stack Navigation works in action, we will modify our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\n\\nimport { StackNavigator } from 'react-navigation'\\nimport ScreenOne from './src/stack/ScreenOne'\\nimport ScreenTwo from './src/stack/ScreenTwo'\\nimport ScreenThree from './src/stack/ScreenThree'\\n\\nconst App = StackNavigator({\\n  ScreenOne: { screen: ScreenOne },\\n  ScreenTwo: { screen: ScreenTwo },\\n  ScreenThree: { screen: ScreenThree }\\n})\\n\\nexport default App\\n\")), mdx(\"p\", null, \"We are importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StackNavigator\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" and all other screens we created inside the source directory.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*7ucBAxqZoAqvDGEbHfSniQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Screen One\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*mwaLBOP-jYybqXn4dN10Sg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Screen Two\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*1i4GrVvkqB1qHoF5GjY5mQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Screen Three\")), mdx(\"h3\", null, \"Tab Navigation\"), mdx(\"p\", null, \"The way Tab Navigation work is different from Stack Navigator. The different screens will be available to the UI at one point and there is no first or next screen. The user can access each tab from the Tab Menu. To create a Tab Navigation menu, we need to import \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createBottomTabNavigator\"), \". Let us see how it works. This time, we will edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// App.js\\nimport React from 'react'\\nimport { Text, View } from 'react-native'\\nimport { createBottomTabNavigator } from 'react-navigation'\\n\\nclass HomeScreen extends React.Component {\\n  render() {\\n    return (\\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\\n        <Text>Home!</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nclass SettingsScreen extends React.Component {\\n  render() {\\n    return (\\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\\n        <Text>Settings!</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nexport default createBottomTabNavigator({\\n  Home: HomeScreen,\\n  Settings: SettingsScreen\\n})\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*f8_SrGnqj7wR7m31-9bnVg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Of course, you can modularize it a bit by separating Home and Setting screen in different components of their own. For our demo application, the above example serves the purpose. You can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabBarOptions\"), \" to modify its look and feel.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default createBottomTabNavigator(\\n  {\\n    Home: HomeScreen,\\n    Settings: SettingsScreen\\n  },\\n  {\\n    tabBarOptions: {\\n      activeTintColor: 'red',\\n      inactiveTintColor: 'black'\\n    }\\n  }\\n)\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*tATWRPRM39a6UkruTayrTw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"It might take a while to grasp them and use them for your application but once you get the whole of the basic concept, you can do wonders with it. You can even integrate Stack and Tab Navigators for complex scenarios. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[react-navigation](https://reactnavigation.org/docs/en/getting-started.html)\"), \" has a good documentation.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/navigation-in-a-react-native-app-cf61ed85e80b\"\n  }), \"Originally published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5f03114c-6d1a-5968-b63b-24349fa7d40e","prev":{"id":"88d5b775-bf89-5f10-be2f-0f321b6966d1","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"What is used to change the state of a React component?\nsetState() and forceUpdate(). Both forceUpdate() and setState() are called within a React Component. Both of these functions tell React to re-render the component. What is Virtual DOM in ReactJS…","fields":{"title":"ReactJS Interview Questions","slug":"reactjs-interview-questions","date":"2018-09-29T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"fd527182-8581-51f5-a460-0071a7db93d5","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In this tutorial, we are going to learn how to integrate and use  ng2-smart-tables  with Angular 6. The  ng2-smart-table  is a library that is available to us as an npm package and pre-defined components and directives for sorting, searching…","fields":{"title":"Smart Tables with Angular","slug":"smart-tables-with-angular","date":"2018-09-28T00:00:00.000Z"},"code":{"scope":""}}}}}