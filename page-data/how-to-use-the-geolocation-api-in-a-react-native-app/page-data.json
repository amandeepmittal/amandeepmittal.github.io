{"componentChunkName":"component---src-templates-post-js","path":"/how-to-use-the-geolocation-api-in-a-react-native-app","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to use the Geolocation API in a React Native app","date":"August 16, 2019","author":"Aman Mittal","banner":null,"slug":"how-to-use-the-geolocation-api-in-a-react-native-app","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-use-the-geolocation-api-in-a-react-native-app\",\n  \"date\": \"2019-08-16T00:00:00.000Z\",\n  \"title\": \"How to use the Geolocation API in a React Native app\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://miro.medium.com/max/2500/1*7upjhvKG3bt6U4852iCB1g.jpeg\",\n    \"alt\": \"Cover Image Credits to Unsplash\"\n  }))), mdx(\"p\", null, \"Geolocation as an API has different methods that can be used in a web application. But it\\u2019s also a powerful API for mobile development. Ride share mobile apps like Uber, map app like Google Maps, and location features implemented in apps like Instagram depend on using this API. React Native takes advantage of this API and its available methods by extending the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Geolocation Web specification\")), \".\"), mdx(\"p\", null, \"The Geolocation API returns different methods such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCurrentPosition\"), \" to get the current location and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"watchPosition\"), \" to subscribe to location updates. They are available in React Native as polyfill.\"), mdx(\"p\", null, \"Along with this, you\\u2019re going to implement a real-time feature to ask \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"user permissions\"), \". Permissions in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \" can be a bit tricky, but after reading this article, it should be much easier.\"), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"What are we building?\")), mdx(\"p\", null, \"In this tutorial, we\\u2019ll start by going to use basic methods from the Geolocation API and then build a complete app in React Native using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" command-line interface tool.\"), mdx(\"p\", null, \"The outcome of following this tutorial is going to be a complete React Native weather application that consumes weather data from a third-party API and presents that data in a simple UI.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*PMstW38hq0Zza4T8mZr6qg.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"Table of\\xA0Contents\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Getting Started with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-native-cli\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accessing Geolocation API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting Permissions for iOS and Android\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building the Weather App: First Steps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Loading Component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weather Screen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fetching the Data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding Dynamic Weather Conditions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conclusion\")), mdx(\"h3\", null, \"Prerequisites\"), mdx(\"p\", null, \"To follow this tutorial, please make sure you have the following installed on your local development environment and have access to the services mentioned below:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://nodejs.org/en/\"\n  }), \"Node.js\"), \" (>=\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"8.x.x\"), \") with npm/yarn installed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-native\"), \" CLI tool with a version equal to or above \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2.0.1\"), \". You can install the CLI tool with the following command.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -g react-native-cli\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Please note that, throughout this tutorial, I\\u2019ll be using an iOS simulator to demonstrate the application.\")), mdx(\"h3\", null, \"Getting Started\"), mdx(\"p\", null, \"To get started, we need to initialize a new React Native project. Run the command below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"react-native init geoWeatherApp\\n\")), mdx(\"p\", null, \"Then traverse into the newly-created directory and run the following commands to see if everything is working fine.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cd geoWeatherApp\\nnpm run start\\n\\n## in second tab/window terminal\\nreact-native run-ios\\n\")), mdx(\"p\", null, \"The second command will run the build process for the iOS platform. You can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native run-android\"), \" if you wish to you use an Android emulator. Since our application is \\u2018bare minimum\\u2019 right now and doesn\\u2019t contain much source code, except in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file, you\\u2019ll see the image below when the app runs for the first time in the simulator.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*T3QXVm1-unXEjKEZhmKo7A.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"If you take a look at the project structure, you\\u2019ll notice that there are separate build folders such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/android\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/ios\"), \" for each platform to bootstrap the application.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The next revolution in mobile development? Machine learning. Don\\u2019t miss out on the latest from this emerging intersection. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.fritz.ai/newsletter?utm_campaign=heartbeat-newsletter-fomo2&utm_source=heartbeat\"\n  }), \"Sign up for weekly updates from our crew of mobile devs and machine learners.\"))), mdx(\"h3\", null, \"Accessing the Geolocation API\"), mdx(\"p\", null, \"The Geolocation API exists as a global object called navigator object in React Native, just like the web. It\\u2019s accessible through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigator.geolocation\"), \" in our source code, and there\\u2019s no need to import it.\"), mdx(\"p\", null, \"For our demonstration purposes, we\\u2019ll use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCurrentPosition\"), \" method from the Geolocation API. This method allows a mobile app to request a user's location and accepts three parameters: success callback, error callback, and a configuration object.\"), mdx(\"p\", null, \"We\\u2019ll only modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file with the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// App.js\\n\\nimport React, { Component } from 'react';\\nimport { Alert, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\\n\\nexport default class App extends Component {\\n    state = {\\n        location: null\\n    };\\n\\n    findCoordinates = () => {\\n        navigator.geolocation.getCurrentPosition(\\n            position => {\\n                const location = JSON.stringify(position);\\n\\n                this.setState({ location });\\n            },\\n            error => Alert.alert(error.message),\\n            { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\\n        );\\n    };\\n\\n    render() {\\n        return (\\n            <View style={styles.container}>\\n                <TouchableOpacity onPress={this.findCoordinates}>\\n                    <Text style={styles.welcome}>Find My Coords?</Text>\\n                    <Text>Location: {this.state.location}</Text>\\n                </TouchableOpacity>\\n            </View>\\n        );\\n    }\\n}\\n\\nconst styles = StyleSheet.create({\\n    container: {\\n        flex: 1,\\n        justifyContent: 'center',\\n        alignItems: 'center',\\n        backgroundColor: '#F5FCFF'\\n    },\\n    welcome: {\\n        fontSize: 20,\\n        textAlign: 'center',\\n        margin: 10\\n    }\\n\")), mdx(\"p\", null, \"Observe the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findCoordinates\"), \". It holds the logic of fetching a device's current location. We\\u2019re also using the local state object to store and display the returned data object provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*LmcWwnrsZOXkGbmagtx7Mw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"When you click the text \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Find My Coords?\"), \" (it\\u2019s touchable since we\\u2019re using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TouchableOpacity\"), \") it will first ask for permission, as shown below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*72jjzVbVBLl-mTdk_vMA7w.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Note that even in development mode and while running the app in a simulator, permission is only asked for once. To perform this again, you\\u2019ll have to delete the app from your simulator and re-run the command to start the Expo app. When permission is granted, it will fetch the result, store it in the app\\u2019s state, and display the returned object:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*K5bwsAxiRQm0Z2qImvniaA.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Setting Permissions for iOS and\\xA0Android\"), mdx(\"p\", null, \"In iOS, geolocation is enabled by default when a project is created using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \". To use it, we just need to include a key in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info.plist\"), \", which is inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ios/geoWeatherApp\"), \" directory.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*2be8SbVAPPukbDgPUsl29g.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"That field is already there if you check the file. In order to enable geolocation in the background, you need to include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NSLocationAlwaysUsageDescription\"), \" key in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info.plist\"), \" file and add location as a background mode in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Capabilities\"), \" tab through Xcode. Also, if you\\u2019re using CocoaPods for React Native, make sure to include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RCTGeolocation\"), \" sub-podspec.\"), mdx(\"p\", null, \"For Android, we need to add the following line in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"android/app/src/AndroidManifest.xml\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<uses-permission android:name=\\\"android.permission.ACCESS_FINE_LOCATION\\\" />\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*lDejJzVSE6YGIRGT_Lgbjw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Now if you run your application in the Android Emulator, you\\u2019ll see the same welcome screen as shown before in the iOS simulator. Click on the text \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Find My Coords?\"), \" and you\\u2019ll be prompted to ask whether to allow the application to request the user\\u2019s location or not.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*gJVJOiCG4NO45iEnmwfdtA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"If you press allow, you\\u2019ll see the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*H9Pj8TlBfWqlrtZfmPWteQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"You can find the complete code for this part of the tutorial in the repository below.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/findCoordsApp\",\n    \"title\": \"https://github.com/amandeepmittal/findCoordsApp\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"amandeepmittal/findCoordsApp\"), mdx(\"br\", {\n    parentName: \"a\"\n  }), \"_\", \"\\u269B\\uFE0F + \\uD83D\\uDCF1 Location + Permissions in RN-CLI generated app - amandeepmittal/findCoordsApp_github.com\"), mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/findCoordsApp\"\n  }))), mdx(\"h3\", null, \"Building the Weather App: First\\xA0Steps\"), mdx(\"p\", null, \"In this section, we\\u2019re going to take what we learned in the last section and build a complete weather application using a third party weather API provider\\u2014such as the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openweathermap.org/api\"\n  }), \"OpenWeatherMap API\"), \"\\u2014and our current Geolocation API knowledge.\"), mdx(\"p\", null, \"First, we need to gather the API key from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openweathermap.org/api\"\n  }), \"OpenWeatherMap\"), \". Sign in or make a new account if you don\\u2019t already have one (it\\u2019s free, no worries). Using this API, we\\u2019re going to build a simple mobile application that uses a mobile device\\u2019s geolocation. The coordinates from a user\\u2019s location will be passed to the OpenWeatherMap API which, in return, will give us a forecast for that location.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*8yiknE8jK7gnClfanEsSfw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Once you\\u2019re logged in, visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://home.openweathermap.org/api_keys\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"https://home.openweathermap.org/api_keys\")), \" to fetch your API key. There\\u2019s a default API key provided by OpenWeatherMap, so we\\u2019re going to use that in our project.\"), mdx(\"p\", null, \"Now, open up your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file and enter the following snippet of code to see if everything is working well:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// App.js\\nimport React from 'react'\\nimport { StyleSheet, Text, View } from 'react-native'\\n\\nexport default class App extends React.Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text>Minimalist Weather App</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  }\\n})\\n\")), mdx(\"p\", null, \"And you\\u2019ll see the following output is rendered.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*mXaHYMh_TgpEeJjrKFz2ug.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"The next step is to install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://oblador.github.io/react-native-vector-icons/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"react-native-vector-icons\")), \". If you\\u2019ve already installed react-native-vector-icons, then you can skip this step. Otherwise, enter the following command in your terminal window.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -S react-native-vector-icons\\n\")), mdx(\"p\", null, \"The last step in this process is to link our newly-installed library.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"react-native link react-native-vector-icons\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Why do we have to perform this last command?\")), \" All third-party libraries in React Native have some native dependencies that use platform-specific capabilities for iOS and/or Android. Linking these native dependencies with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native link\"), \" command indicates that a library\\u2019s native dependencies are linked successfully to your iOS/Android project.\"), mdx(\"p\", null, \"Whenever you link a library, you\\u2019ll always get a prompt message informing you whether the library has been successfully linked or not. Since we\\u2019ve already added permissions to ask and access a user\\u2019s location in this project, we can skip this and continue to the next step. If you\\u2019re building this project from scratch, you can go back to the section \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#d8df\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Setting Permissions for iOS and Android\")), \" and add the necessary permissions.\"), mdx(\"h3\", null, \"The Loading Component\"), mdx(\"p\", null, \"In this step, we\\u2019ll develop our first screen\\u2014a loading screen. Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file, start by defining a local state:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { StyleSheet, Text, View } from 'react-native'\\n\\nexport default class App extends React.Component {\\n  state = {\\n    isLoading: true\\n  }\\n\\n  render() {\\n    const { isLoading } = this.state\\n    return (\\n      <View style={styles.container}>\\n        {isLoading ? null : (\\n          <View>\\n            <Text>Minimalist Weather App</Text>\\n          </View>\\n        )}\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  }\\n})\\n\")), mdx(\"p\", null, \"The code above states that when the value of local state for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", it\\u2019s going show the name of the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Text>\"), \" component, which in this case is the name of the application. This is what we\\u2019re going to render.\"), mdx(\"p\", null, \"Later on, instead of displaying the name of the application, we\\u2019ll show the weather info here, once our API has successfully fetched the data. For now, let\\u2019s stick to this message so we can first work on the question: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"What if our app is in the state of loading?\"), \" Let's add the message text to indicate that the app is fetching the data. Change the content of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"render() {\\n    const { isLoading } = this.state;\\n    return (\\n      <View style={styles.container}>\\n        {isLoading ? (\\n          <Text>Fetching The Weather</Text>\\n        ) : (\\n          <View>\\n            <Text>Minimalist Weather App</Text>\\n          </View>\\n        )}\\n      </View>\\n    );\\n}\\n\")), mdx(\"p\", null, \"Right now, if you change to value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" to true, you\\u2019ll notice the below screen appear.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*fo8IAFglmCCWcBkSTiigLQ.png\",\n    \"alt\": null\n  }))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: After testing for the above screen, make sure you set the default value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" to false.\")), mdx(\"h3\", null, \"Weather Screen\"), mdx(\"p\", null, \"We\\u2019ll define a new weather component at\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./components/Weather.js\"), \". The boilerplate code for every weather condition screen is going to be the same. It will be divided into two views\\u2014a header and a body. The header will show the weather condition icon and temperature, and the body will display the text associated with the weather condition.\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather.js\"), \", we start by defining two containers inside the main container: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headerContainer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyContainer\"), \". Do note that we\\u2019re defining the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather\"), \" component not as a class but as a function in order to receive props and since it won\\u2019t be managing a state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Weather.js\\nimport React from 'react'\\nimport { View, Text, Stylesheet } from 'react-native'\\n\\nconst Weather = () => {\\n  return (\\n    <View style={styles.container}>\\n      <View style={styles.headerContainer} />\\n      <View style={styles.bodyContainer} />\\n    </View>\\n  )\\n}\\n\\nconst styles = StyleSheet({\\n  container: {\\n    flex: 1\\n  },\\n  headerContainer: {},\\n  bodyContainer: {}\\n})\\n\\nexport default Weather\\n\")), mdx(\"p\", null, \"I\\u2019m going to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MaterialCommunityIcons\"), \" to display weather icons in the app.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { View, Text, Stylesheet } from 'react-native'\\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons'\\n\\nconst Weather = () => {\\n  return (\\n    <View style={styles.weatherContainer}>\\n      <View style={styles.headerContainer}>\\n        <Icon size={48} name=\\\"weather-sunny\\\" color={'#fff'} />\\n        <Text style={styles.tempText}>Temperature\\u02DA</Text>\\n      </View>\\n      <View style={styles.bodyContainer}>\\n        <Text style={styles.title}>So Sunny</Text>\\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\\n      </View>\\n    </View>\\n  )\\n}\\n\\nconst styles = StyleSheet.create({\\n  weatherContainer: {\\n    flex: 1,\\n    backgroundColor: '#f7b733'\\n  },\\n  headerContainer: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  },\\n  tempText: {\\n    fontSize: 48,\\n    color: '#fff'\\n  },\\n  bodyContainer: {\\n    flex: 2,\\n    alignItems: 'flex-start',\\n    justifyContent: 'flex-end',\\n    paddingLeft: 25,\\n    marginBottom: 40\\n  },\\n  title: {\\n    fontSize: 48,\\n    color: '#fff'\\n  },\\n  subtitle: {\\n    fontSize: 24,\\n    color: '#fff'\\n  }\\n})\\n\\nexport default Weather\\n\")), mdx(\"p\", null, \"To see it in action, let\\u2019s modify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \". Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather\"), \" component and then make changes to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" function accordingly:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// App.js\\nimport Weather from './components/Weather';\\n\\n\\n// ...\\nrender() {\\n        const { isLoading } = this.state;\\n        return (\\n            <View style={styles.container}>\\n                {isLoading ? <Text>Fetching The Weather</Text> : <Weather />}\\n            </View>\\n        );\\n  }\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*dOKWGbyK8rLkcJb57lE8YQ.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Fetching the\\xA0Data\"), mdx(\"p\", null, \"To fetch real-time weather data, I found the OpenWeatherMap API to be highly useful and consistent. To communicate with the API, you\\u2019ll need an API key (as discussed previously). To store the API key in our app, create a new file called\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./utils/WeatherApiKey.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const API_KEY = '849338767c0e95025b5559533d26b7c4'\\n\")), mdx(\"p\", null, \"The way the OpenWeatherMap API works is that we need to feed it longitude and latitude coordinates from the device\\u2019s location. It then fetches the data from its server as a JSON object. From the server, we now need two things: the temperature, and the weather condition. We should have both stored in the local state in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"state = {\\n  isLoading: false,\\n  temperature: 0,\\n  weatherCondition: null,\\n  error: null\\n}\\n\")), mdx(\"p\", null, \"We start by importing the API key we just defined, then updating our state with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"temperature\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weatherCondition\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \". We need a lifecycle method to re-render the component once the data is fetched from the API. For this purpose, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount()\"), \" works best. Add the below snippet before the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" function in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"componentDidMount() {\\n        navigator.geolocation.getCurrentPosition(\\n            position => {\\n                this.fetchWeather(position.coords.latitude, position.coords.longitude);\\n            },\\n            error => {\\n                this.setState({\\n                    error: 'Error Getting Weather Conditions'\\n                });\\n            }\\n        );\\n    }\\n\\n    fetchWeather(lat = 25, lon = 25) {\\n        fetch(\\n            `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_KEY}&units=metric`\\n        )\\n            .then(res => res.json())\\n            .then(json => {\\n                this.setState({\\n                    temperature: json.main.temp,\\n                    weatherCondition: json.weather[0].main,\\n                    isLoading: false\\n                });\\n            });\\n  }\\n\")), mdx(\"p\", null, \"We\\u2019re also using JavaScript\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigator\"), \" API to get the current location. (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is where a JavaScript API will communicate with a native one using a bridge.\"), \") We pass on the values of latitude and longitude to our custom function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetchWeather\"), \", where the OpenWeatherMap API is called.\"), mdx(\"p\", null, \"The result we get is in JSON format, and if you console log it, you\\u2019ll be able to see the result as a JSON object in the Expo terminal, where there are a lot of values. We need only the temperature value and weather condition. We then update our local state with the new values obtained. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&units=metric\"), \" at the end of our API call converts the temperature from Kelvin to Celsius.\"), mdx(\"p\", null, \"Now all we have to do is pass the two values of our local state as props to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather\"), \" component and then update it so that it can receive those props:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Weather\\n  weather={this.state.weatherCondition}\\n  temperature={this.state.temperature}\\n/>\\n\")), mdx(\"p\", null, \"Then, update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather.js\"), \" accordingly to use props:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Weather = ({ weather, temperature }) => {\\n  return (\\n    <View style={styles.weatherContainer}>\\n      <View style={styles.headerContainer}>\\n        <MaterialCommunityIcons size={48} name=\\\"weather-sunny\\\" color={'#fff'} />\\n        <Text style={styles.tempText}>{temperature}\\u02DA</Text>\\n      </View>\\n      <View style={styles.bodyContainer}>\\n        <Text style={styles.title}>{weather}</Text>\\n        <Text style={styles.subtitle}>It hurts my eyes!</Text>\\n      </View>\\n    </View>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The result will be as follows:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*pIZuRJJlYJwrNkm2we-8PA.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Adding Dynamic Weather Conditions\"), mdx(\"p\", null, \"Since we\\u2019ve done the hard part of fetching the real-time data, we need to make the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather\"), \" component behave \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openweathermap.org/weather-conditions\"\n  }), \"dynamically based on the values\"), \" it\\u2019s getting. This entire dynamic behavior will be associated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weatherCondition\"), \".\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weatherCondition\"), \", we can define changes in our background, title, subtitle, and weather icon. Let's start by pre-defining weather conditions in a file,\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./utils/WeatherConditions.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export const weatherConditions = {\\n  Rain: {\\n    color: '#005BEA',\\n    title: 'Raining',\\n    subtitle: 'Get a cup of coffee',\\n    icon: 'weather-rainy'\\n  },\\n  Clear: {\\n    color: '#f7b733',\\n    title: 'So Sunny',\\n    subtitle: 'It is hurting my eyes',\\n    icon: 'weather-sunny'\\n  },\\n  Thunderstorm: {\\n    color: '#616161',\\n    title: 'A Storm is coming',\\n    subtitle: 'Because Gods are angry',\\n    icon: 'weather-lightning'\\n  },\\n  Clouds: {\\n    color: '#1F1C2C',\\n    title: 'Clouds',\\n    subtitle: 'Everywhere',\\n    icon: 'weather-cloudy'\\n  },\\n\\n  Snow: {\\n    color: '#00d2ff',\\n    title: 'Snow',\\n    subtitle: 'Get out and build a snowman for me',\\n    icon: 'weather-snowy'\\n  },\\n  Drizzle: {\\n    color: '#076585',\\n    title: 'Drizzle',\\n    subtitle: 'Partially raining...',\\n    icon: 'weather-hail'\\n  },\\n  Haze: {\\n    color: '#66A6FF',\\n    title: 'Haze',\\n    subtitle: 'Another name for Partial Raining',\\n    icon: 'weather-hail'\\n  },\\n  Mist: {\\n    color: '#3CD3AD',\\n    title: 'Mist',\\n    subtitle: \\\"Don't roam in forests!\\\",\\n    icon: 'weather-fog'\\n  }\\n}\\n\")), mdx(\"p\", null, \"These weather conditions are provided from the OpenWeatherMap API. Then, let\\u2019s import them in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Weather.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons'\\n\\nimport { weatherConditions } from '../utils/WeatherConditions'\\n\\nconst Weather = ({ weather, temperature }) => {\\n  return (\\n    <View\\n      style={[\\n        styles.weatherContainer,\\n        { backgroundColor: weatherConditions[weather].color }\\n      ]}\\n    >\\n      <View style={styles.headerContainer}>\\n        <Icon size={72} name={weatherConditions[weather].icon} color={'#fff'} />\\n        <Text style={styles.tempText}>{temperature}\\u02DA</Text>\\n      </View>\\n      <View style={styles.bodyContainer}>\\n        <Text style={styles.title}>{weatherConditions[weather].title}</Text>\\n        <Text style={styles.subtitle}>\\n          {weatherConditions[weather].subtitle}\\n        </Text>\\n      </View>\\n    </View>\\n  )\\n}\\n\\nconst styles = StyleSheet.create({\\n  weatherContainer: {\\n    flex: 1\\n  },\\n  headerContainer: {\\n    flex: 1,\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  },\\n  tempText: {\\n    fontSize: 48,\\n    color: '#fff'\\n  },\\n  bodyContainer: {\\n    flex: 2,\\n    alignItems: 'flex-start',\\n    justifyContent: 'flex-end',\\n    paddingLeft: 25,\\n    marginBottom: 40\\n  },\\n  title: {\\n    fontSize: 48,\\n    color: '#fff'\\n  },\\n  subtitle: {\\n    fontSize: 24,\\n    color: '#fff'\\n  }\\n})\\n\\nexport default Weather\\n\")), mdx(\"p\", null, \"We\\u2019ve made some additions by using available props with weather conditions to dynamically change the background, icon, weather name, and the subtitle. You can play around with the styling to make it look more minimalistic or more exquisite\\u200A\\u2014\\u200Ait\\u2019s up to you!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Z6Nv_m3cBRuj9w5qwiJStw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"You\\u2019ve successfully used the knowledge of geolocation data and setting up permissions in a real-time scenario to build a weather forecast application using a third party API and React Native.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://heartbeat.fritz.ai/how-to-use-the-geolocation-api-in-a-react-native-app-b5e611b00a0c\"\n  }), \"Originally published at Heartbeat\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e32467b7-9fec-5a42-be8b-f66aebcdea7a","prev":null,"next":{"id":"0f836d98-7d0d-5a71-b88b-997a8a9f31b5","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"AsyncStorage  is a simple, asynchronous key-value pair used in React Native applications. It’s used for a variety of scenarios but mainly to store data when your app is not using any cloud services, or when you want to implement features in your app…","fields":{"title":"What is AsyncStorage in React Native?","slug":"what-is-asyncstorage-in-react-native","date":"2019-08-09T00:00:00.000Z"},"code":{"scope":""}}}}}