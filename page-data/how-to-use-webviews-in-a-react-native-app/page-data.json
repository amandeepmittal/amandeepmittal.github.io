{"componentChunkName":"component---src-templates-post-js","path":"/how-to-use-webviews-in-a-react-native-app","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How To Use WebViews in a React Native App","date":"August 01, 2019","author":"Aman Mittal","banner":null,"slug":"how-to-use-webviews-in-a-react-native-app","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-use-webviews-in-a-react-native-app\",\n  \"date\": \"2019-08-01T00:00:00.000Z\",\n  \"title\": \"How To Use WebViews in a React Native App\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://blog.jscrambler.com/content/images/2019/08/jscrambler-blog-using-web-views-react-native.jpg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"As a React Native developer, you are going to come across some use cases that will require you to embed or redirect a web application or a web page inside a React Native app. WebViews are often used for such use cases.\"), mdx(\"p\", null, \"A community-maintained module, WebViews in React Native are the only way to let the user visit external links within an iOS or Android application. The WebView component in React Native core first became available in React Native version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.57.x\"), \".\"), mdx(\"p\", null, \"In this tutorial, you are going to learn how to utilize a primary WebView component using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/react-native-community/react-native-webview\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"react-native-webview\")), \", which is the official cross-platform module to attain the functionality. After understanding how a simple WebView component works, you will leverage \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" to showcase a pragmatic approach that can be useful in real-time React Native applications.\"), mdx(\"h2\", null, \"Requirements\"), mdx(\"p\", null, \"To follow this tutorial, make sure you have the following installed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">=8.x.x\"), \" with npm or yarn installed as a package manager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://facebook.github.io/watchman/\"\n  }), \"watchman\"), \" a file watching service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/react-native-cli\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"react-native-cli\")))), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, \"To start, you first have to initialize a new React Native project. Run the following command to create a new project and then navigate inside the generated directory. Note that, by default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" as the package manager.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# to generate a project directory\\nreact-native-cli init RNWebviewsDemo\\n\\n# navigate inside the project directory\\ncd RNWebViewsDemo\\n\")), mdx(\"p\", null, \"To use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component, you have to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-webview\"), \" package. Also, make sure you link the native bindings with the newly installed dependency.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# to install\\nyarn add react-native-webview\\n\\n# to link\\nreact-native link react-native-webview\\n\")), mdx(\"p\", null, \"An iOS application does not require any further steps to make this work. For Android platforms version 6.x.x and above, you also have to open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"android/gradle.properties\"), \" and add the following two lines.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gradle\"\n  }), \"android.useAndroidX=true\\nandroid.enableJetifier=true\\n\")), mdx(\"p\", null, \"Once the dependency installation is done, let us run the application. We are going to use an iOS simulator for this tutorial. If you are on Windows or Linux based operating systems, you can use Android Studio.\"), mdx(\"p\", null, \"Run the command as stated below to open the boilerplate application that comes with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# for Mac users\\nreact-native run-ios\\n\\n# for Windows/Linux users\\nreact-native run-android\\n\")), mdx(\"p\", null, \"The following screen will welcome you:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://i.imgur.com/EUnGmba.png\"\n  }), \"Welcome Screen\")), mdx(\"h2\", null, \"A Simple WebView\"), mdx(\"p\", null, \"Let us start by opening and modifying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file. In this file, import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-webview\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport WebView from 'react-native-webview'\\n\\nexport default class App extends Component {\\n  render() {\\n    return (\\n      <WebView\\n        source={{ uri: 'https://blog.jscrambler.com' }}\\n        style={{ marginTop: 20 }}\\n      />\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component requires a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" prop. This prop loads the static HTML or a URI (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"which is the current case if you look closely at the above snippet\"), \"). A URI is a remote location for a web page to exist. A static HTML will be some internal HTML file that embeds some content to display. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" prop is basic React Native inline styling that allows you to customize a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \".\"), mdx(\"p\", null, \"If your simulator is still running, you will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/73jn0We.gif\",\n    \"alt\": \"ss2\"\n  }))), mdx(\"p\", null, \"In the above demo, you can see that the simplest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component you wrote earlier works. It loads the complete website, but there are some flaws. First, it does not have a navigation button to navigate back to the application. Second, it does not have a loading indicator that demonstrates that the web page is still loading. From the next section onwards, you are going to add these two functionalities.\"), mdx(\"h2\", null, \"Setting up react-navigation\"), mdx(\"p\", null, \"To add a navigator in the current React Native application, you have to install the following dependencies and link them.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# to install\\nyarn add react-navigation react-native-gesture-handler\\n\\n# to link\\nreact-native link react-native-gesture-handler\\n\")), mdx(\"p\", null, \"Again, no further steps are required to make \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library work with iOS; but with Android, you have to make the following modifications inside the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"android/app/src/main/java/com/rnwebviewsdemo/MainActivity.java\"), \".\"), mdx(\"p\", null, \"After other import statements, add the following snippet.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"import com.facebook.react.ReactActivityDelegate;\\nimport com.facebook.react.ReactRootView;\\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\\n\")), mdx(\"p\", null, \"Then, in the same file, inside the class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MainActivity\"), \" add the following snippet.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Override\\n protected ReactActivityDelegate createReactActivityDelegate() {\\n   return new ReactActivityDelegate(this, getMainComponentName()) {\\n     @Override\\n     protected ReactRootView createRootView() {\\n     return new RNGestureHandlerEnabledRootView(MainActivity.this);\\n     }\\n   };\\n }\\n\")), mdx(\"p\", null, \"That's it for setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library.\"), mdx(\"h2\", null, \"Create a StackNavigator\"), mdx(\"p\", null, \"Now, at the root of the project directory, create a folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigation\"), \". Inside this folder, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppNavigator.js\"), \". This file is going to be responsible for initializing screens and create Stack Navigator. Add the import statements that are going to help construct a stack navigator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { createStackNavigator, createAppContainer } from 'react-navigation'\\nimport Home from '../screens/Home'\\n\\nconst HomeStack = createStackNavigator({\\n  Home: {\\n    screen: Home,\\n    navigationOptions: ({ navigation }) => ({\\n      title: 'Home',\\n      headerTintColor: 'blue'\\n    })\\n  }\\n})\\n\\nconst AppContainer = createAppContainer(HomeStack)\\n\\nexport default AppContainer\\n\")), mdx(\"p\", null, \"In the above snippet, you are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createStackNavigator\"), \" function to create a stack-based navigation flow. This function takes a route configuration object and an options object and returns a React component. Right now, it has only one screen that will be displaying some buttons to navigate to a specific web view. You are going to add the business logic behind HomeScreen in the next section.\"), mdx(\"p\", null, \"Stack Navigation provides a way to transit between screens. This mechanism works quite similar to how a web application works in a web browser. A web app either pushes (next page) or pops (go back) when navigating between different web pages in the browser. Similarly, different screens can be used to either push or pop between in a React Native application.\"), mdx(\"p\", null, \"Each route is expected to have a screen name. For example, in the above snippet, there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" route with the same screen name. This screen name is provided using the attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" that is coming from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigationOptions\"), \". To modify the presentation of a screen in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library, options like these are used.\"), mdx(\"p\", null, \"To understand this better, note the two attributes you are currently providing in the above snippet: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headerTintColor\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" screen. Later, you will have to define the screen to display Web View. You will have similar options for that second screen but with different properties.\"), mdx(\"p\", null, \"Lastly, open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppContainer\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component in any React Native application is always the entry point. To make navigation work, you have to modify the file, as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport AppContainer from './navigation/AppNavigator'\\n\\nexport default function App() {\\n  return <AppContainer />\\n}\\n\")), mdx(\"h2\", null, \"Adding a Home Screen\"), mdx(\"p\", null, \"Create a new directory called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens\"), \" with a file name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \". This file will represent the first or initial screen whenever the application starts.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\n\\nclass Home extends Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text style={styles.text}>Home Screen</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  },\\n  text: {\\n    color: '#333',\\n    textAlign: 'center'\\n  }\\n})\\n\\nexport default Home\\n\")), mdx(\"p\", null, \"So far, it is a simple React Native component that displays a text field. Go to the simulator, and you will see the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/hcee288.png\",\n    \"alt\": \"ss3\"\n  }))), mdx(\"p\", null, \"Now, as the Home screen component is working, you can start working on the main application. Start by defining a state object that contains some URLs in the form of an array inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"state = {\\n  links: [\\n    { title: 'Jscrambler Blog', link: 'https://blog.jscrambler.com' },\\n    { title: 'My Portfolio', link: 'https://amanhimself.dev' }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Each URL has a title that will be displayed. The next step is to map this array to display different buttons. These buttons will then point to the correct URL, and that URL will be rendered through a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component. Here is the complete code for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Home extends Component {\\n  state = {\\n    links: [\\n      { title: 'JScrambler Blog', link: 'https://blog.jscrambler.com' },\\n      { title: 'My Portfolio', link: 'https://amanhimself.dev' }\\n    ]\\n  }\\n\\n  handleButtonPress(item) {\\n    const { title, link } = item\\n    this.props.navigation.navigate('Browser', { title, link })\\n  }\\n\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <View style={styles.list}>\\n          {this.state.links.map((item, index) => (\\n            <TouchableOpacity\\n              key={index}\\n              onPress={() => this.handleButtonPress(item)}\\n              style={styles.button}\\n            >\\n              <Text style={styles.text}>{item.title}</Text>\\n            </TouchableOpacity>\\n          ))}\\n        </View>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  },\\n  buttonList: {\\n    flex: 1,\\n    justifyContent: 'center'\\n  },\\n  button: {\\n    margin: 10,\\n    backgroundColor: '#356bca',\\n    borderRadius: 5,\\n    padding: 10\\n  },\\n  text: {\\n    color: '#fff',\\n    textAlign: 'center'\\n  }\\n})\\n\\nexport default Home\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleButtonPress\"), \" event takes each object from the state and using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.navigation.navigate\"), \" it figures out that when the button is pressed, the app user has to be navigated on the next screen or route called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser\"), \". This is where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" comes to use. When navigating the to the next screen, you are also passing the link and the title of each web view from the state. These values can be easily obtained in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser\"), \" screen using navigation parameters.\"), mdx(\"p\", null, \"You will get the following result in the simulator running the application.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/UClFPv0.png\",\n    \"alt\": \"ss4\"\n  }))), mdx(\"h2\", null, \"Create the Browser Screen\"), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens\"), \" folder, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser.js\"), \" This will hold the component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser\"), \" which is going to be responsible for navigating to the correct WebView, dynamically.\"), mdx(\"p\", null, \"First, you have to hook this new screen in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppNavigator.js\"), \" file. To make use of navigation props, you have to specify each screen. Modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeStack\"), \" navigator as below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// after other imports ...\\nimport Browser from '../screens/Browser'\\n\\n// ... modify only the HomeStack\\n\\nconst HomeStack = createStackNavigator({\\n  Home: {\\n    screen: Home,\\n    navigationOptions: ({ navigation }) => ({\\n      title: 'Home',\\n      headerTintColor: 'blue'\\n    })\\n  },\\n  Browser: {\\n    screen: Browser,\\n    navigationOptions: ({ navigation }) => ({\\n      title: navigation.state.params.title,\\n      headerTintColor: 'green'\\n    })\\n  }\\n})\\n\")), mdx(\"p\", null, \"In the above snippet, notice how each Browser screen will have dynamic title coming and a tint color property that\\u2019s different from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" screen.\"), mdx(\"p\", null, \"Now, open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser.js\"), \" and add the following logic to it. Start by importing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-webview\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { WebView } from 'react-native-webview'\\n\\nclass Browser extends Component {\\n  render() {\\n    const { params } = this.props.navigation.state\\n\\n    return <WebView source={{ uri: params.link }} />\\n  }\\n}\\n\\nexport default Browser\\n\")), mdx(\"p\", null, \"In the above snippet, you are fetching parameters. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.props.navigation.state.params\"), \" allows reading the parameters you passed through when handling the button press in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" screen component. This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"params\"), \" object can be then used to render the value of each web view link.\"), mdx(\"p\", null, \"Now, if you click on any of the buttons, you will notice that it opens a new screen that displays the web page. Do note the color change in the title. Also, the stack navigator by default gives a way to exit the web view whenever required by providing a back button. See the below demo for detailed information.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/rH5PQhP.gif\",\n    \"alt\": \"ss5\"\n  }))), mdx(\"p\", null, \"The web view integration is working now. However, there is still no way to indicate how much time a webpage will completely take to load. Let us add the functionality in the next section.\"), mdx(\"h2\", null, \"Adding ActivityIndicator to WebView\"), mdx(\"p\", null, \"To add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActivityIndicator\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \"component you have to first define an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActivityIndicator\"), \". Import this component from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" core. Then, modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Browser.js\"), \" file as following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { WebView } from 'react-native-webview'\\nimport { ActivityIndicator, StyleSheet } from 'react-native'\\n\\nclass Browser extends Component {\\n  LoadingIndicatorView() {\\n    return (\\n      <ActivityIndicator\\n        color=\\\"#009b88\\\"\\n        size=\\\"large\\\"\\n        style={styles.ActivityIndicatorStyle}\\n      />\\n    )\\n  }\\n\\n  render() {\\n    const { params } = this.props.navigation.state\\n\\n    return (\\n      <WebView\\n        source={{ uri: params.link }}\\n        renderLoading={this.LoadingIndicatorView}\\n        startInLoadingState={true}\\n      />\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  ActivityIndicatorStyle: {\\n    flex: 1,\\n    justifyContent: 'center'\\n  }\\n})\\n\\nexport default Browser\\n\")), mdx(\"p\", null, \"Once you have added the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActivityIndicator\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component requires two props to make it work. First, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startInLoadingState\"), \" prop must be set to true, as shown in the above snippet. Then, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderLoading\"), \" prop is responsible for triggering the loading indicator, in our case, the function: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LoadingIndicatorView()\"), \". This prop always accepts a function as its value. Both of these props are not available by default. You have to specify them explicitly.\"), mdx(\"p\", null, \"Take a look at how it works in the below screen.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/rJELxfd.gif\",\n    \"alt\": \"ss6\"\n  }))), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"This concludes the tutorial on getting started, setting up, and using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" component in a React Native application. The important part of this tutorial is to make use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library to provide a complete navigational flow between different screens and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" screen.\"), mdx(\"p\", null, \"Your challenge now is to extend the knowledge you have gained in this tutorial about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebView\"), \" components and extend it further. An excellent place to start is by referring its official API documentation \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/react-native-community/react-native-webview/blob/master/docs/Reference.md#javascriptenabled\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"You will find the complete code for this tutorial at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/RNWebviewsDemo\"\n  }), \"this Github repository\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.jscrambler.com/how-to-use-webviews-in-a-react-native-app/\"\n  }), \"Originally published at Jscrambler\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"499c8266-fc03-5125-ba74-b13b67fb8a02","prev":{"id":"e0c28940-6c9d-5abe-a7a3-b97a47b8fa40","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"As developers, we love exploring concepts and mechanisms while working with a new framework. React Native as a cross-platform development framework has come quite far in terms of a mature framework since I started playing around with it and then…","fields":{"title":"Building offline React Native apps with AsyncStorage","slug":"building-offline-react-native-apps-with-asyncstorage","date":"2019-08-08T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"93f827f8-5179-5932-aa89-d9b2f01fd712","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Google Spreadsheets and Nodejs might sound a strange combination, but the server side platform can be a great way to utilize the Google Drive API. In this tutorial, you are going to learn how to build a connect the two leveraging a Crowdbotics app…","fields":{"title":"Visualize Google Sheets Data in a NodeJS App","slug":"google-sheets-nodejs","date":"2019-07-22T00:00:00.000Z"},"code":{"scope":""}}}}}