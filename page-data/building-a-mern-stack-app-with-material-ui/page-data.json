{"componentChunkName":"component---src-templates-post-js","path":"/building-a-mern-stack-app-with-material-ui","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Building an authenticated MERN Stack App Using Material UI","date":"November 16, 2018","author":"Aman Mittal","banner":null,"slug":"building-a-mern-stack-app-with-material-ui","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"building-a-mern-stack-app-with-material-ui\",\n  \"date\": \"2018-11-16T00:00:00.000Z\",\n  \"title\": \"Building an authenticated MERN Stack App Using Material UI\",\n  \"categories\": [\"MERN stack\"],\n  \"description\": \"Learn to build an authenticated full-stack application using MERN, styled with Material UI components.\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*1cG_wIqRuwkrpIM6HRa1Vw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"It can sometime be overwhelming to build a full-stack web application using a stack like MERN.\"), mdx(\"p\", null, \"Setting up the the back end and connecting it with a client-side library like React to fetch and display data is just the beginning. One you have the data user will interact with, you need to focus on developing a functional User Interface (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"UI\"), \") for your web application. For some developers, UI can be the tricky part.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/crowdbotics/deploy-a-mern-stack-app-on-heroku-b0c255744a70\"\n  }), \"MERN\"), \" is full-stack because it consists of MongDB, Express, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.crowdbotics.com/build/react\"\n  }), \"React\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://crowdbotics.com/build/node-js\"\n  }), \"Nodejs\"), \". Each of these technologies can be replaced with something comparable but it is common practice to use them together.\"), mdx(\"p\", null, \"React is the library you will use to build the front-end of the web application. Express is a Nodejs framework that helps you to build a server that communicates to and fro with a NoSQL database like MongoDB.\"), mdx(\"p\", null, \"In this tutorial, I am going to show you how to build a small web application using this technology stack, step-by-step. Along with building a simple web app, you will learn how to use the Material UI library to make the application look good. You can then use what you learn here for to make your own applications look better and be more functional.\"), mdx(\"h3\", null, \"Pre-requisites\"), mdx(\"p\", null, \"Before we get started, install all the tools we are going to need to set up our application.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"yarn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create-react-app\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The last in the above list are installed using npm.\")), mdx(\"h3\", null, \"Set up the MERN\\xA0App\"), mdx(\"p\", null, \"To get started, you need to follow the steps below by opening your terminal and typing these commands. To keep you from getting lost, I will leave a comment before each command using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# create an empty directory and traverse inside it\\nmkdir mern-material-demo\\n\\n# initialize it with npm\\nnpm init -y\\n\\n# install server side dependencies (initially)\\nyarn add express mongoose cookie-parser express-jwt jsonwebtoken\\n\\n# use babel for import statements in Node\\nyarn add -D babel-cli babel-preset-env babel-watch\\n\\n# create a client using create-react-app from root\\ncreate-react-app client\\n\")), mdx(\"p\", null, \"After this step, make sure your root project looks like below with some extra files and folders.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*_JHQWIDI9FjHq-pr0k1x1Q.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We are going to bootstrap the server using Babel. To setup and learn what Babel is, please read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/how-to-use-import-statements-in-nodejs-94c85e23aeb7\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"The next step is to define the configuration you will need to proceed with server creation. Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server\"), \", create a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config/index.js\"), \" and define the following inside it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const config = {\\n  port: process.env.PORT || 4000,\\n  jwtSecret: process.env.JWT_SECRET || 'mkT23j#u!45',\\n  mongoURI: process.env.MONGODB_URI || 'mongodb://localhost/mern-auth'\\n}\\n\\nexport default config\\n\")), mdx(\"p\", null, \"For MongoDB, I am going to use a local instance. If you want to use a cloud service (free tier), please \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/how-to-deploy-a-mern-stack-app-on-heroku/\"\n  }), \"read the steps to set it up and consume in a Node server app here\"), \".\"), mdx(\"p\", null, \"Make sure add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev\"), \" script inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n    \\\"dev\\\": \\\"babel-watch index.js\\\"\\n}\\n\")), mdx(\"h3\", null, \"Connect Database and the\\xA0Server\"), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" directory, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbConnection.js\"), \". Let us start by defining the MongoDB connection.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import mongoose from 'mongoose'\\nimport config from './index'\\n\\nconst URI = config.mongoURI\\nmongoose.connect(URI)\\n\\n// When successfully connected\\nmongoose.connection.on('connected', () => {\\n  console.log('Established Mongoose Default Connection')\\n})\\n\\n// When connection throws an error\\nmongoose.connection.on('error', err => {\\n  console.log('Mongoose Default Connection Error : ' + err)\\n})\\n\")), mdx(\"p\", null, \"I am going to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mongoosejs.com/\"\n  }), \"Mongoose\"), \" as ODM (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Object Document Mapper\"), \"). This helps write queries inside the Node server and create business logic behind it. It also provides a schema-based solution to create data models and define them in our Node app.\"), mdx(\"p\", null, \"Although MongoDB is a schema-less database, Mongoose helps our application understand the data structure and organize it at the same time. The most basic benefit is to make a connection between the Express app when it bootstraps and the MongoDB instance on our local machine.\"), mdx(\"p\", null, \"Let\\u2019s create a small server in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file of the root of our web app. Here it is in action.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport cookieParser from 'cookie-parser'\\nimport config from './server/config'\\n\\n// DB connection\\nrequire('./server/config/dbConnection')\\n\\nconst app = express()\\n\\n// middleware functions\\napp.use(express.json())\\napp.use(express.urlencoded({ extended: true }))\\napp.use(cookieParser())\\n\\n// Error handling middleware\\napp.use((err, req, res, next) => {\\n  if (err.name === 'UnauthorizedError') {\\n    res.status(401).json({ error: err.name + ':' + err.message })\\n  }\\n})\\n\\napp.listen(config.port, () => {\\n  console.log(`\\uD83D\\uDE80 at port ${config.port}`)\\n})\\n\")), mdx(\"p\", null, \"If you are getting a message like below (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ignore the mongoose warning\"), \"), this means our server is up and running and successfully connected to the local instance of the database.\"), mdx(\"h3\", null, \"Building The User\\xA0Model\"), mdx(\"p\", null, \"To demonstrate, I am going to create a user data model with properties to save the user data when a new user registers with our application. We are going to save user credentials and validate it using Mongoose in this section. Create a new file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/models/user.js\"), \".\"), mdx(\"p\", null, \"We will start by importing the necessary dependencies at the top of our file and then create a new Mongoose Schema, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userSchema\"), \" which is an object with properties. Typically, NoSQL databases are super flexible, in that they allow us to put whatever we want in them without enforcing any specific kind of structure. However, Mongoose adds a layer of structure on top of the typical MongoDB way of doing things. This helps us perform additional validation to ensure that our users are not submitting any random data to our database without us having to write tons of boilerplate code ourselves.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import mongoose from 'mongoose'\\nimport crypto from 'crypto'\\nconst Schema = mongoose.Schema\\n\\nconst userSchema = new Schema({\\n  name: {\\n    type: String,\\n    trim: true,\\n    required: 'User Name is required'\\n  },\\n  email: {\\n    type: String,\\n    trim: true,\\n    unique: 'Email already exists',\\n    match: [/.+\\\\@.+\\\\..+/, 'Please fill a valid email address'],\\n    required: 'Email is required'\\n  },\\n  hashedPassword: {\\n    type: String,\\n    required: 'Password is required'\\n  },\\n  salt: {\\n    type: String\\n  }\\n})\\n\\nuserSchema\\n  .virtual('password')\\n  .set(function(password) {\\n    this._password = password\\n    this.salt = this.makeSalt()\\n    this.hashedPassword = this.encryptedPassword(password)\\n  })\\n  .get(function() {\\n    return this._password\\n  })\\n\\nuserSchema.methods = {\\n  authenticate: function(plainText) {\\n    return this.encryptedPassword(plainText) === this.hashedPassword\\n  },\\n  encryptedPassword: function(password) {\\n    if (!password) return ''\\n    try {\\n      return crypto\\n        .createHmac('sha1', this.salt)\\n        .update(password)\\n        .digest('hex')\\n    } catch (err) {\\n      return ''\\n    }\\n  },\\n  makeSalt: function() {\\n    return Math.round(new Date().valueOf() * Math.random()) + ''\\n  }\\n}\\n\\nuserSchema.path('hashedPassword').validate(function(v) {\\n  if (this.hashedPassword && this._password.length < 6) {\\n    this.invalidate('password', 'Password must be at least 6 characters long.')\\n  }\\n  if (this.isNew && !this._password) {\\n    this.invalidate('password', 'Password is required.')\\n  }\\n}, null)\\n\\nexport default mongoose.model('User', userSchema)\\n\")), mdx(\"p\", null, \"We now use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userSchema\"), \" object to add a virtual\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" field. Note that whatever property is described inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userSchema\"), \" object is going to be saved in the MongoDB document. We are not saving the password directly. We are creating a virtual field first to generate an encrypted hash of the password and then save it in our database.\"), mdx(\"p\", null, \"A virtual field is a document property that can be used to combine different fields or decompose a single value into multiple values for storage but never gets carried on inside the MongoDB database itself.\"), mdx(\"p\", null, \"Using the Nodejs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"crypto\"), \" module we are creating a hash that updates the virtual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \". The \\u2018salt\\u2019 field is a randomly generated string for each password. This terminology comes from cryptography. We are also putting in the logic of validating the password field and checking whether it is 6 characters long. Lastly, we export the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" model to be used with routes and controllers logic in our server.\"), mdx(\"h3\", null, \"User Routes\"), mdx(\"p\", null, \"Now, let\\u2019s write the business logic behind the routes to create for the React end to interact with the server. Create a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/controllers/user.js\"), \" and write the following code. Import the user model first that from the previous section.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import User from '../models/user'\\nimport errorHandler from '../helpers/dbErrorHandler'\\n\\nexport const registerUser = (req, res, next) => {\\n  const user = new User(req.body)\\n  user.save((err, result) => {\\n    if (err) {\\n      return res.status(400).json({\\n        error: errorHandler.getErrorMessage(err)\\n      })\\n    }\\n    res.status(200).json({\\n      message: 'New user registered successfully!'\\n    })\\n  })\\n}\\n\\nexport const findUserById = (req, res, next, id) => {\\n  User.findById(id).exec((err, user) => {\\n    if (err || !user) {\\n      return res.status(400).json({\\n        error: 'No user found with that credentials!'\\n      })\\n    }\\n    req.profile = user\\n    next()\\n  })\\n}\\n\\nexport const findUserProfile = (req, res) => {\\n  // eliminate password related fields before sending the user object\\n  req.profile.hashedPassword = undefined\\n  req.profile.salt = undefined\\n  return res.json(req.profile)\\n}\\n\\nexport const deleteUser = (req, res, next) => {\\n  let user = req.profile\\n  user.remove((err, deletedUser) => {\\n    if (err) {\\n      return res.status(400).json({\\n        error: errorHandler.getErrorMessage(err)\\n      })\\n    }\\n    deletedUser.hashedPassword = undefined\\n    user.salt = undefined\\n    res.json(user)\\n  })\\n}\\n\")), mdx(\"p\", null, \"I have also added a helper function inside a separate file at the location \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/helpers/dbErrorHandler.js\"), \" to gracefully handle any error that occurs in any of the routes like we are using in above and respond back with a meaningful message. You can download the file from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/amandeepmittal/56e30487a2782fa7f0209ab0f3cd518a\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"In the file above, we are creating three controller functions. The first one, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registerUser\"), \", creates a new user in the database from the JSON object received in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request from the client. The JSON object is received inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.body\"), \" that contains the user credentials we need to store in the database. Further, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.save\"), \", saves the new user in the database. Notice that we are not creating a unique field which is common in this type of scenarios to identify each new user saved in our database. This is because MongoDB database creates an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" field each time a new record is saved.\"), mdx(\"p\", null, \"The next function we are exporting is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findUserById\"), \". It queries the database to find the specific details related to the user whose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" is provided in parametric route (which I will define shortly). If a matching user is found with that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" in the database, then the user object is returned and appended inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.profile\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findUserProfile\"), \" controller function retrieves the user detail from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.profile\"), \" and removes any sensitive information such as password's hash and salt values before sending this user object to the client. The last function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteUser\"), \" removes the the user details from the database.\"), mdx(\"p\", null, \"Now let use the controller logic and add it to corresponding routes inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/routes/user.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport {\\n  registerUser,\\n  findUserById,\\n  findUserProfile,\\n  deleteUser\\n} from '../controllers/user'\\n\\nconst router = express.Router()\\n\\nrouter.route('/api/users').post(registerUser)\\n\\nrouter\\n  .route('/api/users/:userId')\\n  .get(findUserProfile)\\n  .delete(deleteUser)\\n\\nrouter.param('userId', findUserById)\\n\\nexport default router\\n\")), mdx(\"p\", null, \"The controller functions are first imported and then used with their corresponding route.\"), mdx(\"h3\", null, \"Auth Routes\"), mdx(\"p\", null, \"To restrict access to user operations\\u200A\\u2014\\u200Asuch as the logged in user can only access their profile and no one else\\u2019s\\u200A\\u2014\\u200Awe are going to implement a JWT authentication to protect the routes. The two routes required to sign in and sign out the user from our application are going to be inside a separate file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/routes/auth.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport { signin, signout } from '../controllers/auth'\\n\\nconst router = express.Router()\\n\\nrouter.route('/auth/signin').post(signin)\\n\\nrouter.route('/auth/signout').get(signout)\\n\\nexport default router\\n\")), mdx(\"p\", null, \"The first route uses an HTTP \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to authenticate a user with email and password credentials. The second route is used when the user hits the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"signout\"), \" button (which we will implement in our front-end). The logic behind how these two routes work has to be defined in another file. Create a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/controllers/auth.js\"), \" with the following code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import User from '../models/user'\\nimport jwt from 'jsonwebtoken'\\nimport expressJwt from 'express-jwt'\\nimport config from '../config'\\n\\nexport const signin = (req, res) => {\\n  User.findOne({ email: req.body.email }, (err, user) => {\\n    if (err || !user) {\\n      return res.status(401).json({\\n        error: 'User not found'\\n      })\\n    }\\n    if (!user.authenticate(req.body.password)) {\\n      return res.status(401).json({\\n        error: 'Wrong Email or Password!'\\n      })\\n    }\\n\\n    const token = jwt.sign(\\n      {\\n        _id: user._id\\n      },\\n      config.jwtSecret\\n    )\\n\\n    res.cookie('t', token, {\\n      expire: new Date() + 9999\\n    })\\n\\n    return res.json({\\n      token,\\n      user: { _id: user._id, name: user.name, email: user.email }\\n    })\\n  })\\n}\\n\\nexport const signout = (req, res) => {\\n  res.clearCookie('t')\\n  return res.status(200).json({\\n    message: 'Sign out successful!'\\n  })\\n}\\n\\nexport const requireSignin = expressJwt({\\n  secret: config.jwtSecret,\\n  userProperty: 'auth'\\n})\\n\\nexport const hasAuthorization = (req, res) => {\\n  const authorized = req.profile && req.auth && req.profile._id == req.auth._id\\n  if (!authorized) {\\n    return res.status(403).json({\\n      error: 'User is not authorized!'\\n    })\\n  }\\n}\\n\")), mdx(\"p\", null, \"I am using two JWT related packages from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" to enable authentication and protect our routes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express-jwt\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsonwebtoken\"), \". You already installed them when we bootstrapped this project. The first controller function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"signin\"), \" we are exporting receives user's credentials in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.body\"), \". Email is used to retrieve the matching user from the database. Remember, we have added a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unique\"), \" field when defining the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userSchema\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// model/user.js\\n    email: {\\n        type: String,\\n        trim: true,\\n        unique: 'Email already exists',\\n        match: [/.+\\\\@.+\\\\..+/, 'Please fill a valid email address'],\\n        required: 'Email is required'\\n  },\\n\")), mdx(\"p\", null, \"Since we are also receiving user\\u2019s password, we are going to verify it with the hash and the salt value that we stored in our database. The signed JWT is returned to the client to authenticate the user with their details if successful. We are using browser\\u2019s cookies here to store the JWT token. You can use the browser\\u2019s local storage for this purpose.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"signout\"), \" function above clears the cookie containing the signed JWT token. The last two functions are important for our application. Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requireSignin\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasAuthorization\"), \" are used to protect access to certain routes from an unauthorized user. They check and validate the user on client whether they are authenticated to give access.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requireSignin\"), \" method here verifies a valid JWT in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Authorization\"), \" header of the request. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasAuthorization\"), \" allows a user to operate protected routes by checking that the user who is sending the request is identical to the authenticated user. In our application we are going to use this on one protected route. We are going to delete the user profile and their data from the database in that route.\"), mdx(\"p\", null, \"Now let us use these methods to protect user routes. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server/routes/user.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport {\\n  registerUser,\\n  findUserById,\\n  findUserProfile,\\n  deleteUser\\n} from '../controllers/user'\\n\\n// import them to protect routes\\nimport { requireSignin, hasAuthorization } from '../controllers/auth'\\n\\nconst router = express.Router()\\n\\nrouter.route('/api/users').post(registerUser)\\n\\nrouter\\n  .route('/api/users/:userId')\\n  .get(requireSignin, findUserProfile)\\n  .delete(requireSignin, hasAuthorization, deleteUser)\\n\\nrouter.param('userId', findUserById)\\n\\nexport default router\\n\")), mdx(\"h3\", null, \"Finishing the\\xA0back-end\"), mdx(\"p\", null, \"With the routing logic set up, we can now complete the server by adding our routes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport cookieParser from 'cookie-parser'\\nimport config from './server/config'\\n// ADD these\\nimport userRoutes from './server/routes/user'\\nimport authRoutes from './server/routes/auth'\\n\\n// DB connection\\nrequire('./server/config/dbConnection')\\n\\nconst app = express()\\n\\n// middleware functions\\napp.use(express.json())\\napp.use(express.urlencoded({ extended: true }))\\napp.use(cookieParser())\\n\\n// ADD routes\\napp.use('/', userRoutes)\\napp.use('/', authRoutes)\\n\\napp.use((err, req, res, next) => {\\n  if (err.name === 'UnauthorizedError') {\\n    res.status(401).json({ error: err.name + ':' + err.message })\\n  }\\n})\\n\\napp.listen(config.port, () => {\\n  console.log(`\\uD83D\\uDE80 at port ${config.port}`)\\n})\\n\")), mdx(\"p\", null, \"To test these routes, open up a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/crowdbotics/building-a-rest-api-with-koajs-417c276929e2\"\n  }), \"REST\"), \" Client like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.getpostman.com/\"\n  }), \"Postman\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://insomnia.rest/\"\n  }), \"Insomnia\"), \" and the URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4000/api/users\"), \" with required fields in order to create a user.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*xPH-zPCYtLcp18FdUP8iHw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"If there are no errors, you are going to receive the message \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Successfully signed up!\"), \". This means the user has been added to the database. If you try to make a new user with same credentials, it will throw an error this time.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*X3DWS3U5S-iBlOfYfmZ0cw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"If you use a MongoDB Client to view the records of your local database like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mongodb.com/products/compass\"\n  }), \"Mongo Compass\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://robomongo.org/\"\n  }), \"Robomongo\"), \", you can easily see newly created user\\u2019s details.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*z2Gd9TSd6sDBaIFWGorcTQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Using the same user credentials, we will attempt a sign-in. It should give us a JWT back.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*6U2XmG6nC_9W1-JBRG284w.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"It works!\"), mdx(\"p\", null, \"Except for the sensitive information that we eliminated from the route, we are receiving back the token and a user object.\"), mdx(\"p\", null, \"Now let\\u2019s find the user profile. Hit the URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4000/api/users/{USER_ID}\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"USER_ID\"), \" is the same created by MongoDB database when adding the user record.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*eDWff4NSiZhwDQmvRSJmSQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"You have to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bearer\"), \" before signed JWT returned from the previous request at the Header \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Authorization\"), \". This completes our API testing and now we can focus on building the front-end of our application.\"), mdx(\"h3\", null, \"Adding Material UI in\\xA0React\"), mdx(\"p\", null, \"There are a series of steps to follow to add the Material UI Library to our react app. Traverse in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client\"), \" directory and follow the below steps. We are going to use Material Icons in SVG form, so let\\u2019s add that package.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# Open terminal and install the package\\nyarn add @material-ui/core @material-ui/icons\\n\")), mdx(\"p\", null, \"Material-UI uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Roboto\"), \" font and we have to add it through Google Font CDN to our client side. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/index.html\"), \" add the following. Let\\u2019s also change the title.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<head>\\n  <link rel=\\\"manifest\\\" href=\\\"%PUBLIC_URL%/manifest.json\\\" />\\n  <link\\n    rel=\\\"stylesheet\\\"\\n    href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\\\"\\n  />\\n  <title>MERN App</title>\\n</head>\\n\")), mdx(\"p\", null, \"To see if everything installed correctly and is working, run the client project using command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \". This will open the default React app that comes with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create-react-app\"), \" at URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000\"), \". To see our our assets (such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Roboto\"), \" font) being loaded, go to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Developer Tools\"), \" and open \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Network\"), \" tab. Refresh the page to reload the assets and you will notice that the font family is being loaded.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*_7ZRhHMJ3-hgT_FbtqrKpw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Defining the Home\\xA0Page\"), mdx(\"p\", null, \"Now let\\u2019s build the first component of our application. Create a new file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Home.js\"), \" and put the following content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport Card from '@material-ui/core/Card';\\nimport CardContent from '@material-ui/core/CardContent';\\nimport CardMedia from '@material-ui/core/CardMedia';\\nimport Typography from '@material-ui/core/Typography';\\nimport logo from '../logo.svg';\\n\\nconst styles = theme => ({\\n    card: {\\n        maxWidth: 700,\\n        margin: 'auto',\\n        marginTop: theme.spacing.unit * 5\\n    },\\n    title: {\\n        padding: `${theme.spacing.unit * 3}px ${theme.spacing.unit * 2.5}px ${theme\\n            .spacing.unit * 2}px`,\\n        color: theme.palette.text.secondary,\\n        fontSize: 24\\n    },\\n    media: {\\n        minHeight: 450\\n    }\\n});\\n\\nclass Home extends Component {\\n    render() {\\n        const { classes } = this.props;\\n        return (\\n            <div>\\n                <Card className={classes.card}>\\n                    <Typography type=\\\"headline\\\" component=\\\"h2\\\" className={classes.title}>\\n                        Welcome to the MERN APP\\n                    </Typography>\\n                    <CardMedia\\n                        className={classes.media}\\n                        image={logo}\\n                        title=\\\"Auth with MERN\\\"\\n                    />\\n                    <CardContent>\\n                        <Typography type=\\\"body1\\\" component=\\\"p\\\">\\n                            This is a demo application that uses a Node + MongoDB API for user\\n                            authentication. Built With React + Material UI.\\n                        </Typography>\\n                    </CardContent>\\n                </Card>\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default withStyles(styles)(Home);\\n\")), mdx(\"p\", null, \"The first component we are importing from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@material-ui\"), \" in this file is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withStyles\"), \". It allows us to style a component by declaring a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styles\"), \" object with access top-level styles such as we are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" with our home component. We will define these top-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" related styles shortly in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \". Next, we are importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card, CardContent, CardMedia\"), \" to create a card view. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CardMedia\"), \" is used to display any media file whereas \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CardContent\"), \" is used with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Typography\"), \" to output text. Typography is used to present hierarchy based styles over text to the content as clearly and efficiently as possible.\"), mdx(\"p\", null, \"Now open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" and add the following content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport green from '@material-ui/core/colors/green';\\nimport red from '@material-ui/core/colors/red';\\n\\nimport Home from './components/Home';\\n\\nconst theme = createMuiTheme({\\n    palette: {\\n        primary: {\\n            light: '#C8E6C9',\\n            main: '#4CAF50',\\n            dark: '#2E7D32',\\n            contrastText: '#fff'\\n        },\\n        secondary: {\\n            light: '#EF9A9A',\\n            main: '#F44336',\\n            dark: '#C62828',\\n            contrastText: '#000'\\n        },\\n        openTitle: green['400'],\\n        protectTitle: red['400'],\\n        type: 'dark'\\n    }\\n});\\n\\nclass App extends Component {\\n    render() {\\n        return (\\n            <MuiThemeProvider theme={theme}>\\n                <Home />\\n            </MuiThemeProvider>\\n        );\\n    }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MuiThemeProvider\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createMuiTheme\"), \" classes are used to create default theme. The theme specifies the color of the components, darkness of the surfaces, level of shadow, appropriate opacity of ink elements, and so on. If you wish to customize the theme, you need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MuiThemeProvider\"), \" component in order to inject a theme into your application. To configure a theme of your own, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createMuiTheme\"), \" is used. You can also make the theme dark by setting type to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dark\"), \" like we have done above. Lastly, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<MuiThemeProvider theme={theme}>\"), \" is where the top level styles are being passed to child components, in our case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \".\"), mdx(\"p\", null, \"If you render the app by running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \", you will get the below output.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*ccxb9zV_vqwALeW0ijWLyw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Adding React\\xA0Router\"), mdx(\"p\", null, \"We need a way to navigate different routes for the user to sign in and sign out. In this section, we will add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \" library to our app for this purpose.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add react-router react-router-dom\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \" library is a collection of navigational components. To get started, create a new file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport { Route, Switch } from 'react-router-dom';\\n\\nimport Home from './components/Home';\\n\\nclass Routes extends Component {\\n    render() {\\n        return (\\n            <Switch>\\n                <Route exact path=\\\"/\\\" component={Home} />\\n            </Switch>\\n        );\\n    }\\n}\\n\\nexport default Routes;\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Route\"), \" component is the main building block of React Router. Anywhere that you want to only render content based on the location\\u2019s pathname, you should use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Route\"), \" element. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Switch\"), \" is used to group different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Route\"), \" components. The route for the homepage, our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" component does include an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exact\"), \" prop. This is used to state that route should only match when the pathname matches the route\\u2019s path exactly. To use the newly created Routes, we have to make some changes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" to make it work.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\\nimport { createMuiTheme } from '@material-ui/core/styles';\\nimport green from '@material-ui/core/colors/green';\\nimport red from '@material-ui/core/colors/red';\\nimport { BrowserRouter } from 'react-router-dom';\\n\\nimport Routes from './Routes';\\n\\nconst theme = createMuiTheme({\\n    palette: {\\n        primary: {\\n            light: '#C8E6C9',\\n            main: '#4CAF50',\\n            dark: '#2E7D32',\\n            contrastText: '#fff'\\n        },\\n        secondary: {\\n            light: '#EF9A9A',\\n            main: '#F44336',\\n            dark: '#C62828',\\n            contrastText: '#000'\\n        },\\n        openTitle: green['400'],\\n        protectTitle: red['400'],\\n        type: 'dark'\\n    }\\n});\\n\\nclass App extends Component {\\n    render() {\\n        return (\\n            <BrowserRouter>\\n                <MuiThemeProvider theme={theme}>\\n                    <Routes />\\n                </MuiThemeProvider>\\n            </BrowserRouter>\\n        );\\n    }\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BrowserRouter\"), \" defined above is used when you have a server that will handle dynamic requests.\"), mdx(\"h3\", null, \"Connecting Node server and\\xA0React\"), mdx(\"p\", null, \"I wrote an article for Crowdbotics dealing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/how-to-set-up-a-node-backend-with-hapi-js-for-a-react-web-app/\"\n  }), \"how to connect a Node.js server with the React front end \", mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"here\")), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".\"), \" We do not need to review the whole process. Just open your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" and add the following for our app to kickstart.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"proxy\\\": \\\"http://localhost:4000/\\\"\\n\")), mdx(\"p\", null, \"Next, I am going to add methods to be used in different components that will handle API calls from our server side code. Create two new files inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"utils\"), \" directory: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api-auth.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api-user.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// api-user.js\\n\\nexport const registerUser = user => {\\n    return fetch('/api/users/', {\\n        method: 'POST',\\n        headers: {\\n            Accept: 'application/json',\\n            'Content-Type': 'application/json'\\n        },\\n        body: JSON.stringify(user)\\n    })\\n        .then(response => {\\n            return response.json();\\n        })\\n        .catch(err => console.log(err));\\n};\\n\\nexport const findUserProfile = (params, credentials) => {\\n    return fetch('/api/users/' + params.userId, {\\n        method: 'GET',\\n        headers: {\\n            Accept: 'application/json',\\n            'Content-Type': 'application/json',\\n            Authorization: 'Bearer ' + credentials.t\\n        }\\n    })\\n        .then(response => {\\n            return response.json();\\n        })\\n        .catch(err => console.error(err));\\n};\\n\\nexport const deleteUser = (params, credentials) => {\\n    return fetch('/api/users/' + params.userId, {\\n        method: 'DELETE',\\n        headers: {\\n            Accept: 'application/json',\\n            'Content-Type': 'application/json',\\n            Authorization: 'Bearer ' + credentials.t\\n        }\\n    })\\n        .then(response => {\\n            return response.json();\\n        })\\n        .catch(err => console.error(err));\\n};\\n\")), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api-auth.js\"), \", add the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// api-auth.js\\nexport const signin = user => {\\n    return fetch('/auth/signin/', {\\n        method: 'POST',\\n        headers: {\\n            Accept: 'application/json',\\n            'Content-Type': 'application/json'\\n        },\\n        credentials: 'include',\\n        body: JSON.stringify(user)\\n    })\\n        .then(response => {\\n            return response.json();\\n        })\\n        .catch(err => console.log(err));\\n};\\n\\nexport const signout = () => {\\n    return fetch('/auth/signout/', {\\n        method: 'GET'\\n    })\\n        .then(response => {\\n            return response.json();\\n        })\\n        .catch(err => console.log(err));\\n};\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"signin\"), \" method takes care of user credentials from the view component (which we will create shortly), then uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" to make a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" call to verify the user credentials with the backend. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"signout\"), \" method uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" to make a GET call to the sign-out API endpoint on the back-end.\"), mdx(\"h3\", null, \"Front-End: Auth Components\"), mdx(\"p\", null, \"Next, we will setup all the necessary components required for authentication.\"), mdx(\"p\", null, \"One by one, I am going to create new files so please follow closely.\"), mdx(\"p\", null, \"Create a new directory inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" and call it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth\"), \". Then, create a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth-helper.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { signout } from '../../utils/api-auth.js';\\n\\nconst auth = {\\n    isAuthenticated() {\\n        if (typeof window == 'undefined') return false;\\n\\n        if (sessionStorage.getItem('jwt'))\\n            return JSON.parse(sessionStorage.getItem('jwt'));\\n        else return false;\\n    },\\n    authenticate(jwt, cb) {\\n        if (typeof window !== 'undefined')\\n            sessionStorage.setItem('jwt', JSON.stringify(jwt));\\n        cb();\\n    },\\n    signout(cb) {\\n        if (typeof window !== 'undefined') sessionStorage.removeItem('jwt');\\n        cb();\\n        //optional\\n        signout().then(data => {\\n            document.cookie = 't=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\\n        });\\n    }\\n};\\n\\nexport default auth;\\n\")), mdx(\"p\", null, \"These functions will help us manage the state of authentication in the browser. Using these methods our client side app will be able to check whether the user has logged in or not. To protect the routes, such as a user\\u2019s profile, from un-authorized access, we have to define a new component inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrivateRoute.js\"), \" and make use of the methods above.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport { Route, Redirect } from 'react-router-dom';\\nimport auth from './auth-helper';\\n\\nconst PrivateRoute = ({ component: Component, ...rest }) => (\\n    <Route\\n        {...rest}\\n        render={props =>\\n            auth.isAuthenticated() ? (\\n                <Component {...props} />\\n            ) : (\\n                <Redirect\\n                    to={{\\n                        pathname: '/signin',\\n                        state: { from: props.location }\\n                    }}\\n                />\\n            )\\n        }\\n    />\\n);\\n\\nexport default PrivateRoute;\\n\")), mdx(\"p\", null, \"We are going to use this component as an auth flow in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.js\"), \" we have defined. Components that rendered via this route component will only load when the user is authenticated. Our last component related to user authentication is to be defined inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Signin.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport Card from '@material-ui/core/Card';\\nimport CardContent from '@material-ui/core/CardContent';\\nimport CardMedia from '@material-ui/core/CardMedia';\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\nimport Typography from '@material-ui/core/Typography';\\nimport Icon from '@material-ui/core/Icon';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport auth from './auth-helper';\\nimport { Redirect } from 'react-router-dom';\\nimport { signin } from '../../utils/api-auth.js';\\n\\nconst styles = theme => ({\\n    card: {\\n        maxWidth: 600,\\n        margin: 'auto',\\n        textAlign: 'center',\\n        marginTop: theme.spacing.unit * 5,\\n        paddingBottom: theme.spacing.unit * 2\\n    },\\n    error: {\\n        verticalAlign: 'middle'\\n    },\\n    title: {\\n        marginTop: theme.spacing.unit * 2,\\n        color: theme.palette.openTitle\\n    },\\n    textField: {\\n        marginLeft: theme.spacing.unit,\\n        marginRight: theme.spacing.unit,\\n        width: 300\\n    },\\n    submit: {\\n        margin: 'auto',\\n        marginBottom: theme.spacing.unit * 2\\n    }\\n});\\n\\nclass Signin extends Component {\\n    state = {\\n        email: '',\\n        password: '',\\n        error: '',\\n        redirectToReferrer: false\\n    };\\n\\n    clickSubmit = () => {\\n        const user = {\\n            email: this.state.email || undefined,\\n            password: this.state.password || undefined\\n        };\\n\\n        signin(user).then(data => {\\n            if (data.error) {\\n                this.setState({ error: data.error });\\n            } else {\\n                auth.authenticate(data, () => {\\n                    this.setState({ redirectToReferrer: true });\\n                });\\n            }\\n        });\\n    };\\n\\n    handleChange = name => event => {\\n        this.setState({ [name]: event.target.value });\\n    };\\n\\n    render() {\\n        const { classes } = this.props;\\n        const { from } = this.props.location.state || {\\n            from: {\\n                pathname: '/'\\n            }\\n        };\\n        const { redirectToReferrer } = this.state;\\n        if (redirectToReferrer) {\\n            return <Redirect to={from} />;\\n        }\\n\\n        return (\\n            <Card className={classes.card}>\\n                <CardContent>\\n                    <Typography type=\\\"headline\\\" component=\\\"h2\\\" className={classes.title}>\\n                        Sign In\\n                    </Typography>\\n                    <TextField\\n                        id=\\\"email\\\"\\n                        type=\\\"email\\\"\\n                        label=\\\"Email\\\"\\n                        className={classes.textField}\\n                        value={this.state.email}\\n                        onChange={this.handleChange('email')}\\n                        margin=\\\"normal\\\"\\n                    />\\n                    <br />\\n                    <TextField\\n                        id=\\\"password\\\"\\n                        type=\\\"password\\\"\\n                        label=\\\"Password\\\"\\n                        className={classes.textField}\\n                        value={this.state.password}\\n                        onChange={this.handleChange('password')}\\n                        margin=\\\"normal\\\"\\n                    />\\n                    <br />{' '}\\n                    {this.state.error && (\\n                        <Typography component=\\\"p\\\" color=\\\"error\\\">\\n                            <Icon color=\\\"error\\\" className={classes.error}>\\n                                error\\n                            </Icon>\\n                            {this.state.error}\\n                        </Typography>\\n                    )}\\n                </CardContent>\\n                <CardActions>\\n                    <Button\\n                        color=\\\"primary\\\"\\n                        variant=\\\"raised\\\"\\n                        onClick={this.clickSubmit}\\n                        className={classes.submit}\\n                    >\\n                        Submit\\n                    </Button>\\n                </CardActions>\\n            </Card>\\n        );\\n    }\\n}\\n\\nexport default withStyles(styles)(Signin);\\n\")), mdx(\"p\", null, \"This is a form component that contains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"email\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" field (\", \"_\", \"as we defined in state above) for the user to enter to get authenticated. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redirectToReferrer\"), \" property in state is what we are using if the user gets verified by the server or not. If the credentials entered by the user are valid, this property will trigger \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Redirect\"), \" component of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router-dom\"), \".\"), mdx(\"h3\", null, \"Front-End: User Components\"), mdx(\"p\", null, \"Similarly to our auth routes, we are going to separate our user components inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/user/\"), \" folder. First, we need a React component to register a new user. Create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Signup.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport Card from '@material-ui/core/Card';\\nimport CardContent from '@material-ui/core/CardContent';\\nimport CardActions from '@material-ui/core/CardActions';\\nimport Button from '@material-ui/core/Button';\\nimport TextField from '@material-ui/core/TextField';\\nimport Typography from '@material-ui/core/Typography';\\nimport Icon from '@material-ui/core/Icon';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport { Link } from 'react-router-dom';\\n\\nimport { registerUser } from '../../utils/api-user.js';\\n\\nconst styles = theme => ({\\n    card: {\\n        maxWidth: 600,\\n        margin: 'auto',\\n        textAlign: 'center',\\n        marginTop: theme.spacing.unit * 5,\\n        paddingBottom: theme.spacing.unit * 2\\n    },\\n    error: {\\n        verticalAlign: 'middle'\\n    },\\n    title: {\\n        marginTop: theme.spacing.unit * 2,\\n        color: theme.palette.openTitle\\n    },\\n    textField: {\\n        marginLeft: theme.spacing.unit,\\n        marginRight: theme.spacing.unit,\\n        width: 300\\n    },\\n    submit: {\\n        margin: 'auto',\\n        marginBottom: theme.spacing.unit * 2\\n    }\\n});\\n\\nclass Signup extends Component {\\n    state = {\\n        name: '',\\n        password: '',\\n        email: '',\\n        open: false,\\n        error: ''\\n    };\\n\\n    handleChange = name => event => {\\n        this.setState({ [name]: event.target.value });\\n    };\\n\\n    clickSubmit = () => {\\n        const user = {\\n            name: this.state.name || undefined,\\n            email: this.state.email || undefined,\\n            password: this.state.password || undefined\\n        };\\n        registerUser(user).then(data => {\\n            if (data.error) {\\n                this.setState({ error: data.error });\\n            } else {\\n                this.setState({ error: '', open: true });\\n            }\\n        });\\n    };\\n\\n    render() {\\n        const { classes } = this.props;\\n        return (\\n            <div>\\n                <Card className={classes.card}>\\n                    <CardContent>\\n                        <Typography\\n                            type=\\\"headline\\\"\\n                            component=\\\"h2\\\"\\n                            className={classes.title}\\n                        >\\n                            Sign Up\\n                        </Typography>\\n                        <TextField\\n                            id=\\\"name\\\"\\n                            label=\\\"Name\\\"\\n                            className={classes.textField}\\n                            value={this.state.name}\\n                            onChange={this.handleChange('name')}\\n                            margin=\\\"normal\\\"\\n                        />\\n                        <br />\\n                        <TextField\\n                            id=\\\"email\\\"\\n                            type=\\\"email\\\"\\n                            label=\\\"Email\\\"\\n                            className={classes.textField}\\n                            value={this.state.email}\\n                            onChange={this.handleChange('email')}\\n                            margin=\\\"normal\\\"\\n                        />\\n                        <br />\\n                        <TextField\\n                            id=\\\"password\\\"\\n                            type=\\\"password\\\"\\n                            label=\\\"Password\\\"\\n                            className={classes.textField}\\n                            value={this.state.password}\\n                            onChange={this.handleChange('password')}\\n                            margin=\\\"normal\\\"\\n                        />\\n                        <br />{' '}\\n                        {this.state.error && (\\n                            <Typography component=\\\"p\\\" color=\\\"error\\\">\\n                                <Icon color=\\\"error\\\" className={classes.error}>\\n                                    error\\n                                </Icon>\\n                                {this.state.error}\\n                            </Typography>\\n                        )}\\n                    </CardContent>\\n                    <CardActions>\\n                        <Button\\n                            color=\\\"primary\\\"\\n                            variant=\\\"raised\\\"\\n                            onClick={this.clickSubmit}\\n                            className={classes.submit}\\n                        >\\n                            Submit\\n                        </Button>\\n                    </CardActions>\\n                </Card>\\n                <Dialog open={this.state.open} disableBackdropClick={true}>\\n                    <DialogTitle>New Account</DialogTitle>\\n                    <DialogContent>\\n                        <DialogContentText>\\n                            New account successfully created.\\n                        </DialogContentText>\\n                    </DialogContent>\\n                    <DialogActions>\\n                        <Link to=\\\"/signin\\\">\\n                            <Button color=\\\"primary\\\" autoFocus=\\\"autoFocus\\\" variant=\\\"raised\\\">\\n                                Sign In\\n                            </Button>\\n                        </Link>\\n                    </DialogActions>\\n                </Dialog>\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default withStyles(styles)(Signup);\\n\")), mdx(\"p\", null, \"We start the component by declaring an empty state that contains various properties such as name, email, password and error. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" property is used to capture the state of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" box.\"), mdx(\"p\", null, \"In Material UI, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" is a type of modal window that appears in front of app content to provide critical information or ask for a decision. The modal in our case will either render an error message or the confirmation message depending on the status returned from the server.\"), mdx(\"p\", null, \"We are also defining two handler functions. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleChange\"), \" changes the new value of every input field entered. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clickSubmit\"), \" invokes when a user after entering their credentials, submit the registration form. This function calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"registerUser\"), \" from the API to send the data to the backend for further actions.\"), mdx(\"p\", null, \"Create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Profile.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport Paper from '@material-ui/core/Paper';\\nimport ListItem from '@material-ui/core/ListItem';\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\nimport ListItemText from '@material-ui/core/ListItemText';\\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\\nimport Avatar from '@material-ui/core/Avatar';\\nimport Typography from '@material-ui/core/Typography';\\nimport Person from '@material-ui/icons/Person';\\nimport Divider from '@material-ui/core/Divider';\\nimport auth from '../auth/auth-helper';\\nimport { findUserProfile } from '../../utils/api-user.js';\\nimport { Redirect, Link } from 'react-router-dom';\\n\\nimport DeleteUser from './DeleteUser';\\n\\nconst styles = theme => ({\\n    root: theme.mixins.gutters({\\n        maxWidth: 600,\\n        margin: 'auto',\\n        padding: theme.spacing.unit * 3,\\n        marginTop: theme.spacing.unit * 5\\n    }),\\n    title: {\\n        margin: `${theme.spacing.unit * 3}px 0 ${theme.spacing.unit * 2}px`,\\n        color: theme.palette.protectedTitle\\n    }\\n});\\n\\nclass Profile extends Component {\\n    constructor({ match }) {\\n        super();\\n        this.state = {\\n            user: '',\\n            redirectToSignin: false\\n        };\\n        this.match = match;\\n    }\\n    init = userId => {\\n        const jwt = auth.isAuthenticated();\\n        findUserProfile(\\n            {\\n                userId: userId\\n            },\\n            { t: jwt.token }\\n        ).then(data => {\\n            if (data.error) {\\n                this.setState({ redirectToSignin: true });\\n            } else {\\n                this.setState({ user: data });\\n            }\\n        });\\n    };\\n    componentWillReceiveProps = props => {\\n        this.init(props.match.params.userId);\\n    };\\n    componentDidMount = () => {\\n        this.init(this.match.params.userId);\\n    };\\n    render() {\\n        const { classes } = this.props;\\n        const redirectToSignin = this.state.redirectToSignin;\\n        if (redirectToSignin) {\\n            return <Redirect to=\\\"/signin\\\" />;\\n        }\\n        return (\\n            <Paper className={classes.root} elevation={4}>\\n                <Typography type=\\\"title\\\" className={classes.title}>\\n                    Profile\\n                </Typography>\\n                <List dense>\\n                    <ListItem>\\n                        <ListItemAvatar>\\n                            <Avatar>\\n                                <Person />\\n                            </Avatar>\\n                        </ListItemAvatar>\\n                        <ListItemText\\n                            primary={this.state.user.name}\\n                            secondary={this.state.user.email}\\n                        /> {auth.isAuthenticated().user &&\\n                            auth.isAuthenticated().user._id == this.state.user._id && (\\n                                <ListItemSecondaryAction>\\n                                    <DeleteUser userId={this.state.user._id} />\\n                                </ListItemSecondaryAction>\\n                            )}\\n                    </ListItem>\\n                    <Divider />\\n                </List>\\n            </Paper>\\n        );\\n    }\\n}\\n\\nexport default withStyles(styles)(Profile);\\n\")), mdx(\"p\", null, \"This component shows a single user who is authenticated by the back-end of our application. The profile information of each user is stored in the database. This is done by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init\"), \" function we have defined above the render function of our component.\"), mdx(\"p\", null, \"We are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redirectToSignin\"), \" redirect to the user on sign-out. We are also adding a delete profile button as a separate component which has to be defined in a separate file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeleteUser.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport Button from '@material-ui/core//Button';\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\nimport DialogActions from '@material-ui/core/DialogActions';\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\nimport DialogContent from '@material-ui/core/DialogContent';\\nimport Dialog from '@material-ui/core/Dialog';\\nimport Delete from '@material-ui/icons/Delete';\\nimport auth from '../auth/auth-helper';\\nimport { deleteUser } from '../../utils/api-user';\\nimport { Redirect, Link } from 'react-router-dom';\\n\\nclass DeleteUser extends Component {\\n    state = {\\n        redirect: false,\\n        open: false\\n    };\\n    clickButton = () => {\\n        this.setState({ open: true });\\n    };\\n    deleteAccount = () => {\\n        const jwt = auth.isAuthenticated();\\n        deleteUser(\\n            {\\n                userId: this.props.userId\\n            },\\n            { t: jwt.token }\\n        ).then(data => {\\n            if (data.error) {\\n                console.log(data.error);\\n            } else {\\n                auth.signout(() => console.log('deleted'));\\n                this.setState({ redirect: true });\\n            }\\n        });\\n    };\\n    handleRequestClose = () => {\\n        this.setState({ open: false });\\n    };\\n    render() {\\n        const redirect = this.state.redirect;\\n        if (redirect) {\\n            return <Redirect to=\\\"/\\\" />;\\n        }\\n        return (\\n            <span>\\n                <IconButton\\n                    aria-label=\\\"Delete\\\"\\n                    onClick={this.clickButton}\\n                    color=\\\"secondary\\\"\\n                >\\n                    <Delete />\\n                </IconButton>\\n\\n                <Dialog open={this.state.open} onClose={this.handleRequestClose}>\\n                    <DialogTitle>{'Delete Account'}</DialogTitle>\\n                    <DialogContent>\\n                        <DialogContentText>\\n                            Confirm to delete your account.\\n                        </DialogContentText>\\n                    </DialogContent>\\n                    <DialogActions>\\n                        <Button onClick={this.handleRequestClose} color=\\\"primary\\\">\\n                            Cancel\\n                        </Button>\\n                        <Button\\n                            onClick={this.deleteAccount}\\n                            color=\\\"secondary\\\"\\n                            autoFocus=\\\"autoFocus\\\"\\n                        >\\n                            Confirm\\n                        </Button>\\n                    </DialogActions>\\n                </Dialog>\\n            </span>\\n        );\\n    }\\n}\\n\\nexport default DeleteUser;\\n\")), mdx(\"p\", null, \"This component is used for deleting the user profile that exists in the database. It uses the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteUser\"), \" API endpoint we defined in our back-end. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteAccount\"), \" method is responsible for handling this task.\"), mdx(\"h3\", null, \"Front-End: Completing the\\xA0Navbar\"), mdx(\"p\", null, \"In this section we are going to complete our client side routes by leveraging a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Navbar\"), \" component. Create a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component/Navbar.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react';\\nimport AppBar from '@material-ui/core/AppBar';\\nimport Toolbar from '@material-ui/core/Toolbar';\\nimport Typography from '@material-ui/core/Typography';\\nimport IconButton from '@material-ui/core/IconButton';\\nimport Home from '@material-ui/icons/Home';\\nimport Button from '@material-ui/core/Button';\\nimport auth from './auth/auth-helper';\\nimport { Link, withRouter } from 'react-router-dom';\\n\\nconst isActive = (history, path) => {\\n    if (history.location.pathname == path) return { color: '#F44336' };\\n    else return { color: '#ffffff' };\\n};\\nconst Menu = withRouter(({ history }) => (\\n    <AppBar position=\\\"static\\\">\\n        <Toolbar>\\n            <Typography type=\\\"title\\\" color=\\\"inherit\\\">\\n                MERN App\\n            </Typography>\\n            <Link to=\\\"/\\\">\\n                <IconButton aria-label=\\\"Home\\\" style={isActive(history, '/')}>\\n                    <Home />\\n                </IconButton>\\n            </Link>\\n            {!auth.isAuthenticated() && (\\n                <span>\\n                    <Link to=\\\"/signup\\\">\\n                        <Button style={isActive(history, '/signup')}>Sign up</Button>\\n                    </Link>\\n                    <Link to=\\\"/signin\\\">\\n                        <Button style={isActive(history, '/signin')}>Sign In</Button>\\n                    </Link>\\n                </span>\\n            )}\\n            {auth.isAuthenticated() && (\\n                <span>\\n                    <Link to={'/user/' + auth.isAuthenticated().user._id}>\\n                        <Button\\n                            style={isActive(\\n                                history,\\n                                '/user/' + auth.isAuthenticated().user._id\\n                            )}\\n                        >\\n                            My Profile\\n                        </Button>\\n                    </Link>\\n                    <Button\\n                        color=\\\"inherit\\\"\\n                        onClick={() => {\\n                            auth.signout(() => history.push('/'));\\n                        }}\\n                    >\\n                        Sign out\\n                    </Button>\\n                </span>\\n            )}\\n        </Toolbar>\\n    </AppBar>\\n));\\n\\nexport default Menu;\\n\")), mdx(\"p\", null, \"This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Navbar\"), \" component will allow us to access routes as views on the front-end. From \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \" we are importing a High Order Component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withRouter\"), \" to get access to history object's properties and consume our front-end routes dynamically.\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-router\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth.isAuthenticated()\"), \" from our authentication flow, we are checking for whether the user has access to authenticated routes or not, that is, if they are logged in to our application or not.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isActive\"), \" highlights the view to which the current route is activated by the navigation component.\"), mdx(\"h3\", null, \"Running the Application\"), mdx(\"p\", null, \"The next step is to import this navigation component inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.js\"), \" and define other necessary routes we need in our app. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.js\"), \" and add the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react';\\nimport { Route, Switch } from 'react-router-dom';\\nimport Navbar from './components/Navbar';\\n\\nimport Home from './components/Home';\\nimport PrivateRoutes from './components/auth/PrivateRoutes';\\nimport Signin from './components/auth/Signin';\\nimport Profile from './components/user/Profile';\\nimport Signup from './components/user/Signup';\\n\\nclass Routes extends Component {\\n    render() {\\n        return (\\n            <div>\\n                <Navbar />\\n                <Switch>\\n                    <Route exact path=\\\"/\\\" component={Home} />\\n                    <PrivateRoutes path=\\\"/user/edit/:userId\\\" />\\n                    <Route path=\\\"/user/:userId\\\" component={Profile} />\\n                    <Route path=\\\"/signup\\\" component={Signup} />\\n                    <Route path=\\\"/signin\\\" component={Signin} />\\n                </Switch>\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default Routes;\\n\")), mdx(\"p\", null, \"After completing this test, let\\u2019s test our application. Make sure you are running the backend server using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nr dev\"), \" command in one tab in your terminal. Using another tab or window, traverse to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client\"), \" directory and run the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn start\"), \". Once the application starts, you will be welcomed by the Homepage, as below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*sl6_pEHr8QLBK3hi3V6tTg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Notice in the navbar above there are three buttons. The home icon is for Home page highlighted \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"red\"), \" in color. If you move on to the sign in page, you will see the sign in button highlighted. We already have one user registered to our application (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"when we were building the API\"), \"). Please enter the credentials (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"email:\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"mailto:jane@doe.com\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"jane@doe.com\")), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"password: pass1234 or the credentials you entered\"), \") as shown below and submit the form.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*N8oztui9YOVgyHAP1jUW0w.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"On submitting the form you will be redirected to the home page as per the component logic. The changes can be noticed at the navigation menu. Instead of sign-up and sign-in, you will see My Profile and Sign Out button. Click My Profile and you can see the current user\\u2019s details.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*-xTVUQbUhb6yJnZIIk6eHw.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"On clicking the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" icon it will delete the user. You can also try signing out of the application by clicking on the sign out button from navigation and then you will be redirected to the home page.\"), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"We have reached the end. Even though this tutorial is lengthy and, a lot is going on, I am sure if you take your time, you will understand the concepts and the logic behind it. It is after all, a full-stack MERN application. It uses JSON Web Tokens as an authentication strategy.\"), mdx(\"p\", null, \"If you want to learn \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"how to deploy this application, you can continue to read\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.crowdbotics.com/how-to-deploy-a-mern-stack-app-on-heroku/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"this article\")), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The complete code for the tutorial at \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/mern-material-demo\"\n  }), \"this Github repository\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/crowdbotics/building-a-mern-stack-app-with-material-ui-33ff8ca4da01\"\n  }), \"Originally published at Crowdbotics\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c4ffd878-6396-5131-82f0-71b436f6fc01","prev":{"id":"90fbac71-ea78-5b17-acf8-2810f97c6ee7","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"There are lots of quick and easy, no-code ways to get blog up and running — such as  Medium  or Wordpress — but, whether it’s to customize, monetize, add security, or just learn, today, I’ll show you how to code your own blog from scratch. When…","fields":{"title":"How To Build A Blog From Scratch With React, Markdown, GraphQL and GatsbyJS","slug":"how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown","date":"2018-11-21T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"920f71f8-e449-5c70-910e-0771398a98e9","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Serverless architecture is a cloud computing execution model where a cloud provider like AWS, Azure or Google Cloud is used to deploy backend or server-side code. In comparison to traditionally deployed web applications, in serverless architecture…","fields":{"title":"How to Build a Serverless Backend with AWS Lambda and Nodejs","slug":"how-to-build-a-serverless-backend-with-aws-lambda-and-nodejs","date":"2018-11-13T00:00:00.000Z"},"code":{"scope":""}}}}}