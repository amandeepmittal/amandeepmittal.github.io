{"componentChunkName":"component---src-templates-post-js","path":"/simple-recipe-to-build-a-theme-app-in-react-native","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Simple Recipe to Build a Theme App in React Native","date":"September 11, 2018","author":"Aman Mittal","banner":null,"slug":"simple-recipe-to-build-a-theme-app-in-react-native","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"simple-recipe-to-build-a-theme-app-in-react-native\",\n  \"date\": \"2018-09-11T00:00:00.000Z\",\n  \"title\": \"Simple Recipe to Build a Theme App in React Native\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*uu7osI-fsamG1ybgv25VAA.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Recently, I have been working on a React Native application that demands a changeable theme based on the user selection. I wanted to do this in a simplest way possible. I have so far avoided any React Native UI toolkit such as NativeBase or React Native Elements. In the article below, I am going to share with you all about this simple recipe.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is what we are building. By the end of this article you will have a similar looking React Native\\xA0project.\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*NK6OqE6SWsT3ibxXDhkx6g.gif\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Requirements\"), mdx(\"p\", null, \"You can either clone the application to see how it works from this Github repo here to see everything working properly. Or you can follow the article step by step. It is up to you. To start, generate a react native app using a generator of your choice. We have to choices:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-native cli\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"expo-cli/CRNA\")), mdx(\"p\", null, \"I will use expo-cli for the demo purposes but you can use CRNA(Create-React-Native-Project) if you want. We need to the following dependencies to be installed in our project before we start.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"redux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"redux-logger(optional, it will be better for you to debug in case anything goes wrong)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"react-navigation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"react-native-vector-icons (only install if you are using react-native-cli)\")), mdx(\"h3\", null, \"Getting Started: Navigation\"), mdx(\"p\", null, \"We need only two screen for the demonstration. I am going to call them \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Theme.js\"), \". Both are right now contain only boilerplate code. It is good for them to be dumb until we connect them using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \". Create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigation.js\"), \" and import both the components.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*hBNBbPck6EmD9Bq9NCAhzA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createStackNavigator\"), \" is the replacement to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StackNavigator\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" version 2+. Notice that, we are not passing a header to the Home Screen.\"), mdx(\"h3\", null, \"Creating a Store using\\xA0Redux\"), mdx(\"p\", null, \"Next step is to build a redux store that will make use of an action, action creator and reducer to change theme in our application. In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions.js\"), \" put the following code.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*T86eAgIOjKi5L0xyuqIxCA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We only have one action and changes the theme color of the app. Now the reducer:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*n6CqWVOCKJw0an8y2UeqkQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Notice that we are setting the primary color in the initial state as the hex value. You can also retrieve it from a configuration file or constants file in your application. We are also exporting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colors.js\"), \" file which contains three different hex code values that define different color schemes.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*bKG_BG6i7e7IvwT9p9zm5g.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Lastly, create the store and it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" for the application components to use it.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*EBI1jplYD7TB4oxkZMlp_A.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file we connect our Redux store to manage the state as well as navigation.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*4xA_ue2jr9WWItYKLQzCFA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"You might be wondering why the heck use a Redux Store for such a small application. Well, all I am trying to demonstrate is a pragmatic approach to build a them-able application using React Native and Redux. It is your choice to manage the state.\"), mdx(\"h3\", null, \"Finalizing the\\xA0App\"), mdx(\"p\", null, \"The last components of our React Native application from where the action happens are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Theme.js\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*P08ni2pglIDyhL0h8SIgbg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"By pressing the settings icon, we can navigate to the Themes screen to change background color of the Home screen. We are also passing the title of the Theme Screen here.\"), mdx(\"p\", null, \"The magic of changing the color is happening in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \" at this line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<View style={[styles.container, { backgroundColor: this.props.primaryColor }]}>\\n\")), mdx(\"p\", null, \"We are receiving the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"primaryColor\"), \" from the props. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Theme.js\"), \" file will be changing the value of this prop on selecting a viable option. Take a look below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*pqMt7rWFEqGI8H-Ml70rnQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"In above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleThemeChange\"), \" handles the dispatching of the only action we defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions.js\"), \". At last, we have our app working.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*NK6OqE6SWsT3ibxXDhkx6g.gif\",\n    \"alt\": null\n  }))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/hackernoon/simple-recipe-to-build-a-theme-app-in-react-native-8e2456f81bc5\"\n  }), \"Originally published at Hackernoon.com\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d6c2038b-e6e3-5be6-b78b-9abf3b8fb6c8","prev":{"id":"843c5b82-490b-566b-8dde-8ae8e2c80364","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In web, Geolocation is provided as an API that has different methods to use in a web application. Similarly, React Native takes advantage of this API and is available as polyfills. Geolocation is a must have feature to implement in a mobile app. Few…","fields":{"title":"Accessing Geo-location and App Permissions in React Native and Expo","slug":"accessing-geo-location-and-app-permissions-in-react-native-and-expo","date":"2018-09-20T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"0caf3b71-d6b7-5196-a613-b77f2eea80f2","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Redux is an important part of the React Native ecosystem. If your world revolves around JavaScript, you’ve probably heard about Redux. Before reading the rest of the tutorial and going further, just try to remember that you are only learning about…","fields":{"title":"How to integrate Redux into your application with React Native and Expo","slug":"how-to-integrate-redux-into-your-application-with-react-native-and-expo","date":"2018-08-10T00:00:00.000Z"},"code":{"scope":""}}}}}