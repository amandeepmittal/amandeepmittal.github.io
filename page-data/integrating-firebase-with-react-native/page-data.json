{"componentChunkName":"component---src-templates-post-js","path":"/integrating-firebase-with-react-native","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Integrating Firebase with React Native","date":"December 05, 2018","author":"Aman Mittal","banner":null,"slug":"integrating-firebase-with-react-native","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"integrating-firebase-with-react-native\",\n  \"date\": \"2018-12-05T00:00:00.000Z\",\n  \"title\": \"Integrating Firebase with React Native\",\n  \"categories\": [\"react native\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Integrating Firebase with React Native\"), mdx(\"p\", null, \"Firebase is a Backend as a Service (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"BaaS\"), \") that provides an advantage to mobile developers who use React Native for developing mobile applications. As a React Native developer, by using Firebase you can start building an MVP (minimum viable product), keeping the costs low and prototyping the application pretty fast. In this tutorial, we will be learning how to get started by integrating Firebase with a React Native application. We will also create a small application from scratch with the help of Firebase & React Native to see how they work together.\"), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://console.firebase.google.com/?pli=1\"\n  }), \"Firebase\"), \" is a platform that got acquired by Google and has a healthy and active community. Most users in this community are web and mobile developers as Firebase can help with mobile analytics, push notification, crash reporting and out of the box provides email as well as social authentication.\"), mdx(\"p\", null, \"To get started, you will need a target mobile OS, whether you choose to go with iOS or Android or both. Please refer to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/getting-started\"\n  }), \"React Native official documentation\"), \" if you are setting up React Native development environment for the first time. You will need sdk tools and Android Studio especially to setup a developer environment for Android. For iOS, you only need Xcode installed on your macOS. You will also need to have installed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://nodejs.org\"\n  }), \"Nodejs\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">= 8.x.x\"), \") and npm/yarn installed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/react-native-cli\"\n  }), \"react-native-cli\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">= 2.0.1\"), \")\")), mdx(\"p\", null, \"React Native is distributed as two npm packages, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \". We are going to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \" to generate an app. Begin by installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-cli\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -s react-native-cli\\n\")), mdx(\"p\", null, \"Now, let\\u2019s create a new React Native project called \\u201CrnFirebaseDemo\\u201D:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"react-native init rnFirebaseDemo\\n\")), mdx(\"p\", null, \"When the above command is done running, traverse into the project directory using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd rnFirebaseDemo\"), \". Now, let\\u2019s check if everything is working correctly and our React Native application has been properly initialized by running one of the following commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# on macOS\\nreact-native run-ios\\n\\n# For Windows/Unix users\\nreact-native run-android\\n\")), mdx(\"p\", null, \"This command will run the default screen as shown below in an iOS simulator or Android emulator but it will take a few moments since we are running it for the first time.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/mBobZpT.png\",\n    \"alt\": \"ss1\"\n  }))), mdx(\"h2\", null, \"Adding Firebase\"), mdx(\"p\", null, \"To add Firebase to our existing React Native application, we need to install the dependency.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add firebase\\n\")), mdx(\"p\", null, \"When we open the project in a code editor, its structure looks like this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/TdKzipp.png\",\n    \"alt\": \"ss2\"\n  }))), mdx(\"p\", null, \"We need to make some modifications before we can really start building our app. Create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory inside the root folder. This is where our app components and screens will live. Further, within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory, we will create two folders: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/N9m3Y83.png\",\n    \"alt\": \"ss3\"\n  }))), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen\"), \" directory will contain all the UI related components that we need to display to the end user, whereas the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" folder will contain any other component that will be used or re-used to display the user interface.\"), mdx(\"p\", null, \"Let us create our first screen, Home screen, inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screens/\"), \" with a new file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text } from 'react-native'\\n\\nexport default class Home extends Component {\\n  render() {\\n    return (\\n      <View>\\n        <Text>Home Screen</Text>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Our next screen is going to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Add Item\"), \". Create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddItem.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text } from 'react-native'\\n\\nexport default class AddItem extends Component {\\n  render() {\\n    return (\\n      <View>\\n        <Text>Add Item</Text>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Our last screen is going to be a List of items that we need to display. In the same directory, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text } from 'react-native'\\n\\nexport default class List extends Component {\\n  render() {\\n    return (\\n      <View>\\n        <Text>List</Text>\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Adding react-navigation\"), mdx(\"p\", null, \"To navigate between different screens, we need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library. We are going to use the latest version that is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.0.0\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add react-navigation\\n\")), mdx(\"p\", null, \"Next, we will install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native-gesture-handler\"), \". If you\\u2019re using Expo, you don\\u2019t need to do anything here.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"yarn add react-native-gesture-handler\\n\")), mdx(\"p\", null, \"The next step is clearly to run the command below and link the libraries we just installed:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"react-native link\\n\")), mdx(\"p\", null, \"After adding this package, let us run the build process again:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# on macOS\\nreact-native run-ios\\n\\n# For Windows/Unix users\\nreact-native run-android\\n\")), mdx(\"p\", null, \"Now, to see it in action, let us add the Home component as our first screen. Add the following code in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { createStackNavigator, createAppContainer } from 'react-navigation'\\nimport Home from './src/screens/Home'\\n\\n// we will use these two screens later in our AppNavigator\\nimport AddItem from './src/screens/AddItem'\\nimport List from './src/screens/List'\\n\\nconst AppNavigator = createStackNavigator({\\n  Home: {\\n    screen: Home\\n  }\\n})\\n\\nconst AppContainer = createAppContainer(AppNavigator)\\n\\nexport default class App extends Component {\\n  render() {\\n    return <AppContainer />\\n  }\\n}\\n\")), mdx(\"p\", null, \"At this stage, if we go to the simulator, we will see the following result:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/IMXVJ9n.png\",\n    \"alt\": \"ss4\"\n  }))), mdx(\"p\", null, \"The Home Screen is showing up. We will add two other screens as routes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppNavigator\"), \" in order to navigate to them through the Home Screen.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const AppNavigator = createStackNavigator(\\n  {\\n    Home,\\n    AddItem,\\n    List\\n  },\\n  {\\n    initialRouteName: 'Home'\\n  }\\n)\\n\")), mdx(\"p\", null, \"Now, our stack has three routes: a Home route, an AddItem route, and a ListItem route. The Home route corresponds to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" screen component, the AddItem corresponds to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddItem\"), \" screen and the ListItem route corresponds to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" component. The initial route for the stack is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home\"), \" route, this is defined if we have multiple screens and need to describe a starting point.\"), mdx(\"h2\", null, \"Navigating between the screens\"), mdx(\"p\", null, \"Previously, we defined a stack navigator with three routes but we didn't hook them up in order to navigate between them. Well, this is an easy task too. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" library provides us with a way to manage navigation from one screen to another and back. To make this work, we will modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Home.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { Button, View, Text } from 'react-native'\\n\\nexport default class Home extends Component {\\n  render() {\\n    return (\\n      <View>\\n        <Text>Home Screen</Text>\\n        <Button\\n          title=\\\"Add an Item\\\"\\n          onPress={() => this.props.navigation.navigate('AddItem')}\\n        />\\n        <Button\\n          title=\\\"List of Items\\\"\\n          color=\\\"green\\\"\\n          onPress={() => this.props.navigation.navigate('List')}\\n        />\\n      </View>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"In the code above, we are adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" component from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" API. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-navigation\"), \" passes a navigation prop in the form of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.props.navigation\"), \" to every screen in the stack navigator. We have to use the same screen name on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onPress\"), \" function to navigate as we defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppNavigator\"), \".\"), mdx(\"p\", null, \"You can also customize the back button manually with your own styling on both screens \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddItem\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" but, for our demonstration, we are going to use the default.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/oB1OSRS.gif\",\n    \"alt\": \"ss5\"\n  }))), mdx(\"h2\", null, \"Creating a Database with Firebase\"), mdx(\"p\", null, \"Go to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://firebase.google.com/\"\n  }), \"Firebase\"), \" Console, log in from your Google Account and a create a new project.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/kB6UcyI.png\",\n    \"alt\": \"ss6\"\n  }))), mdx(\"p\", null, \"We will then add the database configuration in a new file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/config.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import Firebase from 'firebase'\\nlet config = {\\n  apiKey: 'AIzaXXXXXXXXXXXXXXXXXXXXXXX',\\n  authDomain: 'rnfirebXXX-XXXX.firebaseapp.com',\\n  databaseURL: 'rnfirebXXX-XXXX.firebaseapp.com',\\n  projectId: 'rnfirebase-XXXX',\\n  storageBucket: 'rnfirebase-XXXX.appspot.com',\\n  messagingSenderId: 'XXXXXXX'\\n}\\nlet app = Firebase.initializeApp(config)\\nexport const db = app.database()\\n\")), mdx(\"p\", null, \"The config object is where you fill in the details you get after creating a new project in Firebase and going to the section \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add Firebase to your web app\"), \". Also in the Firebase console, from left sidebar, click on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Database\"), \" and then choose the first option: ((Realtime Database)). Then, go to \\u201Crules\\u201D and paste the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{ \\\"rules\\\": { \\\".read\\\": true, \\\".write\\\": true } }\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/JyNyFqS.png\",\n    \"alt\": \"ss7\"\n  }))), mdx(\"h2\", null, \"Adding Data from the App to Firebase\"), mdx(\"p\", null, \"In this section, we will edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddItem.js\"), \" which represents an input field and a button. The user can add a item to the list and it will get saved to Firebase data.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport {\\n  View,\\n  Text,\\n  TouchableHighlight,\\n  StyleSheet,\\n  TextInput,\\n  AlertIOS\\n} from 'react-native'\\n\\nimport { db } from '../config'\\n\\nlet addItem = item => {\\n  db.ref('/items').push({\\n    name: item\\n  })\\n}\\n\\nexport default class AddItem extends Component {\\n  state = {\\n    name: ''\\n  }\\n\\n  handleChange = e => {\\n    this.setState({\\n      name: e.nativeEvent.text\\n    })\\n  }\\n  handleSubmit = () => {\\n    addItem(this.state.name)\\n    AlertIOS.alert('Item saved successfully')\\n  }\\n\\n  render() {\\n    return (\\n      <View style={styles.main}>\\n        <Text style={styles.title}>Add Item</Text>\\n        <TextInput style={styles.itemInput} onChange={this.handleChange} />\\n        <TouchableHighlight\\n          style={styles.button}\\n          underlayColor=\\\"white\\\"\\n          onPress={this.handleSubmit}\\n        >\\n          <Text style={styles.buttonText}>Add</Text>\\n        </TouchableHighlight>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  main: {\\n    flex: 1,\\n    padding: 30,\\n    flexDirection: 'column',\\n    justifyContent: 'center',\\n    backgroundColor: '#6565fc'\\n  },\\n  title: {\\n    marginBottom: 20,\\n    fontSize: 25,\\n    textAlign: 'center'\\n  },\\n  itemInput: {\\n    height: 50,\\n    padding: 4,\\n    marginRight: 5,\\n    fontSize: 23,\\n    borderWidth: 1,\\n    borderColor: 'white',\\n    borderRadius: 8,\\n    color: 'white'\\n  },\\n  buttonText: {\\n    fontSize: 18,\\n    color: '#111',\\n    alignSelf: 'center'\\n  },\\n  button: {\\n    height: 45,\\n    flexDirection: 'row',\\n    backgroundColor: 'white',\\n    borderColor: 'white',\\n    borderWidth: 1,\\n    borderRadius: 8,\\n    marginBottom: 10,\\n    marginTop: 10,\\n    alignSelf: 'stretch',\\n    justifyContent: 'center'\\n  }\\n})\\n\")), mdx(\"p\", null, \"In the code above, we are adding a Firebase database instance from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.js\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" and then pushing any item that the user adds through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addItem\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleSubmit()\"), \". You will get an alert message when you press the button \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add\"), \" to add the item from the input value as shown below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://imgur.com/qi5UQec.gif\",\n    \"alt\": \"ss8\"\n  }))), mdx(\"p\", null, \"To verify that the data is there in the database, go to your Firebase console.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://i.imgur.com/KZDYCIo.png\"\n  }), \"ss9\")), mdx(\"h2\", null, \"Fetching Items from the Database\"), mdx(\"p\", null, \"To fetch data from the Firebase database, we are going to use the same reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\nimport ItemComponent from '../components/ItemComponent'\\n\\nimport { db } from '../config'\\n\\nlet itemsRef = db.ref('/items')\\n\\nexport default class List extends Component {\\n  state = {\\n    items: []\\n  }\\n\\n  componentDidMount() {\\n    itemsRef.on('value', snapshot => {\\n      let data = snapshot.val()\\n      let items = Object.values(data)\\n      this.setState({ items })\\n    })\\n  }\\n\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        {this.state.items.length > 0 ? (\\n          <ItemComponent items={this.state.items} />\\n        ) : (\\n          <Text>No items</Text>\\n        )}\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    justifyContent: 'center',\\n    backgroundColor: '#ebebeb'\\n  }\\n})\\n\")), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ItemComponent\"), \", we create a new file inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/ItemComponent.js\"), \". This is a non-screen component. Only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" will use it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" and display each item.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { Component } from 'react'\\nimport { View, Text, StyleSheet } from 'react-native'\\nimport PropTypes from 'prop-types'\\n\\nexport default class ItemComponent extends Component {\\n  static propTypes = {\\n    items: PropTypes.array.isRequired\\n  }\\n\\n  render() {\\n    return (\\n      <View style={styles.itemsList}>\\n        {this.props.items.map((item, index) => {\\n          return (\\n            <View key={index}>\\n              <Text style={styles.itemtext}>{item.name}</Text>\\n            </View>\\n          )\\n        })}\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  itemsList: {\\n    flex: 1,\\n    flexDirection: 'column',\\n    justifyContent: 'space-around'\\n  },\\n  itemtext: {\\n    fontSize: 24,\\n    fontWeight: 'bold',\\n    textAlign: 'center'\\n  }\\n})\\n\")), mdx(\"p\", null, \"This step concludes the integration of a Firebase database with our React Native app. You can now add the new data items and fetch them from the database as shown below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/0Nr4d4J.gif\",\n    \"alt\": \"ss9\"\n  }))), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"In this tutorial, we\\u2019ve shown you how to integrate Firebase with a React Native application. You don\\u2019t a complete server that creates an API and further uses a database to prototype or build an MVP of your application.\"), mdx(\"p\", null, \"You can find the complete code inside \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/rnFirebaseDemo\"\n  }), \"this Github repo\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.jscrambler.com/integrating-firebase-with-react-native/\"\n  }), \"Originally published at Jscrambler\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ee66339e-ea91-599c-95fa-b076ee1b4596","prev":{"id":"a52d5ed9-ac04-5de2-a17e-9dbe5eaec740","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"One of the most important aspects of being a Web Developer is to know how to work with APIs. Whether building your own application as a front-end or back-end engineer, you are going to come across them. APIs are the core communication system behind…","fields":{"title":"How To Build a REST API With Nodejs and PostgreSQL","slug":"how-to-build-a-rest-api-with-nodejs-and-postgresql","date":"2018-12-10T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"90fbac71-ea78-5b17-acf8-2810f97c6ee7","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"There are lots of quick and easy, no-code ways to get blog up and running — such as  Medium  or Wordpress — but, whether it’s to customize, monetize, add security, or just learn, today, I’ll show you how to code your own blog from scratch. When…","fields":{"title":"How To Build A Blog From Scratch With React, Markdown, GraphQL and GatsbyJS","slug":"how-to-build-your-own-blog-from-scratch-with-gatsbyjs-graphql-react-and-markdown","date":"2018-11-21T00:00:00.000Z"},"code":{"scope":""}}}}}