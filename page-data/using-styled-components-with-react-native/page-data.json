{"componentChunkName":"component---src-templates-post-js","path":"/using-styled-components-with-react-native","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Using Styled Components with React Native","date":"March 19, 2019","author":"Aman Mittal","banner":null,"slug":"using-styled-components-with-react-native","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"using-styled-components-with-react-native\",\n  \"date\": \"2019-03-19T00:00:00.000Z\",\n  \"title\": \"Using Styled Components with React Native\",\n  \"categories\": [\"react native\"],\n  \"description\": \"Learn how to use a styled-components in a React Native app by building a two column layout UI.\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*xXhYgNYm5WG5Z4VgMpu7Bg.jpeg\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Tldr;\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Introduction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"About styled-components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installing styled-components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using styled-components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"props\"), \" in styled-components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building the app\\u200A\\u2014\\u200A\\u201CGrocery UI\\u201D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding user avatar image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Absolute Positioning in React Native\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding icons in a React Native\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding horizontal \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ScrollView\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding a vertical \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ScrollView\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building a card component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conclusion\")), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"Whether you are a web developer or mobile app developer, you know that without the proper styling of your application, the UI would probably suck. Styling an application is important. I cannot put enough emphasis on how important it is for a mobile app to have a pleasing design and good use of colors.\"), mdx(\"p\", null, \"If you are getting into React Native or have already dipped your toes, you know that there are different ways you can style a React Native app. I have already discussed the basics and some of the different ways to style your React Native components in the article below. Such as, to create a new style object you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"**StyleSheet.create()**\"), \" method and encapsulating them. Go check it out \\uD83D\\uDC47\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0\",\n    \"title\": \"https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Styling The React Native Way\"), mdx(\"br\", {\n    parentName: \"a\"\n  }), \"_\", \"React Native comes with many in-built components that you can use to style the cross-platform application. Styling a\\u2026\", \"_\", \"levelup.gitconnected.com\"), mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0\"\n  }))), mdx(\"p\", null, \"This tutorial is going to be about styling your React Native apps using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.styled-components.com/docs/basics\",\n    \"title\": \"https://www.styled-components.com/docs/basics\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"\\uD83D\\uDC85 Styled Components\")), \". Yes, styled-components is a third party library. Using it is a matter of choice, but also another way to add styling to your app, and many might find it easy to use, especially if you have used this library before with other frameworks. One common use case is web apps built with React.\"), mdx(\"h3\", null, \"What are Styled Components?\"), mdx(\"p\", null, \"Styled Components is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS-in-JS\"), \" library that enables developers to write each component with their own styles and allows the code to be in a single location. By coupling your styles with the components, it results in optimizing developer experience and output.\"), mdx(\"p\", null, \"In React Native, the styling of components is already done by creating JavaScript objects and if you do not \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://levelup.gitconnected.com/styling-the-react-native-way-3cc6d3ef52d0\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"encapsulate them\")), \", in most cases, your components and their styling are going to end up in one place.\"), mdx(\"p\", null, \"React Native tends to follow a certain convention when it comes to styling your app. Such as all CSS property names should be in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \" such as for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \" in React Native is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"backgroundColor: 'blue'\\n\")), mdx(\"p\", null, \"Occasionally, web developers get uncomfortable by these conventions. Using a third party library like styled components can give you wings. You do not have to switch between the context of conventions much, apart from the properties and React Native\\u2019s own Flexbox rules.\"), mdx(\"p\", null, \"Behind the scenes, styled components just converts the CSS text into a React Native stylesheet object. You can check how it does that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/styled-components/css-to-react-native\",\n    \"title\": \"https://github.com/styled-components/css-to-react-native\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"here\")), mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Enough with story, let\\u2019s get to work!\")), mdx(\"h3\", null, \"Installing Styled Components\"), mdx(\"p\", null, \"To install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" library in a React Native project, we will first initialize the app. To get started quickly, I am going to use the awesome \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Expo\"), \" library. Make sure you have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expo-cli\"), \" installed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# To install expo-cli\\n\\nnpm install -S expo-cli\\n\\n# Generate a project\\n\\nexpo init [YourApp-Name]\\n\")), mdx(\"p\", null, \"When running the last command, the command line prompt will you a few questions. First one is, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Choose a template\"), \", where I chose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expo-template-blank\"), \", then enter display name of your app and then either use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" to install dependencies. I am using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \".\"), mdx(\"p\", null, \"Once all the dependencies are installed, you can open this project in your favorite code editor. The next step is to install the latest version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" library.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -S styled-components\\n\")), mdx(\"p\", null, \"That\\u2019s it for installation.\"), mdx(\"h3\", null, \"Using Styled Components\"), mdx(\"p\", null, \"Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file and make some modifications.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { StyleSheet, Text, View } from 'react-native'\\n\\nexport default class App extends React.Component {\\n  render() {\\n    return (\\n      <View style={styles.container}>\\n        <Text>Open up App.js to start working on your app!</Text>\\n      </View>\\n    )\\n  }\\n}\\n\\nconst styles = StyleSheet.create({\\n  container: {\\n    flex: 1,\\n    backgroundColor: '#fff',\\n    alignItems: 'center',\\n    justifyContent: 'center'\\n  }\\n})\\n\")), mdx(\"p\", null, \"From your terminal, run the command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run ios\"), \" if you are on macOS. For Linux and Windows users the command is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run android\"), \", but make sure you have an Android virtual device running in the background. Our code currently looks like below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*FJYy0ggO0KlAjamE81Z19w.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Let\\u2019s make some changes to it and use our newly installed library. To get started, import the library like below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import styled from 'styled-components'\\n\")), mdx(\"p\", null, \"Make changes to the component\\u2019s render function like below. Replace both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Title\"), \". These new elements are going to be custom using semantics from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"export default class App extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Title>React Native with \\uD83D\\uDC85 Styled Components</Title>\\n      </Container>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" utilizes tagged template literals to style your components using backticks. When creating a component in React or React Native using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \", each component is going to have styles attached to it.\"), mdx(\"p\", null, \"Notice the Container is a React Native \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" and has styling attached to it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Container = styled.View`\\n  flex: 1;\\n  background-color: papayawhip;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst Title = styled.Text`\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: palevioletred;\\n`\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*FJYy0ggO0KlAjamE81Z19w.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"The complete code for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file after changes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nexport default class App extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Title>React Native with \\uD83D\\uDC85 Styled Components</Title>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  background-color: papayawhip;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst Title = styled.Text`\\n  font-size: 24px;\\n  font-weight: 500;\\n  color: palevioletred;\\n`\\n\")), mdx(\"p\", null, \"In the above snippet, do take a note that we are not importing a React Native core components such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \", or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \" object. It is that simple. It uses the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexbox\"), \" model that React Native Layouts. The advantage here is that you get the advantage of using the same understandable syntax that you have been using in web development and standard CSS.\"), mdx(\"h3\", null, \"Using Props in Styled Components\"), mdx(\"p\", null, \"Often you will find yourself creating custom components for your apps. This does give you the advantage to stay DRY. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" is no different. You can leverage this programming pattern by building custom components that require their parent components. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" are commonly known as additional properties to a specific component. To demonstrate this, create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton.js\"), \".\"), mdx(\"p\", null, \"Inside this file, we are going to create a custom button that requires props such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backgroundColor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"textColor\"), \" and the text itself for the button. You are going to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TouchableOpacity\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" to create this custom button but without importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-native\"), \" library using a functional component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CustomButton\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nconst CustomButton = props => (\\n  <ButtonContainer\\n    onPress={() => alert('Hi!')}\\n    backgroundColor={props.backgroundColor}\\n  >\\n    <ButtonText textColor={props.textColor}>{props.text}</ButtonText>\\n  </ButtonContainer>\\n)\\n\\nexport default CustomButton\\n\\nconst ButtonContainer = styled.TouchableOpacity`\\n    width: 100px;\\n    height: 40px\\n    padding: 12px;\\n    border-radius: 10px;    \\n    background-color: ${props => props.backgroundColor};\\n`\\n\\nconst ButtonText = styled.Text`\\n  font-size: 15px;\\n  color: ${props => props.textColor};\\n  text-align: center;\\n`\\n\")), mdx(\"p\", null, \"By passing an interpolated function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${props => props...}\"), \" to a styled component's template literal you can extend its styles. Now add this button to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"render() {\\n        return (\\n            <Container>\\n                <Title>React Native with \\uD83D\\uDC85 Styled Components</Title>\\n                <CustomButton text=\\\"Click Me\\\" textColor=\\\"#01d1e5\\\" backgroundColor=\\\"lavenderblush\\\" />\\n            </Container>\\n        );\\n  }\\n\")), mdx(\"p\", null, \"On running the simulator, you will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*NtpTxTjtBxNl_IR4W-W7lA.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Building the app\\u200A\\u2014\\u200AGrocery\\xA0UI\"), mdx(\"p\", null, \"In this section we are building a UI screen for an app that would be used for a grocery store. You are going to build the home screen that looks like the one below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*qRd6EyuiB_nvs3jolhOCeA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"We will be using our knowledge of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" so let's get started! Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \". Declare a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled\"), \". Inside the backticks, you can put pure CSS code there with the exact same syntax. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" element is like a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" in HTML or web programming in general. Also, create another view called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Titlebar\"), \" inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \".\"), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Titlebar\"), \", it will contain three new elements. One is going to be an image \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" and the other two are text: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Title\"), \"and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Name\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nexport default class App extends React.Component {\\n  render() {\\n    return (\\n      <Container>\\n        <Titlebar>\\n          <Avatar />\\n          <Title>Welcome back,</Title>\\n          <Name>Aman</Name>\\n        </Titlebar>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst Container = styled.View`\\n  flex: 1;\\n  background-color: white;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\nconst Titlebar = styled.View`\\n  width: 100%;\\n  margin-top: 50px;\\n  padding-left: 80px;\\n`\\n\\nconst Avatar = styled.Image``\\n\\nconst Title = styled.Text`\\n  font-size: 20px;\\n  font-weight: 500;\\n  color: #b8bece;\\n`\\n\\nconst Name = styled.Text`\\n  font-size: 20px;\\n  color: #3c4560;\\n  font-weight: bold;\\n`\\n\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run ios\"), \" and see it in action.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*QWsjF7juUsD8wHsuD_4M-A.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Right now, the content is in the middle of the screen. We need the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Titlebar\"), \" and its contents at the top of the mobile screen. So styles for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" will be as below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Container = styled.View`\\n  flex: 1;\\n  background-color: white;\\n`\\n\")), mdx(\"h3\", null, \"Adding user avatar\\xA0image\"), mdx(\"p\", null, \"I am going to use an image that is stored in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assets\"), \" folder in the root of our project. You are free to use your own image but you can also download the assets for this project below.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets\",\n    \"title\": \"https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"amandeepmittal/react-native-workspace\"), \"_\", \"\\u269B\\uFE0F + \\uD83D\\uDCF1 React Native Things. Contribute to amandeepmittal/react-native-workspace development by creating an account on\\u2026\", \"_\", \"github.com\"), mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui/assets\"\n  }))), mdx(\"p\", null, \"To create an image with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \", you need the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component. You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" props to reference the image based on where it is located.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Titlebar>\\n  <Avatar source={require('./assets/avatar.jpg')} />\\n  <Title>Welcome back,</Title>\\n  <Name>Aman</Name>\\n</Titlebar>\\n\")), mdx(\"p\", null, \"The styling for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" will begin with a width and height of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"44\"), \" pixels. Having a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"border-radius\"), \" exactly half the value of width and height, which makes the image a circle. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"border-radius\"), \" is the property that you will be using frequently to create rounded corners.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Avatar = styled.Image`\\n  width: 44px;\\n  height: 44px;\\n  background: black;\\n  border-radius: 22px;\\n  margin-left: 20px;\\n`\\n\")), mdx(\"p\", null, \"You will get the following result.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*AR9C05E4OOHGmWVkrnxjVQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Now notice that the avatar image and the text are piling up. They are taking the same space on the screen. To avoid this, you are going to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: absolute\"), \" CSS property.\"), mdx(\"h3\", null, \"Absolute Positioning in React\\xA0Native\"), mdx(\"p\", null, \"CSS properties such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"padding\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"margin\"), \" are used to add space between UI elements in relation to one another. This is the default layout position. However, you are currently in a scenario where it will be beneficial to use absolute positioning of UI elements and place the desired UI element at the exact position you want.\"), mdx(\"p\", null, \"In React Native and CSS in general, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" property is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"absolute\"), \", then the element is laid out relative to its parent. CSS has other values for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" but React Native only supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"absolute\"), \".\"), mdx(\"p\", null, \"Modify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" styles as below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Avatar = styled.Image`\\n  width: 44px;\\n  height: 44px;\\n  background: black;\\n  border-radius: 22px;\\n  margin-left: 20px;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n`\\n\")), mdx(\"p\", null, \"Usually, with position absolute property, you are going to use a combination of the following properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"top\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"left\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"right\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bottom\")), mdx(\"p\", null, \"In our case above, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" both set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" pixels. You will get the following output.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*xuQEJUyE0rGBNCuzz14ajw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Adding icons in a React\\xA0Native\"), mdx(\"p\", null, \"Expo boilerplate comes with a set of different icon libraries such as Ionicons, FontAwesome, Glyphicons, Material icons and many more. The complete list of icons you can find \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://expo.github.io/vector-icons/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"here\")), \", a searchable website.\"), mdx(\"p\", null, \"To use the library, all you have to do is write the import statement.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Ionicons } from '@expo/vector-icons'\\n\")), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Titlebar\"), \" view, add the icon.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Titlebar>\\n  {/* ... */}\\n  <Ionicons name=\\\"md-cart\\\" size={32} color=\\\"red\\\" />\\n</Titlebar>\\n\")), mdx(\"p\", null, \"Each icon needs props for the name that you can choose, size and color. Right now, if you look at the simulator, you will notice the same problem we had when adding the avatar image. There is no space between the icon and other UI elements inside the title bar.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*k0ongnUA5ZLGzvK-QBDvXQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"To solve this, let us use the absolute positioning property as an inline style to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Ionicons />\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Ionicons\\n  name=\\\"md-cart\\\"\\n  size={32}\\n  color=\\\"red\\\"\\n  style={{ position: 'absolute', right: 20, top: 5 }}\\n/>\\n\")), mdx(\"p\", null, \"Why an inline style? Because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ionicons\"), \" is not generated using styled-components.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*EjxFzga9cQWUDNXesQ5KkA.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Mapping through a\\xA0List\"), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/\"), \" folder create a new file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Categories.js\"), \". This file is going to render a list of category items for the Grocery UI app.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nconst Categories = props => (\\n  <Container>\\n    <Name>Fruits</Name>\\n    <Name>Bread</Name>\\n    <Name>Drinks</Name>\\n    <Name>Veggies</Name>\\n  </Container>\\n)\\n\\nexport default Categories\\n\\nconst Container = styled.View``\\n\\nconst Name = styled.Text`\\n  font-size: 32px;\\n  font-weight: 600;\\n  margin-left: 15px;\\n  color: #bcbece;\\n`\\n\")), mdx(\"p\", null, \"All the data is static right now. Import this component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" and place it after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Titlebar\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import Categories from './components/Categories'\\n\\n// ...\\n\\nreturn (\\n  <Container>\\n    <Titlebar>{/* ... */}</Titlebar>\\n    <Categories />\\n  </Container>\\n)\\n\")), mdx(\"p\", null, \"You will get the following output.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*kkLH38JDwcNg6gNCBFs-eA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"There can be a number of categories. To make the names of categories dynamic, we can send it through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \"file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Items = [\\n  { text: 'Fruits' },\\n  { text: 'Bread' },\\n  { text: 'Drinks' },\\n  { text: 'Veggies' },\\n  { text: 'Meat' },\\n  { text: 'Paper Goods' }\\n]\\n\\n// Inside the render function replace <Categories /> with\\n\\n{\\n  items.map((category, index) => (\\n    <Categories name={category.text} key={index} />\\n  ))\\n}\\n\")), mdx(\"p\", null, \"In the above snippet, you are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" function from JavaScript to iterate through an array render a list of items, in this category names. Adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key\"), \" prop is required. To make this work, also modify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Categories.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Categories = props => <Name>{props.name}</Name>\\n\")), mdx(\"h3\", null, \"Adding Horizontal ScrollView\"), mdx(\"p\", null, \"This list is right now not scrollable. To make it scrollable, let us place it inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScrollView\"), \". Open up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file place the categories inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScrollView\"), \", but first, import it from React Native core.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { ScrollView } from 'react-native'\\n\\n// ...\\n;<ScrollView>\\n  {items.map((category, index) => (\\n    <Categories name={category.text} key={index} />\\n  ))}\\n</ScrollView>\\n\")), mdx(\"p\", null, \"You will notice not a single change in the UI. By default scrollable lists in React Native using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScrollView\"), \" are vertical. Make this horizontal by adding the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"horizontal\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<ScrollView horizontal={true}>\\n  {items.map((category, index) => (\\n    <Categories name={category.text} key={index} />\\n  ))}\\n</ScrollView>\\n\")), mdx(\"p\", null, \"It works but does not looks good.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*ynb8YhFnnn56-nLYqSPThg.gif\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Let us add some inline styles to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScrollView\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<ScrollView\\n  horizontal={true}\\n  style={{\\n    padding: 20,\\n    paddingLeft: 12,\\n    paddingTop: 30,\\n    flexDirection: 'row'\\n  }}\\n  showsHorizontalScrollIndicator={false}\\n>\\n  {items.map((category, index) => (\\n    <Categories name={category.text} key={index} />\\n  ))}\\n</ScrollView>\\n\")), mdx(\"p\", null, \"Now it looks better. The prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showsHorizontalScrollIndicator\"), \" hides the horizontal scroll bar that by default appears beneath the name of the categories.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*IYqopJpgJkPAyif2slhVEw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Adding a vertical ScrollView\"), mdx(\"p\", null, \"Next step is to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScrollView\"), \" that acts as a wrapper inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" view such that the whole area becomes scrollable vertically. There is a reason to do this. You are now going to have items separated into two columns as images with texts related to a particular category.\"), mdx(\"p\", null, \"Modify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"return (\\n  <Container>\\n    <ScrollView>\\n      <Titlebar>{/* and its contents */}</Titlebar>\\n      <ScrollView horizontal={true}>\\n        {/* Categories being rendered */}\\n      </ScrollView>\\n      <Subtitle>Items</Subtitle>\\n    </ScrollView>\\n  </Container>\\n)\\n\")), mdx(\"p\", null, \"Notice that we are adding another styled component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subtitle\"), \" which is nothing but a text.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Subtitle = styled.Text`\\n  font-size: 20px;\\n  color: #3c4560;\\n  font-weight: 500;\\n  margin-top: 10px;\\n  margin-left: 25px;\\n  text-transform: uppercase;\\n`\\n\")), mdx(\"p\", null, \"It renders like below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*X9Db80WNDFSLRVGC1sdkWw.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Building a card component\"), mdx(\"p\", null, \"In this section, we are going to create a card component that will hold an item\\u2019s image, the name of the item and the price as text. Each card component is going to have curved borders and box shadow. This is how it is going to look like.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*bNCJQ4koGEZVKtbGu6EeqA.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Create a new component file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card.js\"), \" inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" directory. The structure of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \" component is going to be.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport styled from 'styled-components'\\n\\nconst Card = props => (\\n  <Container>\\n    <Cover>\\n      <Image source={require('../assets/pepper.jpg')} />\\n    </Cover>\\n    <Content>\\n      <Title>Pepper</Title>\\n      <PriceCaption>$ 2.99 each</PriceCaption>\\n    </Content>\\n  </Container>\\n)\\n\\nexport default Card\\n\")), mdx(\"p\", null, \"Currently, it has static data, such as the image, title, and content. Let us add the styles for each styled UI elements in this file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Container = styled.View`\\n  background: #fff;\\n  height: 200px;\\n  width: 150px;\\n  border-radius: 14px;\\n  margin: 18px;\\n  margin-top: 20px;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);\\n`\\n\\nconst Cover = styled.View`\\n  width: 100%;\\n  height: 120px;\\n  border-top-left-radius: 14px;\\n  border-top-right-radius: 14px;\\n  overflow: hidden;\\n`\\n\\nconst Image = styled.Image`\\n  width: 100%;\\n  height: 100%;\\n`\\n\\nconst Content = styled.View`\\n  padding-top: 10px;\\n  flex-direction: column;\\n  align-items: center;\\n  height: 60px;\\n`\\n\\nconst Title = styled.Text`\\n  color: #3c4560;\\n  font-size: 20px;\\n  font-weight: 600;\\n`\\n\\nconst PriceCaption = styled.Text`\\n  color: #b8b3c3;\\n  font-size: 15px;\\n  font-weight: 600;\\n  margin-top: 4px;\\n`\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" view has a default background of white color. This is useful in scenarios where you are fetching images from a third party APIs. Also, it provides a background to the text area below the image.\"), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Container\"), \" view, add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" and wrap it inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cover\"), \" view. In React Native there two ways you can fetch an image\"), mdx(\"p\", null, \"If you are getting an image from the static resource as in our case, you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" prop with keyword \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" that contains the relative path to the image asset stored in the project folder. In case of networking images or getting an image from an API, you use the same prop with a different keyword called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"uri\"), \". Here is an example of an image being fetched from an API.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Image\\n  source={{\\n    uri: 'https://facebook.github.io/react-native/docs/assets/favicon.png'\\n  }}\\n/>\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cover\"), \" view uses rounded corners with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow\"), \" property. This is done to reflect the rounded corners. iOS clips the images if coming from a child component. In our case, the image is coming from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \" component which is a child to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component takes the width and height of the entire \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cover\"), \" view.\"), mdx(\"p\", null, \"Now let us import this component inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file, after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subtitle\"), \" and let us see what results do we get.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"render() {\\n    return (\\n    <Container>\\n        <ScrollView>\\n        {/* ... */}\\n        <Subtitle>Items</Subtitle>\\n            <ItemsLayout>\\n                <ColumnOne>\\n                    <Card />\\n                </ColumnOne>\\n                <ColumnTwo>\\n                    <Card />\\n                </ColumnTwo>\\n            </ItemsLayout>\\n        </ScrollView>\\n    </Container>\\n    )\\n}\\n\\n// ...\\n\\nconst ItemsLayout = styled.View`\\n    flex-direction: row;\\n    flex: 1;\\n`;\\n\\nconst ColumnOne = styled.View``;\\n\\nconst ColumnTwo = styled.View``;\\n\")), mdx(\"p\", null, \"After \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subtitle\"), \"add a new view called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ItemsLayout\"), \". This is going to be a layout that allows different cards to be divided between two columns in each row. This can be done by giving this view a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-direction\"), \" property of value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"row\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColumnOne\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColumnTwo\"), \" are two empty views.\"), mdx(\"p\", null, \"On rendering the screen of the simulator, looks like below.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*qRd6EyuiB_nvs3jolhOCeA.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Have you tried styled-components with React Native before? If not, are you going to try it now in your next project? Do comment below if you do or do not find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" a comfortable way to use in your React Native applications. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You can extend this application too! Let your imagination wander.\"), \" You are welcome to submit a PR if you decide to do so.\"), mdx(\"p\", null, \"You can find the complete code for this article in the Github repo \\uD83D\\uDC47\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/react-native-workspace/tree/master/03-RNgrocery-ui\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"amandeepmittal/react-native-workspace\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://levelup.gitconnected.com/using-styled-components-with-react-native-de645fcf4787\"\n  }), \"Originally published at Level up coding\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3a771476-8738-5d8d-9179-4de11c049d38","prev":{"id":"cf6e1e02-a6c4-5eb1-8b24-a118c7b2dc3c","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Google Vision API is a great way to add image recognition capabilities to your app. It does a great job detecting a variety of categories such as labels, popular logos, faces, landmarks, and text. You can think of Google Vision API as a Google Image…","fields":{"title":"How to Build a Real Time Logo Detection App with React Native, Google Vision API and Crowdbotics","slug":"how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics","date":"2019-03-20T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"36c64d97-0eb4-5f4d-bbe4-a350c36d419a","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"React  16.8  welcomed the dawn of  Hooks . This new addition is both a new concept and pragmatic approach that helps you use state and lifecycle methods behavior in functional React components, that is, without writing a class. The intention to…","fields":{"title":"React Hooks Basics — Building a React Native App with React Hooks","slug":"build-a-react-native-app-with-react-hooks","date":"2019-03-19T00:00:00.000Z"},"code":{"scope":""}}}}}