{"componentChunkName":"component---src-templates-post-js","path":"/how-to-use-import-statements-in-nodejs","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"How to use Import statements in Nodejs","date":"November 01, 2018","author":"Aman Mittal","banner":null,"slug":"how-to-use-import-statements-in-nodejs","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"how-to-use-import-statements-in-nodejs\",\n  \"date\": \"2018-11-01T00:00:00.000Z\",\n  \"title\": \"How to use Import statements in Nodejs\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"Setup Babel in a Node project with bare-minimum configuration\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/1200/0*zd7GbV_is43HsOpU\",\n    \"alt\": \"“handheld tool lot” by [Cesar Carlevarino Aragon](https://unsplash.com/@carlevarino?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)\"\n  })), \"\\n\\u201Chandheld tool lot\\u201D by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://unsplash.com/@carlevarino?utm_source=medium&utm_medium=referral\"\n  }), \"Cesar Carlevarino Aragon\"), \" on\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://unsplash.com?utm_source=medium&utm_medium=referral\"\n  }), \"Unsplash\")), mdx(\"p\", null, \"I don\\u2019t always like to try different versions of setting up a Nodejs application. Don\\u2019t get me wrong\\u200A\\u2014\\u200AI believe in experimenting with one\\u2019s set up, which can lead to learning new things. But there is a limit. Recently, I find myself more often going to set up a Nodejs server to develop a RESTful API. Furthermore, the server has to work with the client in a way that the client can consume the API easily. For the client-side development, I am using ReactJS.\"), mdx(\"p\", null, \"With the context switching between the client and the server I often find myself making errors during the process. One of the most common is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statements in Nodejs files. This leads to a syntax error called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Unexpected identifier\"), \". Even after switching to Nodejs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v10\"), \" LTS on my local machine, I find the lack of using ES6 modules rather disappointing.\"), mdx(\"p\", null, \"To overcome this problem, and reduce the number of errors I cause during development, I read a few tutorials but decided to mesh a setup of my own. These tutorials, though well written, use methods that are almost completely opposite to one another. I want consistency when working on full-stack applications for my day job.\"), mdx(\"p\", null, \"As a result, I m going to show you a streamlined, less time-consuming version of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statements in a Nodejs server-side application. To continue to read this article, please make sure you have following applications installed on your local machine:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nodejs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm\")), mdx(\"h3\", null, \"Getting Started With a Mock\\xA0Project\"), mdx(\"p\", null, \"I call it a mock project because I am going to start from scratch to build this setup. At the end of this tutorial, I will leave a link to a Github repository that can serve as a starter kit to many of your Nodejs plus Express projects. You can skip to the link part and DIY\\u200A\\u2014\\u200Athere\\u2019s no complexity here. If you\\u2019re still curious, continue to read this short piece.\"), mdx(\"p\", null, \"To start, create a new directory, traverse inside it and initialize it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir node-babel-setup\\nnpm init -y\\n\")), mdx(\"p\", null, \"You can check out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file after initializing your project as an npm project. It will be filled with details that you have used to configure npm.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"name\\\": \\\"node-babel-setup\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"keywords\\\": [],\\n  \\\"author\\\": \\\"Aman Mittal <amandeepmittal@live.com> (www.amanhimself.me)\\\",\\n  \\\"license\\\": \\\"MIT\\\"\\n}\\n\")), mdx(\"p\", null, \"Next, create a new file with the following command from your terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"touch index.js\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*cToGazhSQLTx3oIwsJULPQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"That\\u2019s all we need to set up a bare minimum project directory. In the next section, we take a look at what dependencies we have to install and why we need those dependencies.\"), mdx(\"h3\", null, \"Creating the Node\\xA0Server\"), mdx(\"p\", null, \"To create a server I am going to use Express. To include Express in our project as a dependency, run the following command from your terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -S express\\n\")), mdx(\"p\", null, \"Next, append the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" file with the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const express = require('express')\\n\\nconst app = express()\\nconst PORT = process.env.PORT || 3000\\n\\napp.get('/', (req, res) => {\\n  res.send('Hello from Nodejs!')\\n})\\n\\napp.listen(PORT, () => {\\n  console.log(`\\uD83D\\uDE80 at port ${PORT}`)\\n})\\n\")), mdx(\"p\", null, \"You can run the server by running the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node index.js\"), \". Visit URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000/\"), \" and you\\u2019ll see a message displayed in the browser window: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello from Nodejs!\"), \".\"), mdx(\"p\", null, \"This indicates that the code for the server is fine. Now modify the first line of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\n\")), mdx(\"p\", null, \"Run the same command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node index.js\"), \" and stay at the terminal window. This time the server does not start as there is an error in the process. It\\u2019s the same error I told you about at the start of this article. Nodejs cannot execute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statements by default.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*itCGCm0lnbBG94KS6D0bOg.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Using Babel\"), mdx(\"p\", null, \"All we need is a transpiler, which allows us to write JavaScript using ES6 features such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statements in our Nodejs project. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"What\\u2019s a transpiler?\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Transpilers are also known as source-to-source compilers that read code from source written in one programming language and produce an equivalent code in another language.\")), mdx(\"p\", null, \"In our case we\\u2019re not switching programming languages, rather we need to use new language features that are not yet supported by the LTS version of Node. I\\u2019m going to set up Babel compiler and enable it in our project by going through the following configuration process:\"), mdx(\"p\", null, \"First, you will have to install few dependencies. Do mind -D flag as we only need these dependencies for our development environment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"npm install -D babel-cli babel-preset-env babel-watch\\n\")), mdx(\"p\", null, \"Once you have installed them, add a\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".babelrc\"), \" file to the root of the project and add the following config:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"presets\\\": [\\\"env\\\"]\\n}\\n\")), mdx(\"p\", null, \"The last step in the configuration process is to add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev\"), \" script in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \". You can name this script whatever you like. This will take care of running the babel compiler on its own (automate) once there is a change. This done by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel-watch\"), \" that also takes care of re-starting Nodejs web server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n  \\\"dev\\\": \\\"babel-watch index.js\\\",\\n}\\n\")), mdx(\"p\", null, \"To see it action make sure the following code to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statement like below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\n\\nconst app = express()\\nconst PORT = process.env.PORT || 3000\\n\\napp.get('/', (req, res) => {\\n  res.send('Hello!')\\n})\\n\\napp.listen(PORT, () => {\\n  console.log(`\\uD83D\\uDE80 at port ${PORT}`)\\n})\\n\")), mdx(\"p\", null, \"From terminal write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nr dev\"), \". If there are no errors, you\\u2019ll get the following:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/800/1*Rz9TPPfk6B4p4NPTntXKvg.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nr\"), \" is shorthand for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run\"), \". You can also visit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost3000/\"), \" in your browser to verify the result and see if the server is working or not.\"), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"This article has shown you how to create a bare minimum Node server from scratch, and how you can introduce upcoming JavaScript features in your Node.js environment using Babel. I\\u2019m sure now you are not going to make the same silly errors like me in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Nodejs\"), \" + \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"insert a frontend framework/library of your choice\"), \" as I did.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You can find the complete source code for the above article at\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amandeepmittal/node-babel-setup\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Github Repo\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/better-programming/how-to-use-import-statements-in-nodejs-94c85e23aeb7\"\n  }), \"Originally published at Better Programming\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"996ee04e-1df9-5d0b-bb67-585528c7ecb3","prev":{"id":"b2a4ad4f-c771-55db-83c3-3528d9298add","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"When it comes to network requests between a client and a server application, REST (which stands for  Representational state transfer ) is one of the most popular choices for connecting the two. In the world of  REST APIs , everything revolves around…","fields":{"title":"Creating a GraphQL server with NodeJS","slug":"creating-a-graphql-server-with-nodejs","date":"2018-11-05T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"2d831003-5aff-5ac0-a52f-eca2275559b8","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In this tutorial, I will show you step by step how to build a  Progressive Web Application  using  Angular . A Progressive Web Application is a performance focused web application that is streamlined for a mobile device. A PWA can be saved over a…","fields":{"title":"Learn to Build a Simple Progressive Web App (PWA) with Angular and Lighthouse — Hacker News Clone","slug":"learn-to-build-a-simple-progressive-web-app-pwa-with-angular","date":"2018-10-24T00:00:00.000Z"},"code":{"scope":""}}}}}