{"componentChunkName":"component---src-templates-post-js","path":"/tips-for-creating-node-js-rest-apis","webpackCompilationHash":"c3a562291cd8e443a353","result":{"data":{"site":{"siteMetadata":{"title":"Aman Mittal - Fullstack Developer","description":"Aman Mittal - Developer and Technical writer.","author":{"name":"Aman Mittal"},"keywords":["Fullstack Developer"]}},"mdx":{"frontmatter":{"title":"Tips for Creating Nodejs REST APIs","date":"November 22, 2017","author":"Aman Mittal","banner":null,"slug":"tips-for-creating-node-js-rest-apis","keywords":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"tips-for-creating-node-js-rest-apis\",\n  \"date\": \"2017-11-22T00:00:00.000Z\",\n  \"title\": \"Tips for Creating Nodejs REST APIs\",\n  \"categories\": [\"nodejs\"],\n  \"description\": \"---\",\n  \"published\": true,\n  \"author\": \"Aman Mittal\",\n  \"banner\": null\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2560/1*aeWo6e6FC8InJwBl3TmpDw.jpeg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"In this article, I am going to offer you some tips for writing REST APIs in Nodejs for a production level application. Writing RESTful APIs with Nodejs is one of the most popular use case using the JavaScript server side platform.\"), mdx(\"h3\", null, \"Use HTTP\\xA0Methods\"), mdx(\"p\", null, \"CRUD operations are basis of any API. In most applications you will be either:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating new records\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Display them on a front end client aka reading a record from the database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Updating an existing record\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or deleting an existing record\")), mdx(\"p\", null, \"Record here stands for anything that goes into the database. Afterall, an API is just way a to communicate from the user interface to database.\"), mdx(\"p\", null, \"To develop an API that consist of CRUD operations, you must consider using correct HTTP method with the suitable endpoint:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"POST /record\"), \" for creating a new record\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PUT\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PATCH /record/:id\"), \" for updating an existing record\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /record/:id\"), \" getting a single record\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /record\"), \" getting a list of all records\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DELETE /record/:id\"), \" deleting a single existing record\")), mdx(\"h3\", null, \"Use HTTP response status\\xA0codes\"), mdx(\"p\", null, \"You must consider using an HTTP status code if anything fails when serving a request.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2xx\"), \" if everything works fine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3xx\"), \" if record was moved\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"4xx\"), \" request fails due to client error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"5xx\"), \" request fails due to server error (or API)\")), mdx(\"p\", null, \"You can refer to either of these links for a detailed error code and message along with it.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.restapitutorial.com/httpstatuscodes.html\"\n  }), \"HTTP Status Codes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\n  }), \"Mozilla HTTP Response Status Codes\"))), mdx(\"p\", null, \"If using Express, most commonly framework used with Nodejs to create APIs, consider writing your code in this format:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// in case 5xx\\nres.status(500).send({ error: 'Internal Server Error.' })\\n\\n// in case 4xx, unauthorized\\nres.status(401).send({ error: 'Unauthorized. Please check.' })\\n\")), mdx(\"h3\", null, \"Consider Creating an API Documentation\"), mdx(\"p\", null, \"Working as a team or even if individual and having a documented API, in the end will benefit all. Following open-source API documentation projects can help in this case:\"), mdx(\"h3\", null, \"Avail options for building APIs in\\xA0Nodejs\"), mdx(\"p\", null, \"There are quite a number of frameworks that you can choose from to build your next RESTful API with Nodejs.\"), mdx(\"p\", null, \"Express, Koa, Hapi all can be used for creating browser based applications but Restify allows you to focus on building a RESTful service.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codeburst.io/tips-for-creating-node-js-rest-apis-dfa0b2adb39c\"\n  }), \"Originally Published at Codeburst.io\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f19bfc6f-1c04-52b3-b637-3ba2eacc772e","prev":{"id":"d56f37bd-d016-5d25-b83d-fb14a60f77e5","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"In the previous posts, we have seen  how to setup a basic navigation between multiple Ionic app Pages . This post concerns what if you want to send some data from the previous page to the next page in the stack? For the Ionic provides  NavParams…","fields":{"title":"Passing Data Between Pages in an Ionic Application","slug":"passing-data-between-pages-in-an-ionic-application","date":"2017-12-03T00:00:00.000Z"},"code":{"scope":""}},"next":{"id":"8d14740e-8ded-5c12-ad86-b02e3c7e5ced","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Ionic makes it easy to create multiple pages navigation using  NavController  as the genesis of navigation stack. In this little application, I will try to make the concept clear to you. Generate Application and Pages To start with, let’s create a…","fields":{"title":"Multi Page Navigation in an Ionic App","slug":"multi-page-navigation-in-an-ionic-app","date":"2017-11-19T00:00:00.000Z"},"code":{"scope":""}}}}}